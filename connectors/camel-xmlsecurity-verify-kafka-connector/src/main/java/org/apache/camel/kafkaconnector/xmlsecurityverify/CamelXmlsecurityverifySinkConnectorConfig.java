/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.xmlsecurityverify;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelXmlsecurityverifySinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_CONF = "camel.sink.path.name";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_DOC = "The name part in the URI can be chosen by the user to distinguish between different verify endpoints within the camel context.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_CONF = "camel.sink.endpoint.baseUri";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_DOC = "You can set a base URI which is used in the URI dereferencing. Relative URIs are then concatenated with the base URI.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_CONF = "camel.sink.endpoint.clearHeaders";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_DOC = "Determines if the XML signature specific headers be cleared after signing and verification. Defaults to true.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_CONF = "camel.sink.endpoint.cryptoContextProperties";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_DOC = "Sets the crypto context properties. See {link XMLCryptoContext#setProperty(String, Object)}. Possible properties are defined in XMLSignContext an XMLValidateContext (see Supported Properties). The following properties are set by default to the value Boolean#TRUE for the XML validation. If you want to switch these features off you must set the property value to Boolean#FALSE. org.jcp.xml.dsig.validateManifests javax.xml.crypto.dsig.cacheReference";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_CONF = "camel.sink.endpoint.disallowDoctypeDecl";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_DOC = "Disallows that the incoming XML document contains DTD DOCTYPE declaration. The default value is Boolean#TRUE.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_CONF = "camel.sink.endpoint.keySelector";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_DOC = "Provides the key for validating the XML signature.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_CONF = "camel.sink.endpoint.omitXmlDeclaration";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_DOC = "Indicator whether the XML declaration in the outgoing message body should be omitted. Default value is false. Can be overwritten by the header XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_DEFAULT = "false";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_CONF = "camel.sink.endpoint.outputNodeSearch";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_DOC = "Sets the output node search value for determining the node from the XML signature document which shall be set to the output message body. The class of the value depends on the type of the output node search. The output node search is forwarded to XmlSignature2Message.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_CONF = "camel.sink.endpoint.outputNodeSearchType";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_DOC = "Determines the search type for determining the output node which is serialized into the output message bodyF. See setOutputNodeSearch(Object). The supported default search types you can find in DefaultXmlSignature2Message.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_DEFAULT = "Default";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_CONF = "camel.sink.endpoint.outputXmlEncoding";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_DOC = "The character encoding of the resulting signed XML document. If null then the encoding of the original XML document is used.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_CONF = "camel.sink.endpoint.removeSignatureElements";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_DOC = "Indicator whether the XML signature elements (elements with local name Signature and namesapce http://www.w3.org/2000/09/xmldsig#) shall be removed from the document set to the output message. Normally, this is only necessary, if the XML signature is enveloped. The default value is Boolean#FALSE. This parameter is forwarded to XmlSignature2Message. This indicator has no effect if the output node search is of type DefaultXmlSignature2Message#OUTPUT_NODE_SEARCH_TYPE_DEFAULT.F";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_DEFAULT = "false";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_CONF = "camel.sink.endpoint.schemaResourceUri";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_DOC = "Classpath to the XML Schema. Must be specified in the detached XML Signature case for determining the ID attributes, might be set in the enveloped and enveloping case. If set, then the XML document is validated with the specified XML schema. The schema resource URI can be overwritten by the header XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_CONF = "camel.sink.endpoint.secureValidation";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_DOC = "Enables secure validation. If true then secure validation is enabled.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_CONF = "camel.sink.endpoint.validationFailedHandler";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_DOC = "Handles the different validation failed situations. The default implementation throws specific exceptions for the different situations (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException. If the signature value validation fails, a XmlSignatureInvalidValueException is thrown. If a reference validation fails, a XmlSignatureInvalidContentHashException is thrown. For more detailed information, see the JavaDoc.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_CONF = "camel.sink.endpoint.xmlSignature2Message";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_DOC = "Bean which maps the XML signature to the output-message after the validation. How this mapping should be done can be configured by the options outputNodeSearchType, outputNodeSearch, and removeSignatureElements. The default implementation offers three possibilities which are related to the three output node search types Default, ElementName, and XPath. The default implementation determines a node which is then serialized and set to the body of the output message If the search type is ElementName then the output node (which must be in this case an element) is determined by the local name and namespace defined in the search value (see option outputNodeSearch). If the search type is XPath then the output node is determined by the XPath specified in the search value (in this case the output node can be of type Element, TextNode or Document). If the output node search type is Default then the following rules apply: In the enveloped XML signature case (there is a reference with URI= and transform http://www.w3.org/2000/09/xmldsig#enveloped-signature), the incoming XML document without the Signature element is set to the output message body. In the non-enveloped XML signature case, the message body is determined from a referenced Object; this is explained in more detail in chapter Output Node Determination in Enveloping XML Signature Case.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_CONF = "camel.sink.endpoint.xmlSignatureChecker";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_DOC = "This interface allows the application to check the XML signature before the validation is executed. This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/#check-what-is-signed";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_CONF = "camel.sink.endpoint.uriDereferencer";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_DOC = "If you want to restrict the remote access via reference URIs, you can set an own dereferencer. Optional parameter. If not set the provider default dereferencer is used which can resolve URI fragments, HTTP, file and XPpointer URIs. Attention: The implementation is provider dependent!";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_CONF = "camel.component.xmlsecurity-verify.baseUri";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_DOC = "You can set a base URI which is used in the URI dereferencing. Relative URIs are then concatenated with the base URI.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_CONF = "camel.component.xmlsecurity-verify.clearHeaders";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_DOC = "Determines if the XML signature specific headers be cleared after signing and verification. Defaults to true.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_CONF = "camel.component.xmlsecurity-verify.cryptoContextProperties";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_DOC = "Sets the crypto context properties. See {link XMLCryptoContext#setProperty(String, Object)}. Possible properties are defined in XMLSignContext an XMLValidateContext (see Supported Properties). The following properties are set by default to the value Boolean#TRUE for the XML validation. If you want to switch these features off you must set the property value to Boolean#FALSE. org.jcp.xml.dsig.validateManifests javax.xml.crypto.dsig.cacheReference";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_CONF = "camel.component.xmlsecurity-verify.disallowDoctypeDecl";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_DOC = "Disallows that the incoming XML document contains DTD DOCTYPE declaration. The default value is Boolean#TRUE.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_CONF = "camel.component.xmlsecurity-verify.keySelector";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_DOC = "Provides the key for validating the XML signature.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.xmlsecurity-verify.lazyStartProducer";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_CONF = "camel.component.xmlsecurity-verify.omitXmlDeclaration";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_DOC = "Indicator whether the XML declaration in the outgoing message body should be omitted. Default value is false. Can be overwritten by the header XmlSignatureConstants#HEADER_OMIT_XML_DECLARATION.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_DEFAULT = "false";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_CONF = "camel.component.xmlsecurity-verify.outputNodeSearch";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_DOC = "Sets the output node search value for determining the node from the XML signature document which shall be set to the output message body. The class of the value depends on the type of the output node search. The output node search is forwarded to XmlSignature2Message.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_CONF = "camel.component.xmlsecurity-verify.outputNodeSearchType";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_DOC = "Determines the search type for determining the output node which is serialized into the output message bodyF. See setOutputNodeSearch(Object). The supported default search types you can find in DefaultXmlSignature2Message.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_DEFAULT = "Default";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_CONF = "camel.component.xmlsecurity-verify.outputXmlEncoding";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_DOC = "The character encoding of the resulting signed XML document. If null then the encoding of the original XML document is used.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_CONF = "camel.component.xmlsecurity-verify.removeSignatureElements";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_DOC = "Indicator whether the XML signature elements (elements with local name Signature and namesapce http://www.w3.org/2000/09/xmldsig#) shall be removed from the document set to the output message. Normally, this is only necessary, if the XML signature is enveloped. The default value is Boolean#FALSE. This parameter is forwarded to XmlSignature2Message. This indicator has no effect if the output node search is of type DefaultXmlSignature2Message#OUTPUT_NODE_SEARCH_TYPE_DEFAULT.F";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_DEFAULT = "false";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_CONF = "camel.component.xmlsecurity-verify.schemaResourceUri";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_DOC = "Classpath to the XML Schema. Must be specified in the detached XML Signature case for determining the ID attributes, might be set in the enveloped and enveloping case. If set, then the XML document is validated with the specified XML schema. The schema resource URI can be overwritten by the header XmlSignatureConstants#HEADER_SCHEMA_RESOURCE_URI.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_CONF = "camel.component.xmlsecurity-verify.secureValidation";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_DOC = "Enables secure validation. If true then secure validation is enabled.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_DEFAULT = "true";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_CONF = "camel.component.xmlsecurity-verify.validationFailedHandler";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_DOC = "Handles the different validation failed situations. The default implementation throws specific exceptions for the different situations (All exceptions have the package name org.apache.camel.component.xmlsecurity.api and are a sub-class of XmlSignatureInvalidException. If the signature value validation fails, a XmlSignatureInvalidValueException is thrown. If a reference validation fails, a XmlSignatureInvalidContentHashException is thrown. For more detailed information, see the JavaDoc.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_CONF = "camel.component.xmlsecurity-verify.xmlSignature2Message";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_DOC = "Bean which maps the XML signature to the output-message after the validation. How this mapping should be done can be configured by the options outputNodeSearchType, outputNodeSearch, and removeSignatureElements. The default implementation offers three possibilities which are related to the three output node search types Default, ElementName, and XPath. The default implementation determines a node which is then serialized and set to the body of the output message If the search type is ElementName then the output node (which must be in this case an element) is determined by the local name and namespace defined in the search value (see option outputNodeSearch). If the search type is XPath then the output node is determined by the XPath specified in the search value (in this case the output node can be of type Element, TextNode or Document). If the output node search type is Default then the following rules apply: In the enveloped XML signature case (there is a reference with URI= and transform http://www.w3.org/2000/09/xmldsig#enveloped-signature), the incoming XML document without the Signature element is set to the output message body. In the non-enveloped XML signature case, the message body is determined from a referenced Object; this is explained in more detail in chapter Output Node Determination in Enveloping XML Signature Case.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_CONF = "camel.component.xmlsecurity-verify.xmlSignatureChecker";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_DOC = "This interface allows the application to check the XML signature before the validation is executed. This step is recommended in http://www.w3.org/TR/xmldsig-bestpractices/#check-what-is-signed";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.xmlsecurity-verify.basicPropertyBinding";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_CONF = "camel.component.xmlsecurity-verify.uriDereferencer";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_DOC = "If you want to restrict the remote access via reference URIs, you can set an own dereferencer. Optional parameter. If not set the provider default dereferencer is used which can resolve URI fragments, HTTP, file and XPpointer URIs. Attention: The implementation is provider dependent!";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_DEFAULT = null;
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_CONF = "camel.component.xmlsecurity-verify.verifierConfiguration";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_DOC = "To use a shared XmlVerifierConfiguration configuration to use as base for configuring endpoints.";
    public static final String CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_DEFAULT = null;

    public CamelXmlsecurityverifySinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelXmlsecurityverifySinkConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_XMLSECURITYVERIFY_PATH_NAME_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASE_URI_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CLEAR_HEADERS_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_CRYPTO_CONTEXT_PROPERTIES_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_DISALLOW_DOCTYPE_DECL_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_KEY_SELECTOR_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OMIT_XML_DECLARATION_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_NODE_SEARCH_TYPE_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_OUTPUT_XML_ENCODING_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_REMOVE_SIGNATURE_ELEMENTS_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SCHEMA_RESOURCE_URI_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SECURE_VALIDATION_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_VALIDATION_FAILED_HANDLER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_2MESSAGE_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_XML_SIGNATURE_CHECKER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_ENDPOINT_URI_DEREFERENCER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASE_URI_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CLEAR_HEADERS_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_CRYPTO_CONTEXT_PROPERTIES_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_DISALLOW_DOCTYPE_DECL_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_KEY_SELECTOR_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OMIT_XML_DECLARATION_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_NODE_SEARCH_TYPE_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_OUTPUT_XML_ENCODING_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_REMOVE_SIGNATURE_ELEMENTS_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SCHEMA_RESOURCE_URI_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_SECURE_VALIDATION_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VALIDATION_FAILED_HANDLER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_2MESSAGE_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_XML_SIGNATURE_CHECKER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_URI_DEREFERENCER_DOC);
        conf.define(CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_XMLSECURITYVERIFY_COMPONENT_VERIFIER_CONFIGURATION_DOC);
        return conf;
    }
}