{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.mongodbgridfs.CamelMongodbgridfsSinkConnector",
		"artifactId": "camel-mongodb-gridfs-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-mongodb-gridfs-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Interact with MongoDB GridFS."
	},
	"properties": {
		"camel.sink.path.connectionBean": {
			"name": "camel.sink.path.connectionBean",
			"description": "Name of com.mongodb.client.MongoClient to use.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.bucket": {
			"name": "camel.sink.endpoint.bucket",
			"description": "Sets the name of the GridFS bucket within the database. Default is fs.",
			"defaultValue": "\"fs\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.database": {
			"name": "camel.sink.endpoint.database",
			"description": "Sets the name of the MongoDB database to target",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.readPreference": {
			"name": "camel.sink.endpoint.readPreference",
			"description": "Sets a MongoDB ReadPreference on the Mongo connection. Read preferences set directly on the connection will be overridden by this setting. The com.mongodb.ReadPreference#valueOf(String) utility method is used to resolve the passed readPreference value. Some examples for the possible values are nearest, primary or secondary etc.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.writeConcern": {
			"name": "camel.sink.endpoint.writeConcern",
			"description": "Set the WriteConcern for write operations on MongoDB using the standard ones. Resolved from the fields of the WriteConcern class by calling the WriteConcern#valueOf(String) method. One of: [ACKNOWLEDGED] [W1] [W2] [W3] [UNACKNOWLEDGED] [JOURNALED] [MAJORITY]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"ACKNOWLEDGED",
				"W1",
				"W2",
				"W3",
				"UNACKNOWLEDGED",
				"JOURNALED",
				"MAJORITY"
			]
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.operation": {
			"name": "camel.sink.endpoint.operation",
			"description": "Sets the operation this endpoint will execute against GridFs.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.mongodb-gridfs.lazyStartProducer": {
			"name": "camel.component.mongodb-gridfs.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.mongodb-gridfs.autowiredEnabled": {
			"name": "camel.component.mongodb-gridfs.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}