{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.nitrite.CamelNitriteSourceConnector",
		"artifactId": "camel-nitrite-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-nitrite-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Access Nitrite databases."
	},
	"properties": {
		"camel.source.path.database": {
			"name": "camel.source.path.database",
			"description": "Path to database file. Will be created if not exists.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.collection": {
			"name": "camel.source.endpoint.collection",
			"description": "Name of Nitrite collection. Cannot be used in combination with repositoryClass option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repositoryClass": {
			"name": "camel.source.endpoint.repositoryClass",
			"description": "Class of Nitrite ObjectRepository. Cannot be used in combination with collection option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repositoryName": {
			"name": "camel.source.endpoint.repositoryName",
			"description": "Optional name of ObjectRepository. Can be only used in combination with repositoryClass, otherwise have no effect",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.password": {
			"name": "camel.source.endpoint.password",
			"description": "Password for Nitrite database. Required, if option username specified.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.username": {
			"name": "camel.source.endpoint.username",
			"description": "Username for Nitrite database. Database is not secured if option not specified.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nitrite.bridgeErrorHandler": {
			"name": "camel.component.nitrite.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nitrite.autowiredEnabled": {
			"name": "camel.component.nitrite.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}