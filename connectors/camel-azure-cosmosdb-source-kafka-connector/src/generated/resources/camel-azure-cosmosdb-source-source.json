{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.azurecosmosdbsource.CamelAzurecosmosdbsourceSourceConnector",
		"artifactId": "camel-azure-cosmosdb-source-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-azure-cosmosdb-source-source",
		"type": "source",
		"version": "4.4.3-SNAPSHOT",
		"description": "Consume Changes from a CosmosDB instance.\n\nThere are two different mechanism of authentication `SHARED_ACCOUNT_KEY` and `AZURE_IDENTITY`, you could specify with credentialType property. If you're using `SHARED_ACCOUNT_KEY` accountKey property will be needed.\n\nIn case of `AZURE_IDENTITY` selection, the DefaultAzureCredential will attempt to authenticate via the following mechanisms in the following order enviroment, Workload Identity, Managed Identity, Azure Developer CLI, IntelliJ, Azure CLI and Azure Powershell. "
	},
	"properties": {
		"camel.kamelet.azure-cosmosdb-source.databaseName": {
			"name": "camel.kamelet.azure-cosmosdb-source.databaseName",
			"description": "The Azure Cosmos database name.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.azure-cosmosdb-source.containerName": {
			"name": "camel.kamelet.azure-cosmosdb-source.containerName",
			"description": "The Azure Cosmos container name.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.azure-cosmosdb-source.accountKey": {
			"name": "camel.kamelet.azure-cosmosdb-source.accountKey",
			"description": "The Azure Cosmos account Key.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.azure-cosmosdb-source.leaseDatabaseName": {
			"name": "camel.kamelet.azure-cosmosdb-source.leaseDatabaseName",
			"description": "Sets the lease container which acts as a state storage and coordinates processing the change feed across multiple workers.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.azure-cosmosdb-source.leaseContainerName": {
			"name": "camel.kamelet.azure-cosmosdb-source.leaseContainerName",
			"description": "Sets the lease database where the leaseContainerName will be stored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.azure-cosmosdb-source.createLeaseDatabaseIfNotExists": {
			"name": "camel.kamelet.azure-cosmosdb-source.createLeaseDatabaseIfNotExists",
			"description": "Sets if the component should create Cosmos lease database for the consumer automatically in case it doesn\u2019t exist in Cosmos account.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.azure-cosmosdb-source.createLeaseContainerIfNotExists": {
			"name": "camel.kamelet.azure-cosmosdb-source.createLeaseContainerIfNotExists",
			"description": "Sets if the component should create Cosmos lease container for the consumer automatically in case it doesn\u2019t exist in Cosmos database.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.azure-cosmosdb-source.databaseEndpoint": {
			"name": "camel.kamelet.azure-cosmosdb-source.databaseEndpoint",
			"description": "Sets the Azure Cosmos database endpoint the component will connect to.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.azure-cosmosdb-source.credentialType": {
			"name": "camel.kamelet.azure-cosmosdb-source.credentialType",
			"description": "Determines the credential strategy to adopt.",
			"defaultValue": "\"SHARED_ACCOUNT_KEY\"",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}