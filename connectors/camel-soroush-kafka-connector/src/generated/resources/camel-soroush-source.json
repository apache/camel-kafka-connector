{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.soroush.CamelSoroushSourceConnector",
		"artifactId": "camel-soroush-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-soroush-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Send and receive messages as a Soroush chat bot."
	},
	"properties": {
		"camel.source.path.action": {
			"name": "camel.source.path.action",
			"description": "The action to do. One of: [sendMessage] [getMessage] [uploadFile] [downloadFile]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"sendMessage",
				"getMessage",
				"uploadFile",
				"downloadFile"
			]
		},
		"camel.source.endpoint.connectionTimeout": {
			"name": "camel.source.endpoint.connectionTimeout",
			"description": "Connection timeout in ms when connecting to soroush API",
			"defaultValue": "30000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxConnectionRetry": {
			"name": "camel.source.endpoint.maxConnectionRetry",
			"description": "Maximum connection retry when fail to connect to soroush API, if the quota is reached, MaximumConnectionRetryReachedException is thrown for that message.",
			"defaultValue": "4",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.concurrentConsumers": {
			"name": "camel.source.endpoint.concurrentConsumers",
			"description": "Number of Thread created by consumer in the route. if you use this method for parallelism, it is guaranteed that messages from same user always execute in the same thread and therefore messages from the same user are processed sequentially. Default value notice: using SoroushBotSingleThreadConsumer",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.queueCapacityPerThread": {
			"name": "camel.source.endpoint.queueCapacityPerThread",
			"description": "Maximum capacity of each queue when concurrentConsumers is greater than 1. if a queue become full, every message that should go to that queue will be dropped. If bridgeErrorHandler is set to true, an exchange with CongestionException is directed to ErrorHandler. You can then processed the error using onException(CongestionException.class) route. Default value notice: infinite capacity",
			"defaultValue": "0",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.backOffStrategy": {
			"name": "camel.source.endpoint.backOffStrategy",
			"description": "The strategy to backoff in case of connection failure. Currently 3 strategies are supported: 1. Exponential (default): It multiply retryWaitingTime by retryExponentialCoefficient after each connection failure. 2. Linear: It increase retryWaitingTime by retryLinearIncrement after each connection failure. 3. Fixed: Always use retryWaitingTime as the time between retries.",
			"defaultValue": "\"Exponential\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxRetryWaitingTime": {
			"name": "camel.source.endpoint.maxRetryWaitingTime",
			"description": "Maximum amount of time (in millisecond) a thread wait before retrying failed request.",
			"defaultValue": "3600000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.reconnectIdleConnectionTimeout": {
			"name": "camel.source.endpoint.reconnectIdleConnectionTimeout",
			"description": "The timeout in millisecond to reconnect the existing getMessage connection to ensure that the connection is always live and does not dead without notifying the bot. this value should not be changed.",
			"defaultValue": "300000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.retryExponentialCoefficient": {
			"name": "camel.source.endpoint.retryExponentialCoefficient",
			"description": "Coefficient to compute back off time when using Exponential Back Off strategy",
			"defaultValue": "2L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.retryLinearIncrement": {
			"name": "camel.source.endpoint.retryLinearIncrement",
			"description": "The amount of time (in millisecond) which adds to waiting time when using Linear back off strategy",
			"defaultValue": "10000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.retryWaitingTime": {
			"name": "camel.source.endpoint.retryWaitingTime",
			"description": "Waiting time before retry failed request (Millisecond). If backOffStrategy is not Fixed this is the based value for computing back off waiting time. the first retry is always happen immediately after failure and retryWaitingTime do not apply to the first retry.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.authorizationToken": {
			"name": "camel.source.endpoint.authorizationToken",
			"description": "The authorization token for using the bot. if uri path does not contain authorization token, this token will be used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.soroush.bridgeErrorHandler": {
			"name": "camel.component.soroush.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.soroush.autowiredEnabled": {
			"name": "camel.component.soroush.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.soroush.authorizationToken": {
			"name": "camel.component.soroush.authorizationToken",
			"description": "The default Soroush authorization token to be used when the information is not provided in the endpoints.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}