{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.jira.CamelJiraSourceConnector",
		"artifactId": "camel-jira-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-jira-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Interact with JIRA issue tracker."
	},
	"properties": {
		"camel.source.path.type": {
			"name": "camel.source.path.type",
			"description": "Operation to perform. Consumers: NewIssues, NewComments. Producers: AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue, Watchers. See this class javadoc description for more information. One of: [ADDCOMMENT] [ADDISSUE] [ATTACH] [DELETEISSUE] [NEWISSUES] [NEWCOMMENTS] [WATCHUPDATES] [UPDATEISSUE] [TRANSITIONISSUE] [WATCHERS] [ADDISSUELINK] [ADDWORKLOG] [FETCHISSUE] [FETCHCOMMENTS]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"ADDCOMMENT",
				"ADDISSUE",
				"ATTACH",
				"DELETEISSUE",
				"NEWISSUES",
				"NEWCOMMENTS",
				"WATCHUPDATES",
				"UPDATEISSUE",
				"TRANSITIONISSUE",
				"WATCHERS",
				"ADDISSUELINK",
				"ADDWORKLOG",
				"FETCHISSUE",
				"FETCHCOMMENTS"
			]
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Time in milliseconds to elapse for the next poll.",
			"defaultValue": "\"6000\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.jiraUrl": {
			"name": "camel.source.endpoint.jiraUrl",
			"description": "The Jira server url, example: http:\/\/my_jira.com:8081",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.jql": {
			"name": "camel.source.endpoint.jql",
			"description": "JQL is the query language from JIRA which allows you to retrieve the data you want. For example jql=project=MyProject Where MyProject is the product key in Jira. It is important to use the RAW() and set the JQL inside it to prevent camel parsing it, example: RAW(project in (MYP, COM) AND resolution = Unresolved)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxResults": {
			"name": "camel.source.endpoint.maxResults",
			"description": "Max number of issues to search for",
			"defaultValue": "\"50\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendOnlyUpdatedField": {
			"name": "camel.source.endpoint.sendOnlyUpdatedField",
			"description": "Indicator for sending only changed fields in exchange body or issue object. By default consumer sends only changed fields.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.watchedFields": {
			"name": "camel.source.endpoint.watchedFields",
			"description": "Comma separated list of fields to watch for changes. Status,Priority are the defaults.",
			"defaultValue": "\"Status,Priority\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.accessToken": {
			"name": "camel.source.endpoint.accessToken",
			"description": "(OAuth only) The access token generated by the Jira server.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.consumerKey": {
			"name": "camel.source.endpoint.consumerKey",
			"description": "(OAuth only) The consumer key from Jira settings.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.password": {
			"name": "camel.source.endpoint.password",
			"description": "(Basic authentication only) The password to authenticate to the Jira server. Use only if username basic authentication is used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.privateKey": {
			"name": "camel.source.endpoint.privateKey",
			"description": "(OAuth only) The private key generated by the client to encrypt the conversation to the server.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.username": {
			"name": "camel.source.endpoint.username",
			"description": "(Basic authentication only) The username to authenticate to the Jira server. Use only if OAuth is not enabled on the Jira server. Do not set the username and OAuth token parameter, if they are both set, the username basic authentication takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.verificationCode": {
			"name": "camel.source.endpoint.verificationCode",
			"description": "(OAuth only) The verification code from Jira generated in the first step of the authorization proccess.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.delay": {
			"name": "camel.component.jira.delay",
			"description": "Time in milliseconds to elapse for the next poll.",
			"defaultValue": "\"6000\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.jiraUrl": {
			"name": "camel.component.jira.jiraUrl",
			"description": "The Jira server url, example: http:\/\/my_jira.com:8081",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.component.jira.bridgeErrorHandler": {
			"name": "camel.component.jira.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.autowiredEnabled": {
			"name": "camel.component.jira.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.configuration": {
			"name": "camel.component.jira.configuration",
			"description": "To use a shared base jira configuration.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.accessToken": {
			"name": "camel.component.jira.accessToken",
			"description": "(OAuth only) The access token generated by the Jira server.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.consumerKey": {
			"name": "camel.component.jira.consumerKey",
			"description": "(OAuth only) The consumer key from Jira settings.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.password": {
			"name": "camel.component.jira.password",
			"description": "(Basic authentication only) The password to authenticate to the Jira server. Use only if username basic authentication is used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.privateKey": {
			"name": "camel.component.jira.privateKey",
			"description": "(OAuth only) The private key generated by the client to encrypt the conversation to the server.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.username": {
			"name": "camel.component.jira.username",
			"description": "(Basic authentication only) The username to authenticate to the Jira server. Use only if OAuth is not enabled on the Jira server. Do not set the username and OAuth token parameter, if they are both set, the username basic authentication takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jira.verificationCode": {
			"name": "camel.component.jira.verificationCode",
			"description": "(OAuth only) The verification code from Jira generated in the first step of the authorization proccess.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}