/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.nettyhttp;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelNettyhttpSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_CONF = "camel.source.path.protocol";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_DOC = "The protocol to use which is either http, https or proxy - a consumer only option. One of: [http] [https]";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_HOST_CONF = "camel.source.path.host";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_HOST_DOC = "The local hostname such as localhost, or 0.0.0.0 when being a consumer. The remote HTTP server hostname when using producer.";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PORT_CONF = "camel.source.path.port";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PORT_DOC = "The host port number";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_PATH_PORT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PATH_CONF = "camel.source.path.path";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PATH_DOC = "Resource path";
    public static final String CAMEL_SOURCE_NETTYHTTP_PATH_PATH_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_CONF = "camel.source.endpoint.bridgeEndpoint";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_DOC = "If the option is true, the producer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request. You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back. The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange).";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_CONF = "camel.source.endpoint.disconnect";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_DOC = "Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_CONF = "camel.source.endpoint.keepAlive";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_DOC = "Setting to ensure socket is not closed due to inactivity";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_CONF = "camel.source.endpoint.reuseAddress";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_DOC = "Setting to facilitate socket multiplexing";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_CONF = "camel.source.endpoint.reuseChannel";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_DOC = "This option allows producers and consumers (in client mode) to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useful if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this, the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key NettyConstants#NETTY_CHANNEL which allows you to obtain the channel during routing and use it as well.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_CONF = "camel.source.endpoint.sync";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_DOC = "Setting to set endpoint as one-way or request-response";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_CONF = "camel.source.endpoint.tcpNoDelay";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_DOC = "Setting to improve TCP protocol performance";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_CONF = "camel.source.endpoint.matchOnUriPrefix";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_DOC = "Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_CONF = "camel.source.endpoint.muteException";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_DOC = "If enabled and an Exchange failed processing on the consumer side the response's body won't contain the exception's stack trace.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_CONF = "camel.source.endpoint.send503whenSuspended";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_DOC = "Whether to send back HTTP status code 503 when the consumer has been suspended. If the option is false then the Netty Acceptor is unbound when the consumer is suspended, so clients cannot connect anymore.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_CONF = "camel.source.endpoint.backlog";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_DOC = "Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200, 500 or 1000, tells the TCP stack how long the accept queue can be If this option is not configured, then the backlog depends on OS setting.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_CONF = "camel.source.endpoint.bossCount";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_DOC = "When netty works on nio mode, it uses default bossCount parameter from Netty, which is 1. User can use this option to override the default bossCount from Netty";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_DEFAULT = 1;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_CONF = "camel.source.endpoint.bossGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_DOC = "Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_CONF = "camel.source.endpoint.chunkedMaxContentLength";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_DOC = "Value in bytes the max content length per chunked frame received on the Netty HTTP server.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_DEFAULT = 1048576;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_CONF = "camel.source.endpoint.compression";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_DOC = "Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_CONF = "camel.source.endpoint.disconnectOnNoReply";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_DOC = "If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_CONF = "camel.source.endpoint.httpMethodRestrict";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_DOC = "To disable HTTP methods on the Netty HTTP consumer. You can specify multiple separated by comma.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_CONF = "camel.source.endpoint.logWarnOnBadRequest";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_DOC = "Whether Netty HTTP server should log a WARN if decoding the HTTP request failed and a HTTP Status 400 (bad request) is returned.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_CONF = "camel.source.endpoint.mapHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_DOC = "If this option is enabled, then during binding from Netty to Camel Message then the headers will be mapped as well (eg added as header to the Camel Message as well). You can turn off this option to disable this. The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with the method getHttpRequest() that returns the Netty HTTP request io.netty.handler.codec.http.HttpRequest instance.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_CONF = "camel.source.endpoint.maxHeaderSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_DOC = "The maximum length of all headers. If the sum of the length of each header exceeds this value, a io.netty.handler.codec.TooLongFrameException will be raised.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_DEFAULT = 8192;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_CONF = "camel.source.endpoint.nettyServerBootstrapFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_DOC = "To use a custom NettyServerBootstrapFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_CONF = "camel.source.endpoint.nettySharedHttpServer";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_DOC = "To use a shared Netty HTTP server. See Netty HTTP Server Example for more details.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_CONF = "camel.source.endpoint.noReplyLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_DOC = "If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_DEFAULT = "WARN";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_CONF = "camel.source.endpoint.serverClosedChannelExceptionCaughtLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DOC = "If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions, as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT = "DEBUG";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_CONF = "camel.source.endpoint.serverExceptionCaughtLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DOC = "If the server (NettyConsumer) catches an exception then its logged using this logging level. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT = "WARN";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_CONF = "camel.source.endpoint.serverInitializerFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_DOC = "To use a custom ServerInitializerFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_CONF = "camel.source.endpoint.traceEnabled";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_DOC = "Specifies whether to enable HTTP TRACE for this Netty HTTP consumer. By default TRACE is turned off.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_CONF = "camel.source.endpoint.urlDecodeHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_DOC = "If this option is enabled, then during binding from Netty to Camel Message then the header values will be URL decoded (eg %20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding and therefore if you implement a custom org.apache.camel.component.netty.http.NettyHttpBinding then you would need to decode the headers accordingly to this option.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.usingExecutorService";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_DOC = "Whether to use ordered thread pool, to ensure events are processed orderly on the same channel.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_CONF = "camel.source.endpoint.allowSerializedHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DOC = "Only used for TCP when transferExchange is true. When set to true, serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_CONF = "camel.source.endpoint.channelGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_DOC = "To use a explicit ChannelGroup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_CONF = "camel.source.endpoint.configuration";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_DOC = "To use a custom configured NettyHttpConfiguration for configuring this endpoint.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_CONF = "camel.source.endpoint.disableStreamCache";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_DOC = "Determines whether or not the raw input stream from Netty HttpRequest#getContent() or HttpResponset#getContent() is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache. By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream, such as streaming it directly to a file or other persistent store. Mind that if you enable this option, then you cannot read the Netty stream multiple times out of the box, and you would need manually to reset the reader index on the Netty raw stream. Also Netty will auto-close the Netty stream when the Netty HTTP server/HTTP client is done processing, which means that if the asynchronous routing engine is in use then any asynchronous thread that may continue routing the org.apache.camel.Exchange may not be able to read the Netty stream, because Netty has closed it.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_CONF = "camel.source.endpoint.headerFilterStrategy";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_DOC = "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_CONF = "camel.source.endpoint.nativeTransport";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_DOC = "Whether to use native transport instead of NIO. Native transport takes advantage of the host operating system and is only supported on some platforms. You need to add the netty JAR for the host operating system you are using. See more details at: http://netty.io/wiki/native-transports.html";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_CONF = "camel.source.endpoint.nettyHttpBinding";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_DOC = "To use a custom org.apache.camel.component.netty.http.NettyHttpBinding for binding to/from Netty and Camel Message API.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_CONF = "camel.source.endpoint.options";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_DOC = "Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_CONF = "camel.source.endpoint.receiveBufferSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_DOC = "The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_DEFAULT = 65536;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_CONF = "camel.source.endpoint.receiveBufferSizePredictor";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_DOC = "Configures the buffer size predictor. See details at Jetty documentation and this mail thread.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_CONF = "camel.source.endpoint.sendBufferSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_DOC = "The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_DEFAULT = 65536;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_CONF = "camel.source.endpoint.transferException";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_DOC = "If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_CONF = "camel.source.endpoint.transferExchange";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_DOC = "Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body, Out body, fault body, In headers, Out headers, fault headers, exchange properties, exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_CONF = "camel.source.endpoint.workerCount";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_DOC = "When netty works on nio mode, it uses default workerCount parameter from Netty (which is cpu_core_threads x 2). User can use this option to override the default workerCount from Netty.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_CONF = "camel.source.endpoint.workerGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_DOC = "To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers or producers. By default each consumer or producer has their own worker pool with 2 x cpu count core threads.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_CONF = "camel.source.endpoint.decoders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_DOC = "A list of decoders to be used. You can use a String which have values separated by comma, and have the values be looked up in the Registry. Just remember to prefix the value with # so Camel knows it should lookup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_CONF = "camel.source.endpoint.encoders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_DOC = "A list of encoders to be used. You can use a String which have values separated by comma, and have the values be looked up in the Registry. Just remember to prefix the value with # so Camel knows it should lookup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_CONF = "camel.source.endpoint.enabledProtocols";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_DOC = "Which protocols to enable when using SSL";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_DEFAULT = "TLSv1,TLSv1.1,TLSv1.2";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_CONF = "camel.source.endpoint.keyStoreFile";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_DOC = "Client side certificate keystore to be used for encryption";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_CONF = "camel.source.endpoint.keyStoreFormat";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_DOC = "Keystore format to be used for payload encryption. Defaults to JKS if not set";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_CONF = "camel.source.endpoint.keyStoreResource";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_DOC = "Client side certificate keystore to be used for encryption. Is loaded by default from classpath, but you can prefix with classpath:, file:, or http: to load the resource from different systems.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_CONF = "camel.source.endpoint.needClientAuth";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_DOC = "Configures whether the server needs client authentication when using SSL.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_CONF = "camel.source.endpoint.passphrase";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_DOC = "Password setting to use in order to encrypt/decrypt payloads sent using SSH";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_CONF = "camel.source.endpoint.securityConfiguration";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_DOC = "Refers to a org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration for configuring secure web resources.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_CONF = "camel.source.endpoint.securityOptions";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_DOC = "To configure NettyHttpSecurityConfiguration using key/value pairs from the map";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_CONF = "camel.source.endpoint.securityProvider";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_DOC = "Security provider to be used for payload encryption. Defaults to SunX509 if not set.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONF = "camel.source.endpoint.ssl";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_DOC = "Setting to specify whether SSL encryption is applied to this endpoint";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_CONF = "camel.source.endpoint.sslClientCertHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_DOC = "When enabled and in SSL mode, then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name, issuer name, serial number, and the valid date range.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_CONF = "camel.source.endpoint.sslContextParameters";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_DOC = "To configure security using SSLContextParameters";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_CONF = "camel.source.endpoint.sslHandler";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_DOC = "Reference to a class that could be used to return an SSL Handler";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_CONF = "camel.source.endpoint.trustStoreFile";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_DOC = "Server side certificate keystore to be used for encryption";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_CONF = "camel.source.endpoint.trustStoreResource";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_DOC = "Server side certificate keystore to be used for encryption. Is loaded by default from classpath, but you can prefix with classpath:, file:, or http: to load the resource from different systems.";
    public static final String CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_CONF = "camel.component.netty-http.configuration";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_DOC = "To use the NettyConfiguration as configuration when creating endpoints.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_CONF = "camel.component.netty-http.disconnect";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_DOC = "Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_CONF = "camel.component.netty-http.keepAlive";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_DOC = "Setting to ensure socket is not closed due to inactivity";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_CONF = "camel.component.netty-http.reuseAddress";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_DOC = "Setting to facilitate socket multiplexing";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_CONF = "camel.component.netty-http.reuseChannel";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_DOC = "This option allows producers and consumers (in client mode) to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useful if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this, the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key NettyConstants#NETTY_CHANNEL which allows you to obtain the channel during routing and use it as well.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_CONF = "camel.component.netty-http.sync";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_DOC = "Setting to set endpoint as one-way or request-response";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_CONF = "camel.component.netty-http.tcpNoDelay";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_DOC = "Setting to improve TCP protocol performance";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.netty-http.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_CONF = "camel.component.netty-http.broadcast";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_DOC = "Setting to choose Multicast over UDP";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_CONF = "camel.component.netty-http.clientMode";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_DOC = "If the clientMode is true, netty consumer will connect the address as a TCP client.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_CONF = "camel.component.netty-http.reconnect";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_DOC = "Used only in clientMode in consumer, the consumer will attempt to reconnect on disconnection if this is enabled";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_CONF = "camel.component.netty-http.reconnectInterval";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_DOC = "Used if reconnect and clientMode is enabled. The interval in milli seconds to attempt reconnection";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_DEFAULT = 10000;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_CONF = "camel.component.netty-http.backlog";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_DOC = "Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200, 500 or 1000, tells the TCP stack how long the accept queue can be If this option is not configured, then the backlog depends on OS setting.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_CONF = "camel.component.netty-http.bossCount";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_DOC = "When netty works on nio mode, it uses default bossCount parameter from Netty, which is 1. User can use this option to override the default bossCount from Netty";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_DEFAULT = 1;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_CONF = "camel.component.netty-http.bossGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_DOC = "Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_CONF = "camel.component.netty-http.disconnectOnNoReply";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_DOC = "If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_CONF = "camel.component.netty-http.executorService";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_DOC = "To use the given EventExecutorGroup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_CONF = "camel.component.netty-http.maximumPoolSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_DOC = "Sets a maximum thread pool size for the netty consumer ordered thread pool. The default size is 2 x cpu_core plus 1. Setting this value to eg 10 will then use 10 threads unless 2 x cpu_core plus 1 is a higher value, which then will override and be used. For example if there are 8 cores, then the consumer thread pool will be 17. This thread pool is used to route messages received from Netty by Camel. We use a separate thread pool to ensure ordering of messages and also in case some messages will block, then nettys worker threads (event loop) wont be affected.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_CONF = "camel.component.netty-http.nettyServerBootstrapFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_DOC = "To use a custom NettyServerBootstrapFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_CONF = "camel.component.netty-http.networkInterface";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_DOC = "When using UDP then this option can be used to specify a network interface by its name, such as eth0 to join a multicast group.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_CONF = "camel.component.netty-http.noReplyLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_DOC = "If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_DEFAULT = "WARN";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_CONF = "camel.component.netty-http.serverClosedChannelExceptionCaughtLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DOC = "If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions, as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT = "DEBUG";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_CONF = "camel.component.netty-http.serverExceptionCaughtLogLevel";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DOC = "If the server (NettyConsumer) catches an exception then its logged using this logging level. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT = "WARN";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_CONF = "camel.component.netty-http.serverInitializerFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_DOC = "To use a custom ServerInitializerFactory";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_CONF = "camel.component.netty-http.usingExecutorService";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_DOC = "Whether to use ordered thread pool, to ensure events are processed orderly on the same channel.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_CONF = "camel.component.netty-http.allowSerializedHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_DOC = "Only used for TCP when transferExchange is true. When set to true, serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.netty-http.basicPropertyBinding";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_CONF = "camel.component.netty-http.channelGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_DOC = "To use a explicit ChannelGroup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_CONF = "camel.component.netty-http.headerFilterStrategy";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_DOC = "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_CONF = "camel.component.netty-http.nativeTransport";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_DOC = "Whether to use native transport instead of NIO. Native transport takes advantage of the host operating system and is only supported on some platforms. You need to add the netty JAR for the host operating system you are using. See more details at: http://netty.io/wiki/native-transports.html";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_CONF = "camel.component.netty-http.nettyHttpBinding";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_DOC = "To use a custom org.apache.camel.component.netty.http.NettyHttpBinding for binding to/from Netty and Camel Message API.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_CONF = "camel.component.netty-http.options";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_DOC = "Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_CONF = "camel.component.netty-http.receiveBufferSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_DOC = "The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_DEFAULT = 65536;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_CONF = "camel.component.netty-http.receiveBufferSizePredictor";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_DOC = "Configures the buffer size predictor. See details at Jetty documentation and this mail thread.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_CONF = "camel.component.netty-http.sendBufferSize";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_DOC = "The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_DEFAULT = 65536;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_CONF = "camel.component.netty-http.transferExchange";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_DOC = "Only used for TCP. You can transfer the exchange over the wire instead of just the body. The following fields are transferred: In body, Out body, fault body, In headers, Out headers, fault headers, exchange properties, exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_CONF = "camel.component.netty-http.udpByteArrayCodec";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_DOC = "For UDP only. If enabled the using byte array codec instead of Java serialization protocol.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_CONF = "camel.component.netty-http.workerCount";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_DOC = "When netty works on nio mode, it uses default workerCount parameter from Netty (which is cpu_core_threads x 2). User can use this option to override the default workerCount from Netty.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_CONF = "camel.component.netty-http.workerGroup";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_DOC = "To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers or producers. By default each consumer or producer has their own worker pool with 2 x cpu count core threads.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_CONF = "camel.component.netty-http.allowDefaultCodec";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_DOC = "The netty component installs a default codec if both, encoder/decoder is null and textline is false. Setting allowDefaultCodec to false prevents the netty component from installing a default codec as the first element in the filter chain.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_CONF = "camel.component.netty-http.autoAppendDelimiter";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_DOC = "Whether or not to auto append missing end delimiter when sending using the textline codec.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_DEFAULT = true;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_CONF = "camel.component.netty-http.decoderMaxLineLength";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_DOC = "The max line length to use for the textline codec.";
    public static final Integer CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_DEFAULT = 1024;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_CONF = "camel.component.netty-http.decoders";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_DOC = "A list of decoders to be used. You can use a String which have values separated by comma, and have the values be looked up in the Registry. Just remember to prefix the value with # so Camel knows it should lookup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_CONF = "camel.component.netty-http.delimiter";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_DOC = "The delimiter to use for the textline codec. Possible values are LINE and NULL. One of: [LINE] [NULL]";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_DEFAULT = "LINE";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_CONF = "camel.component.netty-http.encoders";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_DOC = "A list of encoders to be used. You can use a String which have values separated by comma, and have the values be looked up in the Registry. Just remember to prefix the value with # so Camel knows it should lookup.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_CONF = "camel.component.netty-http.encoding";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_DOC = "The encoding (a charset name) to use for the textline codec. If not provided, Camel will use the JVM default Charset.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_CONF = "camel.component.netty-http.textline";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_DOC = "Only used for TCP. If no codec is specified, you can use this flag to indicate a text line based codec; if not specified or the value is false, then Object Serialization is assumed over TCP - however only Strings are allowed to be serialized by default.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_CONF = "camel.component.netty-http.enabledProtocols";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_DOC = "Which protocols to enable when using SSL";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_DEFAULT = "TLSv1,TLSv1.1,TLSv1.2";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_CONF = "camel.component.netty-http.keyStoreFile";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_DOC = "Client side certificate keystore to be used for encryption";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_CONF = "camel.component.netty-http.keyStoreFormat";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_DOC = "Keystore format to be used for payload encryption. Defaults to JKS if not set";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_CONF = "camel.component.netty-http.keyStoreResource";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_DOC = "Client side certificate keystore to be used for encryption. Is loaded by default from classpath, but you can prefix with classpath:, file:, or http: to load the resource from different systems.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_CONF = "camel.component.netty-http.needClientAuth";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_DOC = "Configures whether the server needs client authentication when using SSL.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_CONF = "camel.component.netty-http.passphrase";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_DOC = "Password setting to use in order to encrypt/decrypt payloads sent using SSH";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_CONF = "camel.component.netty-http.securityConfiguration";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_DOC = "Refers to a org.apache.camel.component.netty.http.NettyHttpSecurityConfiguration for configuring secure web resources.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_CONF = "camel.component.netty-http.securityProvider";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_DOC = "Security provider to be used for payload encryption. Defaults to SunX509 if not set.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONF = "camel.component.netty-http.ssl";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_DOC = "Setting to specify whether SSL encryption is applied to this endpoint";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_CONF = "camel.component.netty-http.sslClientCertHeaders";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_DOC = "When enabled and in SSL mode, then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name, issuer name, serial number, and the valid date range.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_DEFAULT = false;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_CONF = "camel.component.netty-http.sslContextParameters";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_DOC = "To configure security using SSLContextParameters";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_CONF = "camel.component.netty-http.sslHandler";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_DOC = "Reference to a class that could be used to return an SSL Handler";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_CONF = "camel.component.netty-http.trustStoreFile";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_DOC = "Server side certificate keystore to be used for encryption";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_CONF = "camel.component.netty-http.trustStoreResource";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_DOC = "Server side certificate keystore to be used for encryption. Is loaded by default from classpath, but you can prefix with classpath:, file:, or http: to load the resource from different systems.";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_CONF = "camel.component.netty-http.useGlobalSslContextParameters";
    public static final String CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DOC = "Enable usage of global SSL context parameters.";
    public static final Boolean CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DEFAULT = false;

    public CamelNettyhttpSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelNettyhttpSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_NETTYHTTP_PATH_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_NETTYHTTP_PATH_HOST_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_PATH_PORT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_PATH_PORT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_PATH_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_PATH_PATH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_PATH_PATH_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ENDPOINT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEEP_ALIVE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_ADDRESS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_REUSE_CHANNEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNC_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TCP_NO_DELAY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MATCH_ON_URI_PREFIX_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MUTE_EXCEPTION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_503WHENSUSPENDED_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BACKLOG_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_COUNT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BOSS_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHUNKED_MAX_CONTENT_LENGTH_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_COMPRESSION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISCONNECT_ON_NO_REPLY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HTTP_METHOD_RESTRICT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_LOG_WARN_ON_BAD_REQUEST_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAP_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_MAX_HEADER_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SERVER_BOOTSTRAP_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_SHARED_HTTP_SERVER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NO_REPLY_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SERVER_INITIALIZER_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRACE_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_URL_DECODE_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_USING_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CHANNEL_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DISABLE_STREAM_CACHE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NATIVE_TRANSPORT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NETTY_HTTP_BINDING_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_RECEIVE_BUFFER_SIZE_PREDICTOR_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SEND_BUFFER_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCEPTION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRANSFER_EXCHANGE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_COUNT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_WORKER_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_DECODERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENCODERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FILE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_FORMAT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_KEY_STORE_RESOURCE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_NEED_CLIENT_AUTH_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_PASSPHRASE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SECURITY_PROVIDER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CLIENT_CERT_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_CONTEXT_PARAMETERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_SSL_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_FILE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_ENDPOINT_TRUST_STORE_RESOURCE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEEP_ALIVE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_ADDRESS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_REUSE_CHANNEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SYNC_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TCP_NO_DELAY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BROADCAST_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CLIENT_MODE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECONNECT_INTERVAL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BACKLOG_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_COUNT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BOSS_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DISCONNECT_ON_NO_REPLY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_MAXIMUM_POOL_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_SERVER_BOOTSTRAP_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETWORK_INTERFACE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NO_REPLY_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_CLOSED_CHANNEL_EXCEPTION_CAUGHT_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_EXCEPTION_CAUGHT_LOG_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SERVER_INITIALIZER_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_USING_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_SERIALIZED_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SOURCE_NETTYHTTP_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_CHANNEL_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NATIVE_TRANSPORT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NETTY_HTTP_BINDING_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_RECEIVE_BUFFER_SIZE_PREDICTOR_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SEND_BUFFER_SIZE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRANSFER_EXCHANGE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_UDP_BYTE_ARRAY_CODEC_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_COUNT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_WORKER_GROUP_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ALLOW_DEFAULT_CODEC_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_AUTO_APPEND_DELIMITER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODER_MAX_LINE_LENGTH_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DECODERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_DELIMITER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENCODING_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TEXTLINE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FILE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_FORMAT_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_KEY_STORE_RESOURCE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_NEED_CLIENT_AUTH_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_PASSPHRASE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SECURITY_PROVIDER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CLIENT_CERT_HEADERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_CONTEXT_PARAMETERS_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_SSL_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_FILE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_TRUST_STORE_RESOURCE_DOC);
        conf.define(CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_NETTYHTTP_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DOC);
        return conf;
    }
}