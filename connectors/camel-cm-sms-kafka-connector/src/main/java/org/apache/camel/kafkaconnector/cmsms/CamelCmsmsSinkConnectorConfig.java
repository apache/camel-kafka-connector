/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.cmsms;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelCmsmsSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_CMSMS_PATH_HOST_CONF = "camel.sink.path.host";
    public static final String CAMEL_SINK_CMSMS_PATH_HOST_DOC = "SMS Provider HOST with scheme";
    public static final String CAMEL_SINK_CMSMS_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_CONF = "camel.sink.endpoint.defaultFrom";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_DOC = "This is the sender name. The maximum length is 11 characters.";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_DEFAULT = null;
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_CONF = "camel.sink.endpoint.defaultMaxNumberOfParts";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_DOC = "If it is a multipart message forces the max number. Message can be truncated. Technically the gateway will first check if a message is larger than 160 characters, if so, the message will be cut into multiple 153 characters parts limited by these parameters.";
    public static final Integer CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_DEFAULT = 8;
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_CONF = "camel.sink.endpoint.productToken";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_DOC = "The unique token to use";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_DEFAULT = null;
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_CONF = "camel.sink.endpoint.testConnectionOnStartup";
    public static final String CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DOC = "Whether to test the connection to the SMS Gateway on startup";
    public static final Boolean CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DEFAULT = false;
    public static final String CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.cm-sms.lazyStartProducer";
    public static final String CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.cm-sms.autowiredEnabled";
    public static final String CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;

    public CamelCmsmsSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelCmsmsSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_CMSMS_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMSMS_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_CMSMS_PATH_HOST_DOC);
        conf.define(CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_FROM_DOC);
        conf.define(CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_CONF, ConfigDef.Type.INT, CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMSMS_ENDPOINT_DEFAULT_MAX_NUMBER_OF_PARTS_DOC);
        conf.define(CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMSMS_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_CMSMS_ENDPOINT_PRODUCT_TOKEN_DOC);
        conf.define(CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMSMS_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DOC);
        conf.define(CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMSMS_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMSMS_COMPONENT_AUTOWIRED_ENABLED_DOC);
        return conf;
    }
}