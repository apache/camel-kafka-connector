/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.splunk;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelSplunkSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_SPLUNK_PATH_NAME_CONF = "camel.source.path.name";
    public static final String CAMEL_SOURCE_SPLUNK_PATH_NAME_DOC = "Name has no purpose";
    public static final String CAMEL_SOURCE_SPLUNK_PATH_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_CONF = "camel.source.endpoint.app";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_DOC = "Splunk app";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_CONF = "camel.source.endpoint.connectionTimeout";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_DOC = "Timeout in MS when connecting to Splunk server";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_DEFAULT = 5000;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_CONF = "camel.source.endpoint.host";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_DOC = "Splunk host.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_DEFAULT = "localhost";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_CONF = "camel.source.endpoint.owner";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_DOC = "Splunk owner";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_CONF = "camel.source.endpoint.port";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_DOC = "Splunk port";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_DEFAULT = 8089;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_CONF = "camel.source.endpoint.scheme";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_DOC = "Splunk scheme";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_DEFAULT = "https";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_CONF = "camel.source.endpoint.count";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_DOC = "A number that indicates the maximum number of entities to return.";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_CONF = "camel.source.endpoint.earliestTime";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_DOC = "Earliest time of the search time window.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_CONF = "camel.source.endpoint.initEarliestTime";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_DOC = "Initial start offset of the first search";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_CONF = "camel.source.endpoint.latestTime";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_DOC = "Latest time of the search time window.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_CONF = "camel.source.endpoint.savedSearch";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_DOC = "The name of the query saved in Splunk to run";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_CONF = "camel.source.endpoint.search";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_DOC = "The Splunk query to run";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF = "camel.source.endpoint.sendEmptyMessageWhenIdle";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC = "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_CONF = "camel.source.endpoint.streaming";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_DOC = "Sets streaming mode. Streaming mode sends exchanges as they are received, rather than in a batch.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_CONF = "camel.source.endpoint.pollStrategy";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_DOC = "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF = "camel.source.endpoint.backoffErrorThreshold";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC = "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF = "camel.source.endpoint.backoffIdleThreshold";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC = "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_CONF = "camel.source.endpoint.backoffMultiplier";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_DOC = "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.";
    public static final Integer CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_CONF = "camel.source.endpoint.delay";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_DOC = "Milliseconds before the next poll.";
    public static final Long CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_DEFAULT = 500L;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_CONF = "camel.source.endpoint.greedy";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_DOC = "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_CONF = "camel.source.endpoint.initialDelay";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_DOC = "Milliseconds before the first poll starts.";
    public static final Long CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_CONF = "camel.source.endpoint.repeatCount";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_DOC = "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.";
    public static final Long CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_CONF = "camel.source.endpoint.runLoggingLevel";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_DOC = "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT = "TRACE";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.scheduledExecutorService";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC = "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_CONF = "camel.source.endpoint.scheduler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_DOC = "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_DEFAULT = "none";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_CONF = "camel.source.endpoint.schedulerProperties";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_DOC = "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_CONF = "camel.source.endpoint.startScheduler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_DOC = "Whether the scheduler should be auto started.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_DEFAULT = true;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_CONF = "camel.source.endpoint.timeUnit";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_DOC = "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_DEFAULT = "MILLISECONDS";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_CONF = "camel.source.endpoint.useFixedDelay";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_DOC = "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_CONF = "camel.source.endpoint.password";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_DOC = "Password for Splunk";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_CONF = "camel.source.endpoint.sslProtocol";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_DOC = "Set the ssl protocol to use One of: [TLSv1.2] [TLSv1.1] [TLSv1] [SSLv3]";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_DEFAULT = "TLSv1.2";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_CONF = "camel.source.endpoint.username";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_DOC = "Username for Splunk";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_CONF = "camel.source.endpoint.useSunHttpsHandler";
    public static final String CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_DOC = "Use sun.net.www.protocol.https.Handler Https handler to establish the Splunk Connection. Can be useful when running in application servers to avoid app. server https handling.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.splunk.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.splunk.autowiredEnabled";
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_CONF = "camel.component.splunk.splunkConfigurationFactory";
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_DOC = "To use the SplunkConfigurationFactory";
    public static final String CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_DEFAULT = null;

    public CamelSplunkSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelSplunkSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_SPLUNK_PATH_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_PATH_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_SPLUNK_PATH_NAME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_APP_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_CONNECTION_TIMEOUT_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_HOST_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_OWNER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_PORT_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_COUNT_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_EARLIEST_TIME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_INIT_EARLIEST_TIME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_LATEST_TIME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SAVED_SEARCH_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SEARCH_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_STREAMING_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_POLL_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_BACKOFF_MULTIPLIER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_GREEDY_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_INITIAL_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_REPEAT_COUNT_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_RUN_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SCHEDULER_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_START_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_TIME_UNIT_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_FIXED_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_SSL_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_ENDPOINT_USE_SUN_HTTPS_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPLUNK_COMPONENT_SPLUNK_CONFIGURATION_FACTORY_DOC);
        return conf;
    }
}