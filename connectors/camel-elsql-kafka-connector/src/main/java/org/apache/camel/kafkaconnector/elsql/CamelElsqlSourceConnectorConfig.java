/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.elsql;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelElsqlSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_CONF = "camel.source.path.elsqlName";
    private static final String CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_DOC = "The name of the elsql to use (is NAMED in the elsql file)";
    private static final String CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_CONF = "camel.source.path.resourceUri";
    private static final String CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_DOC = "The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma. The resources are loaded on the classpath by default, you can prefix with file: to load from file system. Notice you can set this option on the component and then you do not have to configure this on the endpoint.";
    private static final String CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_CONF = "camel.source.endpoint.allowNamedParameters";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_DOC = "Whether to allow using named parameters in the queries.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_DEFAULT = true;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_CONF = "camel.source.endpoint.databaseVendor";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_DOC = "To use a vendor specific com.opengamma.elsql.ElSqlConfig One of: [Default] [Postgres] [HSql] [MySql] [Oracle] [SqlServer2008] [Veritca]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_CONF = "camel.source.endpoint.dataSource";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_DOC = "Sets the DataSource to use to communicate with the database.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_CONF = "camel.source.endpoint.dataSourceRef";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_DOC = "Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_CONF = "camel.source.endpoint.outputClass";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_DOC = "Specify the full package and class name to use as conversion when outputType=SelectOne.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_CONF = "camel.source.endpoint.outputHeader";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_DOC = "Store the query result in a header instead of the message body. By default, outputHeader == null and the query result is stored in the message body, any existing content in the message body is discarded. If outputHeader is set, the value is used as the name of the header to store the query result and the original message body is preserved.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_CONF = "camel.source.endpoint.outputType";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_DOC = "Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way: a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long object. b) If the query has more than one column, then it will return a Map of that result. c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with. d) If the query resulted in more than one rows, it throws an non-unique result exception. StreamList streams the result of the query using an Iterator. This can be used with the Splitter EIP in streaming mode to process the ResultSet in streaming fashion. One of: [SelectOne] [SelectList] [StreamList]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_DEFAULT = "SelectList";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_CONF = "camel.source.endpoint.separator";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_DOC = "The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders. Notice if you use named parameters, then a Map type is used instead. The default value is comma";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_DEFAULT = ",";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_CONF = "camel.source.endpoint.breakBatchOnConsumeFail";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_DOC = "Sets whether to break batch if onConsume failed.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_CONF = "camel.source.endpoint.expectedUpdateCount";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_DOC = "Sets an expected update count to validate when using onConsume.";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_DEFAULT = -1;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF = "camel.source.endpoint.maxMessagesPerPoll";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC = "Sets the maximum number of messages to poll";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_CONF = "camel.source.endpoint.onConsume";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_DOC = "After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_CONF = "camel.source.endpoint.onConsumeBatchComplete";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_DOC = "After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_CONF = "camel.source.endpoint.onConsumeFailed";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_DOC = "After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_CONF = "camel.source.endpoint.routeEmptyResultSet";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_DOC = "Sets whether empty resultset should be allowed to be sent to the next hop. Defaults to false. So the empty resultset will be filtered out.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF = "camel.source.endpoint.sendEmptyMessageWhenIdle";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC = "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_CONF = "camel.source.endpoint.transacted";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_DOC = "Enables or disables transaction. If enabled then if processing an exchange failed then the consumer breaks out processing any further exchanges to cause a rollback eager.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_CONF = "camel.source.endpoint.useIterator";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_DOC = "Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_DEFAULT = true;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_CONF = "camel.source.endpoint.pollStrategy";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_DOC = "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_CONF = "camel.source.endpoint.processingStrategy";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_DOC = "Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows/batch.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_CONF = "camel.source.endpoint.alwaysPopulateStatement";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_DOC = "If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked, also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there is 1 or more expected parameters to be set; for example this avoids reading the message body/headers for SQL queries with no parameters.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_CONF = "camel.source.endpoint.elSqlConfig";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_DOC = "To use a specific configured ElSqlConfig. It may be better to use the databaseVendor option instead.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_CONF = "camel.source.endpoint.parametersCount";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_DOC = "If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API. This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_CONF = "camel.source.endpoint.placeholder";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_DOC = "Specifies a character that will be replaced to in SQL query. Notice, that it is simple String.replaceAll() operation and no SQL parsing is involved (quoted strings will also change).";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_DEFAULT = "#";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_CONF = "camel.source.endpoint.prepareStatementStrategy";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_DOC = "Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_CONF = "camel.source.endpoint.templateOptions";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_DOC = "Configures the Spring JdbcTemplate with the key/values from the Map";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_CONF = "camel.source.endpoint.usePlaceholder";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_DOC = "Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_DEFAULT = true;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF = "camel.source.endpoint.backoffErrorThreshold";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC = "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF = "camel.source.endpoint.backoffIdleThreshold";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC = "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_CONF = "camel.source.endpoint.backoffMultiplier";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_DOC = "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.";
    private static final Integer CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_CONF = "camel.source.endpoint.delay";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_DOC = "Milliseconds before the next poll.";
    private static final Long CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_DEFAULT = 500L;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_CONF = "camel.source.endpoint.greedy";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_DOC = "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_CONF = "camel.source.endpoint.initialDelay";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_DOC = "Milliseconds before the first poll starts.";
    private static final Long CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_CONF = "camel.source.endpoint.repeatCount";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_DOC = "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.";
    private static final Long CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_CONF = "camel.source.endpoint.runLoggingLevel";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_DOC = "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT = "TRACE";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.scheduledExecutorService";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC = "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_CONF = "camel.source.endpoint.scheduler";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_DOC = "To use a cron scheduler from either camel-spring or camel-quartz component One of: [none] [spring] [quartz]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_DEFAULT = "none";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_CONF = "camel.source.endpoint.schedulerProperties";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_DOC = "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_CONF = "camel.source.endpoint.startScheduler";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_DOC = "Whether the scheduler should be auto started.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_DEFAULT = true;
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_CONF = "camel.source.endpoint.timeUnit";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_DOC = "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_DEFAULT = "MILLISECONDS";
    public static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_CONF = "camel.source.endpoint.useFixedDelay";
    private static final String CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_DOC = "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.";
    private static final Boolean CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_CONF = "camel.component.elsql.databaseVendor";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_DOC = "To use a vendor specific com.opengamma.elsql.ElSqlConfig One of: [Default] [Postgres] [HSql] [MySql] [Oracle] [SqlServer2008] [Veritca]";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_CONF = "camel.component.elsql.dataSource";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_DOC = "Sets the DataSource to use to communicate with the database.";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_CONF = "camel.component.elsql.resourceUri";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_DOC = "The resource file which contains the elsql SQL statements to use. You can specify multiple resources separated by comma. The resources are loaded on the classpath by default, you can prefix with file: to load from file system. Notice you can set this option on the component and then you do not have to configure this on the endpoint.";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_DEFAULT = null;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.elsql.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.elsql.basicPropertyBinding";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_CONF = "camel.component.elsql.elSqlConfig";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_DOC = "To use a specific configured ElSqlConfig. It may be better to use the databaseVendor option instead.";
    private static final String CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_DEFAULT = null;

    public CamelElsqlSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelElsqlSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_ELSQL_PATH_ELSQL_NAME_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_PATH_RESOURCE_URI_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ALLOW_NAMED_PARAMETERS_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_DATABASE_VENDOR_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SOURCE_ELSQL_ENDPOINT_DATA_SOURCE_REF_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_CLASS_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_HEADER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_OUTPUT_TYPE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SEPARATOR_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BREAK_BATCH_ON_CONSUME_FAIL_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_EXPECTED_UPDATE_COUNT_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_BATCH_COMPLETE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ON_CONSUME_FAILED_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ROUTE_EMPTY_RESULT_SET_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_TRANSACTED_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_ITERATOR_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_POLL_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_PROCESSING_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_ALWAYS_POPULATE_STATEMENT_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_EL_SQL_CONFIG_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_PARAMETERS_COUNT_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_PLACEHOLDER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_PREPARE_STATEMENT_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_TEMPLATE_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_PLACEHOLDER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_BACKOFF_MULTIPLIER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_DELAY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_GREEDY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_INITIAL_DELAY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_REPEAT_COUNT_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_RUN_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_SCHEDULER_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_START_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_TIME_UNIT_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_ENDPOINT_USE_FIXED_DELAY_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_DATABASE_VENDOR_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_DATA_SOURCE_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_RESOURCE_URI_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_ELSQL_COMPONENT_EL_SQL_CONFIG_DOC);
        return conf;
    }
}