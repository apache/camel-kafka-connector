/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.cmis;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelCmisSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_CMIS_PATH_CMS_URL_CONF = "camel.sink.path.cmsUrl";
    public static final String CAMEL_SINK_CMIS_PATH_CMS_URL_DOC = "URL to the cmis repository";
    public static final String CAMEL_SINK_CMIS_PATH_CMS_URL_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_CONF = "camel.sink.endpoint.pageSize";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_DOC = "Number of nodes to retrieve per page";
    public static final Integer CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_DEFAULT = 100;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_CONF = "camel.sink.endpoint.readContent";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_DOC = "If set to true, the content of document node will be retrieved in addition to the properties";
    public static final Boolean CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_DEFAULT = false;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_CONF = "camel.sink.endpoint.readCount";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_DOC = "Max number of nodes to read";
    public static final Integer CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_CONF = "camel.sink.endpoint.repositoryId";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_DOC = "The Id of the repository to use. If not specified the first available repository is used";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_CONF = "camel.sink.endpoint.queryMode";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_DOC = "If true, will execute the cmis query from the message body and return result, otherwise will create a node in the cmis repository";
    public static final Boolean CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_DEFAULT = false;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_CONF = "camel.sink.endpoint.sessionFacadeFactory";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_DOC = "To use a custom CMISSessionFacadeFactory to create the CMISSessionFacade instances";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_CONF = "camel.sink.endpoint.password";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_DOC = "Password for the cmis repository";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_ENDPOINT_USERNAME_CONF = "camel.sink.endpoint.username";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_USERNAME_DOC = "Username for the cmis repository";
    public static final String CAMEL_SINK_CMIS_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.cmis.lazyStartProducer";
    public static final String CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.cmis.autowiredEnabled";
    public static final String CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_CONF = "camel.component.cmis.sessionFacadeFactory";
    public static final String CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_DOC = "To use a custom CMISSessionFacadeFactory to create the CMISSessionFacade instances";
    public static final String CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_DEFAULT = null;

    public CamelCmisSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelCmisSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_CMIS_PATH_CMS_URL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMIS_PATH_CMS_URL_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_CMIS_PATH_CMS_URL_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_PAGE_SIZE_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_READ_CONTENT_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_CONF, ConfigDef.Type.INT, CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_READ_COUNT_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_REPOSITORY_ID_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_QUERY_MODE_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_SESSION_FACADE_FACTORY_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.PASSWORD, CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SINK_CMIS_ENDPOINT_USERNAME_CONF, ConfigDef.Type.PASSWORD, CAMEL_SINK_CMIS_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_CMIS_COMPONENT_SESSION_FACADE_FACTORY_DOC);
        return conf;
    }
}