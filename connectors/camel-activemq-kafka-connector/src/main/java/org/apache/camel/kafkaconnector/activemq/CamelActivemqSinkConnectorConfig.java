/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.activemq;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelActivemqSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_CONF = "camel.sink.path.destinationType";
    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_DOC = "The kind of destination to use One of: [queue] [topic] [temp-queue] [temp-topic]";
    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_DEFAULT = "queue";
    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_CONF = "camel.sink.path.destinationName";
    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_DOC = "Name of the queue or topic to use as destination";
    public static final String CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_CONF = "camel.sink.endpoint.clientId";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_DOC = "Sets the JMS client ID to use. Note that this value, if specified, must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_CONF = "camel.sink.endpoint.connectionFactory";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_DOC = "The connection factory to be use. A connection factory must be configured either on the component or endpoint.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_CONF = "camel.sink.endpoint.disableReplyTo";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_DOC = "Specifies whether Camel ignores the JMSReplyTo header in messages. If true, Camel does not send a reply back to the destination specified in the JMSReplyTo header. You can use this option if you want Camel to consume from a route and you do not want Camel to automatically send back a reply message because another component in your code handles the reply message. You can also use this option if you want to use Camel as a proxy between different message brokers and you want to route message from one system to another.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_CONF = "camel.sink.endpoint.durableSubscriptionName";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_DOC = "The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_CONF = "camel.sink.endpoint.jmsMessageType";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_DOC = "Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages. Possible values are: Bytes, Map, Object, Stream, Text. By default, Camel would determine which JMS message type to use from the In body type. This option allows you to specify it. One of: [Bytes] [Map] [Object] [Stream] [Text]";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONF = "camel.sink.endpoint.replyTo";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DOC = "Provides an explicit ReplyTo destination (overrides any incoming value of Message.getJMSReplyTo() in consumer).";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_CONF = "camel.sink.endpoint.testConnectionOnStartup";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DOC = "Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_CONF = "camel.sink.endpoint.deliveryDelay";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_DOC = "Sets delivery delay to use for send calls for JMS. This option requires JMS 2.0 compliant broker.";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_DEFAULT = -1L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_CONF = "camel.sink.endpoint.deliveryMode";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_DOC = "Specifies the delivery mode to be used. Possible values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2. One of: [1] [2]";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_CONF = "camel.sink.endpoint.deliveryPersistent";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_DOC = "Specifies whether persistent delivery is used by default.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_CONF = "camel.sink.endpoint.explicitQosEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_DOC = "Set if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode, priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option, which operates at message granularity, reading QoS properties exclusively from the Camel In message headers.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_DEFAULT = "false";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601CONF = "camel.sink.endpoint.formatDateHeadersToIso8601";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601DOC = "Sets whether JMS date properties should be formatted according to the ISO 8601 standard.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_CONF = "camel.sink.endpoint.preserveMessageQos";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_DOC = "Set to true, if you want to send message using the QoS settings specified on the message, instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority, JMSDeliveryMode, and JMSExpiration. You can provide all or only some of them. If not provided, Camel will fall back to use the values from the endpoint instead. So, when using this option, the headers override the values from the endpoint. The explicitQosEnabled option, by contrast, will only use options set on the endpoint, and not values from the message header.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_CONF = "camel.sink.endpoint.priority";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_DOC = "Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect. One of: [1] [2] [3] [4] [5] [6] [7] [8] [9]";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_DEFAULT = 4;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_CONF = "camel.sink.endpoint.replyToConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_DOC = "Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_CONF = "camel.sink.endpoint.replyToMaxConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DOC = "Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_CONF = "camel.sink.endpoint.replyToOnTimeoutMaxConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DOC = "Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_CONF = "camel.sink.endpoint.replyToOverride";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_DOC = "Provides an explicit ReplyTo destination in the JMS message, which overrides the setting of replyTo. It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_CONF = "camel.sink.endpoint.replyToType";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_DOC = "Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary, Shared, or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured, then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details, and especially the notes about the implications if running in a clustered environment, and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive. One of: [Temporary] [Shared] [Exclusive]";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CONF = "camel.sink.endpoint.requestTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_DOC = "The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value, and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option.";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_DEFAULT = 20000L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_CONF = "camel.sink.endpoint.timeToLive";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_DOC = "When sending messages, specifies the time-to-live of the message (in milliseconds).";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_DEFAULT = -1L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_CONF = "camel.sink.endpoint.allowAdditionalHeaders";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_DOC = "This option is used to allow additional headers which may have values that are invalid according to JMS specification. For example some message systems such as WMQ do this with header names using prefix JMS_IBM_MQMD_ containing values with byte array or other invalid types. You can specify multiple header names separated by comma, and use as suffix for wildcard matching.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_CONF = "camel.sink.endpoint.allowNullBody";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_DOC = "Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_CONF = "camel.sink.endpoint.alwaysCopyMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_DOC = "If true, Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations, such as when a replyToDestinationSelectorName is set (incidentally, Camel will set the alwaysCopyMessage option to true, if a replyToDestinationSelectorName is set)";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_CONF = "camel.sink.endpoint.correlationProperty";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_DOC = "When using InOut exchange pattern use this JMS property instead of JMSCorrelationID JMS property to correlate messages. If set messages will be correlated solely on the value of this property JMSCorrelationID property will be ignored and not set by Camel.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_CONF = "camel.sink.endpoint.disableTimeToLive";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_DOC = "Use this option to force disabling time to live. For example when you do request/reply over JMS, then Camel will by default use the requestTimeout value as time to live on the message being sent. The problem is that the sender and receiver systems have to have their clocks synchronized, so they are in sync. This is not always so easy to archive. So you can use disableTimeToLive=true to not set a time to live value on the sent message. Then the message will not expire on the receiver system. See below in section About time to live for more details.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_CONF = "camel.sink.endpoint.forceSendOriginalMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_DOC = "When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDCONF = "camel.sink.endpoint.includeSentJMSMessageID";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDDOC = "Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDDEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_CONF = "camel.sink.endpoint.replyToCacheLevelName";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_DOC = "Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed, and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION. One of: [CACHE_AUTO] [CACHE_CONNECTION] [CACHE_CONSUMER] [CACHE_NONE] [CACHE_SESSION]";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_CONF = "camel.sink.endpoint.replyToDestinationSelectorName";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_DOC = "Sets the JMS Selector using the fixed name to be used so you can filter out your own replies from the others when using a shared queue (that is, if you are not using a temporary reply queue).";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_CONF = "camel.sink.endpoint.streamMessageTypeEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_DOC = "Sets whether StreamMessage type is enabled or not. Message payloads of streaming kind such as files, InputStream, etc will either by sent as BytesMessage or StreamMessage. This option controls which kind will be used. By default BytesMessage is used which enforces the entire message payload to be read into memory. By enabling this option the message payload is read into memory in chunks and each chunk is then written to the StreamMessage until no more data.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_CONF = "camel.sink.endpoint.allowSerializedHeaders";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DOC = "Controls whether or not to include serialized headers. Applies only when transferExchange is true. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_CONF = "camel.sink.endpoint.artemisStreamingEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_DOC = "Whether optimizing for Apache Artemis streaming mode.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_CONF = "camel.sink.endpoint.asyncStartListener";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_DOC = "Whether to startup the JmsConsumer message listener asynchronously, when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true, you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used, then beware that if the connection could not be established, then an exception is logged at WARN level, and the consumer will not be able to receive messages; You can then restart the route to retry.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_CONF = "camel.sink.endpoint.asyncStopListener";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_DOC = "Whether to stop the JmsConsumer message listener asynchronously, when stopping a route.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_CONF = "camel.sink.endpoint.destinationResolver";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_DOC = "A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example, to lookup the real destination in a JNDI registry).";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_CONF = "camel.sink.endpoint.errorHandler";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_DOC = "Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level, if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure, than having to code a custom errorHandler.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_CONF = "camel.sink.endpoint.exceptionListener";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_DOC = "Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_CONF = "camel.sink.endpoint.headerFilterStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_DOC = "To use a custom HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_CONF = "camel.sink.endpoint.idleConsumerLimit";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_DOC = "Specify the limit for the number of consumers that are allowed to be idle at any given time.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_CONF = "camel.sink.endpoint.idleTaskExecutionLimit";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_DOC = "Specifies the limit for idle executions of a receive task, not having received any message within its execution. If this limit is reached, the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_CONF = "camel.sink.endpoint.includeAllJMSXProperties";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_DOC = "Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_CONF = "camel.sink.endpoint.jmsKeyFormatStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_DOC = "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation. One of: [default] [passthrough]";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_CONF = "camel.sink.endpoint.mapJmsMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_DOC = "Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_CONF = "camel.sink.endpoint.maxMessagesPerTask";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_DOC = "The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max), then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_DEFAULT = -1;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_CONF = "camel.sink.endpoint.messageConverter";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_DOC = "To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_CONF = "camel.sink.endpoint.messageCreatedStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_DOC = "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_CONF = "camel.sink.endpoint.messageIdEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_DOC = "When sending, specifies whether message IDs should be added. This is just an hint to the JMS broker. If the JMS provider accepts this hint, these messages must have the message ID set to null; if the provider ignores the hint, the message ID must be set to its normal unique value.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_CONF = "camel.sink.endpoint.messageListenerContainerFactory";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_DOC = "Registry ID of the MessageListenerContainerFactory used to determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages. Setting this will automatically set consumerType to Custom.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_CONF = "camel.sink.endpoint.messageTimestampEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_DOC = "Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS broker. If the JMS provider accepts this hint, these messages must have the timestamp set to zero; if the provider ignores the hint the timestamp must be set to its normal value.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_CONF = "camel.sink.endpoint.pubSubNoLocal";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_DOC = "Specifies whether to inhibit the delivery of messages published by its own connection.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_CONF = "camel.sink.endpoint.receiveTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_DOC = "The timeout for receiving messages (in milliseconds).";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_DEFAULT = 1000L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_CONF = "camel.sink.endpoint.recoveryInterval";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_DOC = "Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds. The default is 5000 ms, that is, 5 seconds.";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_DEFAULT = 5000L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_CONF = "camel.sink.endpoint.requestTimeoutCheckerInterval";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DOC = "Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs, then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout.";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DEFAULT = 1000L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_CONF = "camel.sink.endpoint.transferException";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_DOC = "If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side, then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel, the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example, using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled, this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer. Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, which forces a strong coupling between the producers and consumer!";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_CONF = "camel.sink.endpoint.transferExchange";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_DOC = "You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers, exchange properties, exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side, so Camel knows the payloads is an Exchange and not a regular payload. Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, which forces a strong coupling between the producers and consumer having to use compatible Camel versions!";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDCONF = "camel.sink.endpoint.useMessageIDAsCorrelationID";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDDOC = "Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDDEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_CONF = "camel.sink.endpoint.waitForProvisionCorrelationToBeUpdatedCounter";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DOC = "Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DEFAULT = 50;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_CONF = "camel.sink.endpoint.waitForProvisionCorrelationToBeUpdatedThreadSleepingTime";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DOC = "Interval in millis to sleep each time while waiting for provisional correlation id to be updated.";
    public static final Long CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DEFAULT = 100L;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_CONF = "camel.sink.endpoint.password";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_DOC = "Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_CONF = "camel.sink.endpoint.username";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_DOC = "Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_CONF = "camel.sink.endpoint.transacted";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_DOC = "Specifies whether to use transacted mode";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_CONF = "camel.sink.endpoint.transactedInOut";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_DOC = "Specifies whether InOut operations (request reply) default to using transacted mode If this flag is set to true, then Spring JmsTemplate will have sessionTransacted set to true, and the acknowledgeMode as transacted on the JmsTemplate used for InOut operations. Note from Spring JMS: that within a JTA transaction, the parameters passed to createQueue, createTopic methods are not taken into account. Depending on the Java EE transaction context, the container makes its own decisions on these values. Analogously, these parameters are not taken into account within a locally managed transaction either, since Spring JMS operates on an existing JMS Session in this case. Setting this flag to true will use a short local JMS transaction when running outside of a managed transaction, and a synchronized local JMS transaction in case of a managed transaction (other than an XA transaction) being present. This has the effect of a local JMS transaction being managed alongside the main transaction (which might be a native JDBC transaction), with the JMS transaction committing right after the main transaction.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_CONF = "camel.sink.endpoint.lazyCreateTransactionManager";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_DOC = "If true, Camel will create a JmsTransactionManager, if there is no transactionManager injected when option transacted=true.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_CONF = "camel.sink.endpoint.transactionManager";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_DOC = "The Spring transaction manager to use.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_CONF = "camel.sink.endpoint.transactionName";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_DOC = "The name of the transaction to use.";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_CONF = "camel.sink.endpoint.transactionTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_DOC = "The timeout value of the transaction (in seconds), if using transacted mode.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_DEFAULT = -1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLCONF = "camel.component.activemq.brokerURL";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLDOC = "Sets the broker URL to use to connect to ActiveMQ. If none configured then localhost:61616 is used by default (however can be overridden by configuration from environment variables)";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLDEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_CONF = "camel.component.activemq.clientId";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_DOC = "Sets the JMS client ID to use. Note that this value, if specified, must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_CONF = "camel.component.activemq.connectionFactory";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_DOC = "The connection factory to be use. A connection factory must be configured either on the component or endpoint.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_CONF = "camel.component.activemq.disableReplyTo";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_DOC = "Specifies whether Camel ignores the JMSReplyTo header in messages. If true, Camel does not send a reply back to the destination specified in the JMSReplyTo header. You can use this option if you want Camel to consume from a route and you do not want Camel to automatically send back a reply message because another component in your code handles the reply message. You can also use this option if you want to use Camel as a proxy between different message brokers and you want to route message from one system to another.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_CONF = "camel.component.activemq.durableSubscriptionName";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_DOC = "The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_CONF = "camel.component.activemq.jmsMessageType";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_DOC = "Allows you to force the use of a specific javax.jms.Message implementation for sending JMS messages. Possible values are: Bytes, Map, Object, Stream, Text. By default, Camel would determine which JMS message type to use from the In body type. This option allows you to specify it. One of: [Bytes] [Map] [Object] [Stream] [Text]";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONF = "camel.component.activemq.replyTo";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DOC = "Provides an explicit ReplyTo destination (overrides any incoming value of Message.getJMSReplyTo() in consumer).";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_CONF = "camel.component.activemq.testConnectionOnStartup";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_DOC = "Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_CONF = "camel.component.activemq.usePooledConnection";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_DOC = "Enables or disables whether a PooledConnectionFactory will be used so that when messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather than the default with the Spring JmsTemplate which will create a new connection, session, producer for each message then close them all down again. The default value is true.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_CONF = "camel.component.activemq.useSingleConnection";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_DOC = "Enables or disables whether a Spring SingleConnectionFactory will be used so that when messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather than the default with the Spring JmsTemplate which will create a new connection, session, producer for each message then close them all down again. The default value is false and a pooled connection is used by default.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_CONF = "camel.component.activemq.deliveryDelay";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_DOC = "Sets delivery delay to use for send calls for JMS. This option requires JMS 2.0 compliant broker.";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_DEFAULT = -1L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_CONF = "camel.component.activemq.deliveryMode";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_DOC = "Specifies the delivery mode to be used. Possible values are those defined by javax.jms.DeliveryMode. NON_PERSISTENT = 1 and PERSISTENT = 2. One of: [1] [2]";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_CONF = "camel.component.activemq.deliveryPersistent";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_DOC = "Specifies whether persistent delivery is used by default.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_CONF = "camel.component.activemq.explicitQosEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_DOC = "Set if the deliveryMode, priority or timeToLive qualities of service should be used when sending messages. This option is based on Spring's JmsTemplate. The deliveryMode, priority and timeToLive options are applied to the current endpoint. This contrasts with the preserveMessageQos option, which operates at message granularity, reading QoS properties exclusively from the Camel In message headers.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_DEFAULT = "false";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601CONF = "camel.component.activemq.formatDateHeadersToIso8601";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601DOC = "Sets whether JMS date properties should be formatted according to the ISO 8601 standard.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.activemq.lazyStartProducer";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_CONF = "camel.component.activemq.preserveMessageQos";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_DOC = "Set to true, if you want to send message using the QoS settings specified on the message, instead of the QoS settings on the JMS endpoint. The following three headers are considered JMSPriority, JMSDeliveryMode, and JMSExpiration. You can provide all or only some of them. If not provided, Camel will fall back to use the values from the endpoint instead. So, when using this option, the headers override the values from the endpoint. The explicitQosEnabled option, by contrast, will only use options set on the endpoint, and not values from the message header.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_CONF = "camel.component.activemq.priority";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_DOC = "Values greater than 1 specify the message priority when sending (where 0 is the lowest priority and 9 is the highest). The explicitQosEnabled option must also be enabled in order for this option to have any effect. One of: [1] [2] [3] [4] [5] [6] [7] [8] [9]";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_DEFAULT = 4;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_CONF = "camel.component.activemq.replyToConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_DOC = "Specifies the default number of concurrent consumers when doing request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_CONF = "camel.component.activemq.replyToMaxConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DOC = "Specifies the maximum number of concurrent consumers when using request/reply over JMS. See also the maxMessagesPerTask option to control dynamic scaling up/down of threads.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_CONF = "camel.component.activemq.replyToOnTimeoutMaxConcurrentConsumers";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DOC = "Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request/reply over JMS.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_CONF = "camel.component.activemq.replyToOverride";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_DOC = "Provides an explicit ReplyTo destination in the JMS message, which overrides the setting of replyTo. It is useful if you want to forward the message to a remote Queue and receive the reply message from the ReplyTo destination.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_CONF = "camel.component.activemq.replyToType";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_DOC = "Allows for explicitly specifying which kind of strategy to use for replyTo queues when doing request/reply over JMS. Possible values are: Temporary, Shared, or Exclusive. By default Camel will use temporary queues. However if replyTo has been configured, then Shared is used by default. This option allows you to use exclusive queues instead of shared ones. See Camel JMS documentation for more details, and especially the notes about the implications if running in a clustered environment, and the fact that Shared reply queues has lower performance than its alternatives Temporary and Exclusive. One of: [Temporary] [Shared] [Exclusive]";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CONF = "camel.component.activemq.requestTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_DOC = "The timeout for waiting for a reply when using the InOut Exchange Pattern (in milliseconds). The default is 20 seconds. You can include the header CamelJmsRequestTimeout to override this endpoint configured timeout value, and thus have per message individual timeout values. See also the requestTimeoutCheckerInterval option.";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_DEFAULT = 20000L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_CONF = "camel.component.activemq.timeToLive";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_DOC = "When sending messages, specifies the time-to-live of the message (in milliseconds).";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_DEFAULT = -1L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_CONF = "camel.component.activemq.allowAdditionalHeaders";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_DOC = "This option is used to allow additional headers which may have values that are invalid according to JMS specification. For example some message systems such as WMQ do this with header names using prefix JMS_IBM_MQMD_ containing values with byte array or other invalid types. You can specify multiple header names separated by comma, and use as suffix for wildcard matching.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_CONF = "camel.component.activemq.allowNullBody";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_DOC = "Whether to allow sending messages with no body. If this option is false and the message body is null, then an JMSException is thrown.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_CONF = "camel.component.activemq.alwaysCopyMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_DOC = "If true, Camel will always make a JMS message copy of the message when it is passed to the producer for sending. Copying the message is needed in some situations, such as when a replyToDestinationSelectorName is set (incidentally, Camel will set the alwaysCopyMessage option to true, if a replyToDestinationSelectorName is set)";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_CONF = "camel.component.activemq.correlationProperty";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_DOC = "When using InOut exchange pattern use this JMS property instead of JMSCorrelationID JMS property to correlate messages. If set messages will be correlated solely on the value of this property JMSCorrelationID property will be ignored and not set by Camel.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_CONF = "camel.component.activemq.disableTimeToLive";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_DOC = "Use this option to force disabling time to live. For example when you do request/reply over JMS, then Camel will by default use the requestTimeout value as time to live on the message being sent. The problem is that the sender and receiver systems have to have their clocks synchronized, so they are in sync. This is not always so easy to archive. So you can use disableTimeToLive=true to not set a time to live value on the sent message. Then the message will not expire on the receiver system. See below in section About time to live for more details.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_CONF = "camel.component.activemq.forceSendOriginalMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_DOC = "When using mapJmsMessage=false Camel will create a new JMS message to send to a new JMS destination if you touch the headers (get or set) during the route. Set this option to true to force Camel to send the original JMS message that was received.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDCONF = "camel.component.activemq.includeSentJMSMessageID";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDDOC = "Only applicable when sending to JMS destination using InOnly (eg fire and forget). Enabling this option will enrich the Camel Exchange with the actual JMSMessageID that was used by the JMS client when the message was sent to the JMS destination.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDDEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_CONF = "camel.component.activemq.replyToCacheLevelName";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_DOC = "Sets the cache level by name for the reply consumer when doing request/reply over JMS. This option only applies when using fixed reply queues (not temporary). Camel will by default use: CACHE_CONSUMER for exclusive or shared w/ replyToSelectorName. And CACHE_SESSION for shared without replyToSelectorName. Some JMS brokers such as IBM WebSphere may require to set the replyToCacheLevelName=CACHE_NONE to work. Note: If using temporary queues then CACHE_NONE is not allowed, and you must use a higher value such as CACHE_CONSUMER or CACHE_SESSION. One of: [CACHE_AUTO] [CACHE_CONNECTION] [CACHE_CONSUMER] [CACHE_NONE] [CACHE_SESSION]";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_CONF = "camel.component.activemq.replyToDestinationSelectorName";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_DOC = "Sets the JMS Selector using the fixed name to be used so you can filter out your own replies from the others when using a shared queue (that is, if you are not using a temporary reply queue).";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_CONF = "camel.component.activemq.streamMessageTypeEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_DOC = "Sets whether StreamMessage type is enabled or not. Message payloads of streaming kind such as files, InputStream, etc will either by sent as BytesMessage or StreamMessage. This option controls which kind will be used. By default BytesMessage is used which enforces the entire message payload to be read into memory. By enabling this option the message payload is read into memory in chunks and each chunk is then written to the StreamMessage until no more data.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_CONF = "camel.component.activemq.allowAutoWiredConnectionFactory";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_DOC = "Whether to auto-discover ConnectionFactory from the registry, if no connection factory has been configured. If only one instance of ConnectionFactory is found then it will be used. This is enabled by default.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_CONF = "camel.component.activemq.allowAutoWiredDestinationResolver";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_DOC = "Whether to auto-discover DestinationResolver from the registry, if no destination resolver has been configured. If only one instance of DestinationResolver is found then it will be used. This is enabled by default.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_CONF = "camel.component.activemq.allowSerializedHeaders";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_DOC = "Controls whether or not to include serialized headers. Applies only when transferExchange is true. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_CONF = "camel.component.activemq.artemisStreamingEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_DOC = "Whether optimizing for Apache Artemis streaming mode.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_CONF = "camel.component.activemq.asyncStartListener";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_DOC = "Whether to startup the JmsConsumer message listener asynchronously, when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying and/or failover. This will cause Camel to block while starting routes. By setting this option to true, you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used, then beware that if the connection could not be established, then an exception is logged at WARN level, and the consumer will not be able to receive messages; You can then restart the route to retry.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_CONF = "camel.component.activemq.asyncStopListener";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_DOC = "Whether to stop the JmsConsumer message listener asynchronously, when stopping a route.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.activemq.basicPropertyBinding";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_CONF = "camel.component.activemq.configuration";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_DOC = "To use a shared JMS configuration";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_CONF = "camel.component.activemq.destinationResolver";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_DOC = "A pluggable org.springframework.jms.support.destination.DestinationResolver that allows you to use your own resolver (for example, to lookup the real destination in a JNDI registry).";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_CONF = "camel.component.activemq.errorHandler";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_DOC = "Specifies a org.springframework.util.ErrorHandler to be invoked in case of any uncaught exceptions thrown while processing a Message. By default these exceptions will be logged at the WARN level, if no errorHandler has been configured. You can configure logging level and whether stack traces should be logged using errorHandlerLoggingLevel and errorHandlerLogStackTrace options. This makes it much easier to configure, than having to code a custom errorHandler.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_CONF = "camel.component.activemq.exceptionListener";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_DOC = "Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_CONF = "camel.component.activemq.idleConsumerLimit";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_DOC = "Specify the limit for the number of consumers that are allowed to be idle at any given time.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_CONF = "camel.component.activemq.idleTaskExecutionLimit";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_DOC = "Specifies the limit for idle executions of a receive task, not having received any message within its execution. If this limit is reached, the task will shut down and leave receiving to other executing tasks (in the case of dynamic scheduling; see the maxConcurrentConsumers setting). There is additional doc available from Spring.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_DEFAULT = 1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_CONF = "camel.component.activemq.includeAllJMSXProperties";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_DOC = "Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_CONF = "camel.component.activemq.jmsKeyFormatStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_DOC = "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation. One of: [default] [passthrough]";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_CONF = "camel.component.activemq.mapJmsMessage";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_DOC = "Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_CONF = "camel.component.activemq.maxMessagesPerTask";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_DOC = "The number of messages per task. -1 is unlimited. If you use a range for concurrent consumers (eg min max), then this option can be used to set a value to eg 100 to control how fast the consumers will shrink when less work is required.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_DEFAULT = -1;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_CONF = "camel.component.activemq.messageConverter";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_DOC = "To use a custom Spring org.springframework.jms.support.converter.MessageConverter so you can be in control how to map to/from a javax.jms.Message.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_CONF = "camel.component.activemq.messageCreatedStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_DOC = "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_CONF = "camel.component.activemq.messageIdEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_DOC = "When sending, specifies whether message IDs should be added. This is just an hint to the JMS broker. If the JMS provider accepts this hint, these messages must have the message ID set to null; if the provider ignores the hint, the message ID must be set to its normal unique value.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_CONF = "camel.component.activemq.messageListenerContainerFactory";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_DOC = "Registry ID of the MessageListenerContainerFactory used to determine what org.springframework.jms.listener.AbstractMessageListenerContainer to use to consume messages. Setting this will automatically set consumerType to Custom.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_CONF = "camel.component.activemq.messageTimestampEnabled";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_DOC = "Specifies whether timestamps should be enabled by default on sending messages. This is just an hint to the JMS broker. If the JMS provider accepts this hint, these messages must have the timestamp set to zero; if the provider ignores the hint the timestamp must be set to its normal value.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_CONF = "camel.component.activemq.pubSubNoLocal";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_DOC = "Specifies whether to inhibit the delivery of messages published by its own connection.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_CONF = "camel.component.activemq.queueBrowseStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_DOC = "To use a custom QueueBrowseStrategy when browsing queues";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_CONF = "camel.component.activemq.receiveTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_DOC = "The timeout for receiving messages (in milliseconds).";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_DEFAULT = 1000L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_CONF = "camel.component.activemq.recoveryInterval";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_DOC = "Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds. The default is 5000 ms, that is, 5 seconds.";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_DEFAULT = 5000L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_CONF = "camel.component.activemq.requestTimeoutCheckerInterval";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DOC = "Configures how often Camel should check for timed out Exchanges when doing request/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs, then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout.";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DEFAULT = 1000L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_CONF = "camel.component.activemq.transferException";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_DOC = "If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side, then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel, the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example, using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled, this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer. Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, which forces a strong coupling between the producers and consumer!";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_CONF = "camel.component.activemq.transferExchange";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_DOC = "You can transfer the exchange over the wire instead of just the body and headers. The following fields are transferred: In body, Out body, Fault body, In headers, Out headers, Fault headers, exchange properties, exchange exception. This requires that the objects are serializable. Camel will exclude any non-serializable objects and log it at WARN level. You must enable this option on both the producer and consumer side, so Camel knows the payloads is an Exchange and not a regular payload. Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, which forces a strong coupling between the producers and consumer having to use compatible Camel versions!";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_CONF = "camel.component.activemq.trustAllPackages";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_DOC = "Define if all Java packages are trusted or not (for Java object JMS message types). Notice its not recommended practice to send Java serialized objects over network. Setting this to true can expose security risks, so use this with care.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDCONF = "camel.component.activemq.useMessageIDAsCorrelationID";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDDOC = "Specifies whether JMSMessageID should always be used as JMSCorrelationID for InOut messages.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDDEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_CONF = "camel.component.activemq.waitForProvisionCorrelationToBeUpdatedCounter";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DOC = "Number of times to wait for provisional correlation id to be updated to the actual correlation id when doing request/reply over JMS and when the option useMessageIDAsCorrelationID is enabled.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DEFAULT = 50;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_CONF = "camel.component.activemq.waitForProvisionCorrelationToBeUpdatedThreadSleepingTime";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DOC = "Interval in millis to sleep each time while waiting for provisional correlation id to be updated.";
    public static final Long CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DEFAULT = 100L;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_CONF = "camel.component.activemq.headerFilterStrategy";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_DOC = "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_CONF = "camel.component.activemq.password";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_DOC = "Password to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_CONF = "camel.component.activemq.username";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_DOC = "Username to use with the ConnectionFactory. You can also configure username/password directly on the ConnectionFactory.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_CONF = "camel.component.activemq.transacted";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_DOC = "Specifies whether to use transacted mode";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_CONF = "camel.component.activemq.transactedInOut";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_DOC = "Specifies whether InOut operations (request reply) default to using transacted mode If this flag is set to true, then Spring JmsTemplate will have sessionTransacted set to true, and the acknowledgeMode as transacted on the JmsTemplate used for InOut operations. Note from Spring JMS: that within a JTA transaction, the parameters passed to createQueue, createTopic methods are not taken into account. Depending on the Java EE transaction context, the container makes its own decisions on these values. Analogously, these parameters are not taken into account within a locally managed transaction either, since Spring JMS operates on an existing JMS Session in this case. Setting this flag to true will use a short local JMS transaction when running outside of a managed transaction, and a synchronized local JMS transaction in case of a managed transaction (other than an XA transaction) being present. This has the effect of a local JMS transaction being managed alongside the main transaction (which might be a native JDBC transaction), with the JMS transaction committing right after the main transaction.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_DEFAULT = false;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_CONF = "camel.component.activemq.lazyCreateTransactionManager";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_DOC = "If true, Camel will create a JmsTransactionManager, if there is no transactionManager injected when option transacted=true.";
    public static final Boolean CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_DEFAULT = true;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_CONF = "camel.component.activemq.transactionManager";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_DOC = "The Spring transaction manager to use.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_CONF = "camel.component.activemq.transactionName";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_DOC = "The name of the transaction to use.";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_CONF = "camel.component.activemq.transactionTimeout";
    public static final String CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_DOC = "The timeout value of the transaction (in seconds), if using transacted mode.";
    public static final Integer CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_DEFAULT = -1;

    public CamelActivemqSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelActivemqSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_TYPE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_ACTIVEMQ_PATH_DESTINATION_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CLIENT_ID_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CONNECTION_FACTORY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_REPLY_TO_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DURABLE_SUBSCRIPTION_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_MESSAGE_TYPE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TEST_CONNECTION_ON_STARTUP_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_DELAY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_MODE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DELIVERY_PERSISTENT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXPLICIT_QOS_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORMAT_DATE_HEADERS_TO_ISO_8601DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRESERVE_MESSAGE_QOS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PRIORITY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_OVERRIDE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_TYPE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TIME_TO_LIVE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_ADDITIONAL_HEADERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_NULL_BODY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALWAYS_COPY_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_CORRELATION_PROPERTY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DISABLE_TIME_TO_LIVE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_FORCE_SEND_ORIGINAL_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDCONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_SENT_JMSMESSAGE_IDDOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_CACHE_LEVEL_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REPLY_TO_DESTINATION_SELECTOR_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_STREAM_MESSAGE_TYPE_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ALLOW_SERIALIZED_HEADERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ARTEMIS_STREAMING_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_START_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ASYNC_STOP_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_DESTINATION_RESOLVER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_EXCEPTION_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_CONSUMER_LIMIT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_IDLE_TASK_EXECUTION_LIMIT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_INCLUDE_ALL_JMSXPROPERTIES_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_JMS_KEY_FORMAT_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAP_JMS_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MAX_MESSAGES_PER_TASK_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CONVERTER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_CREATED_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_ID_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_LISTENER_CONTAINER_FACTORY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_MESSAGE_TIMESTAMP_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PUB_SUB_NO_LOCAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECEIVE_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_RECOVERY_INTERVAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCEPTION_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSFER_EXCHANGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDCONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_USE_MESSAGE_IDAS_CORRELATION_IDDOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTED_IN_OUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_LAZY_CREATE_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_ENDPOINT_TRANSACTION_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLCONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_BROKER_URLDOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_CLIENT_ID_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_CONNECTION_FACTORY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_REPLY_TO_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DURABLE_SUBSCRIPTION_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_MESSAGE_TYPE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TEST_CONNECTION_ON_STARTUP_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_POOLED_CONNECTION_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_SINGLE_CONNECTION_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_DELAY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_MODE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DELIVERY_PERSISTENT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_EXPLICIT_QOS_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_FORMAT_DATE_HEADERS_TO_ISO_8601DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_PRESERVE_MESSAGE_QOS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_PRIORITY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_MAX_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_ON_TIMEOUT_MAX_CONCURRENT_CONSUMERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_OVERRIDE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_TYPE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TIME_TO_LIVE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_ADDITIONAL_HEADERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_NULL_BODY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALWAYS_COPY_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_CORRELATION_PROPERTY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DISABLE_TIME_TO_LIVE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_FORCE_SEND_ORIGINAL_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDCONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_SENT_JMSMESSAGE_IDDOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_CACHE_LEVEL_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REPLY_TO_DESTINATION_SELECTOR_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_STREAM_MESSAGE_TYPE_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_CONNECTION_FACTORY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_AUTO_WIRED_DESTINATION_RESOLVER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ALLOW_SERIALIZED_HEADERS_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ARTEMIS_STREAMING_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_START_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ASYNC_STOP_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SINK_ACTIVEMQ_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_CONFIGURATION_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_DESTINATION_RESOLVER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_EXCEPTION_LISTENER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_CONSUMER_LIMIT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_IDLE_TASK_EXECUTION_LIMIT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_INCLUDE_ALL_JMSXPROPERTIES_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_JMS_KEY_FORMAT_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MAP_JMS_MESSAGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MAX_MESSAGES_PER_TASK_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CONVERTER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_CREATED_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_ID_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_LISTENER_CONTAINER_FACTORY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_MESSAGE_TIMESTAMP_ENABLED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_PUB_SUB_NO_LOCAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_QUEUE_BROWSE_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_RECEIVE_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_RECOVERY_INTERVAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_REQUEST_TIMEOUT_CHECKER_INTERVAL_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCEPTION_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSFER_EXCHANGE_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRUST_ALL_PACKAGES_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDCONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_USE_MESSAGE_IDAS_CORRELATION_IDDOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_COUNTER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_CONF, ConfigDef.Type.LONG, CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_WAIT_FOR_PROVISION_CORRELATION_TO_BE_UPDATED_THREAD_SLEEPING_TIME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_PASSWORD_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_USERNAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTED_IN_OUT_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_LAZY_CREATE_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_NAME_DOC);
        conf.define(CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ACTIVEMQ_COMPONENT_TRANSACTION_TIMEOUT_DOC);
        return conf;
    }
}