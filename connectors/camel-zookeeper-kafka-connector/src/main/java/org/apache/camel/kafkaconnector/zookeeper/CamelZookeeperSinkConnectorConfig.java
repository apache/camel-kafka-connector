/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.zookeeper;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelZookeeperSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_CONF = "camel.sink.path.serverUrls";
    public static final String CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_DOC = "The zookeeper server hosts (multiple servers can be separated by comma)";
    public static final String CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_DEFAULT = null;
    public static final String CAMEL_SINK_ZOOKEEPER_PATH_PATH_CONF = "camel.sink.path.path";
    public static final String CAMEL_SINK_ZOOKEEPER_PATH_PATH_DOC = "The node in the ZooKeeper server (aka znode)";
    public static final String CAMEL_SINK_ZOOKEEPER_PATH_PATH_DEFAULT = null;
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_CONF = "camel.sink.endpoint.listChildren";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_DOC = "Whether the children of the node should be listed";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_CONF = "camel.sink.endpoint.timeout";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_DOC = "The time interval to wait on connection before timing out.";
    public static final Integer CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_DEFAULT = 5000;
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_CONF = "camel.sink.endpoint.create";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_DOC = "Should the endpoint create the node if it does not currently exist.";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_CONF = "camel.sink.endpoint.createMode";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_DOC = "The create mode that should be used for the newly created node One of: [PERSISTENT] [PERSISTENT_SEQUENTIAL] [EPHEMERAL] [EPHEMERAL_SEQUENTIAL]";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_DEFAULT = "EPHEMERAL";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_CONF = "camel.component.zookeeper.listChildren";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_DOC = "Whether the children of the node should be listed";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_CONF = "camel.component.zookeeper.timeout";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_DOC = "The time interval to wait on connection before timing out.";
    public static final Integer CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_DEFAULT = 5000;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_CONF = "camel.component.zookeeper.create";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_DOC = "Should the endpoint create the node if it does not currently exist.";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_CONF = "camel.component.zookeeper.createMode";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_DOC = "The create mode that should be used for the newly created node One of: [PERSISTENT] [PERSISTENT_SEQUENTIAL] [EPHEMERAL] [EPHEMERAL_SEQUENTIAL]";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_DEFAULT = "EPHEMERAL";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.zookeeper.lazyStartProducer";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.zookeeper.autowiredEnabled";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_CONF = "camel.component.zookeeper.configuration";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_DOC = "To use a shared ZooKeeperConfiguration";
    public static final String CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_DEFAULT = null;

    public CamelZookeeperSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelZookeeperSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_ZOOKEEPER_PATH_SERVER_URLS_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_PATH_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ZOOKEEPER_PATH_PATH_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_ZOOKEEPER_PATH_PATH_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_ENDPOINT_LIST_CHILDREN_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_ENDPOINT_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_ENDPOINT_CREATE_MODE_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_LIST_CHILDREN_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_CREATE_MODE_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_ZOOKEEPER_COMPONENT_CONFIGURATION_DOC);
        return conf;
    }
}