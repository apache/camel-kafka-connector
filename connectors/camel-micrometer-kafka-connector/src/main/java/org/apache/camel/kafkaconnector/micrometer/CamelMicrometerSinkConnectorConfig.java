/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.micrometer;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelMicrometerSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_CONF = "camel.sink.path.metricsType";
    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_DOC = "Type of metrics One of: [COUNTER] [GAUGE] [LONG_TASK_TIMER] [TIMER] [DISTRIBUTION_SUMMARY] [OTHER]";
    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_CONF = "camel.sink.path.metricsName";
    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_DOC = "Name of metrics";
    public static final String CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_PATH_TAGS_CONF = "camel.sink.path.tags";
    public static final String CAMEL_SINK_MICROMETER_PATH_TAGS_DOC = "Tags of metrics";
    public static final String CAMEL_SINK_MICROMETER_PATH_TAGS_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_CONF = "camel.sink.endpoint.action";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_DOC = "Action expression when using timer type";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_CONF = "camel.sink.endpoint.decrement";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_DOC = "Decrement value expression when using counter type";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_CONF = "camel.sink.endpoint.increment";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_DOC = "Increment value expression when using counter type";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_CONF = "camel.sink.endpoint.value";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_DOC = "Value expression when using histogram type";
    public static final String CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_DEFAULT = null;
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.micrometer.lazyStartProducer";
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.micrometer.autowiredEnabled";
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_CONF = "camel.component.micrometer.metricsRegistry";
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_DOC = "To use a custom configured MetricRegistry.";
    public static final String CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_DEFAULT = null;

    public CamelMicrometerSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelMicrometerSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_MICROMETER_PATH_METRICS_TYPE_DOC);
        conf.define(CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_MICROMETER_PATH_METRICS_NAME_DOC);
        conf.define(CAMEL_SINK_MICROMETER_PATH_TAGS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_PATH_TAGS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_PATH_TAGS_DOC);
        conf.define(CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_ENDPOINT_ACTION_DOC);
        conf.define(CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_ENDPOINT_DECREMENT_DOC);
        conf.define(CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_ENDPOINT_INCREMENT_DOC);
        conf.define(CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_ENDPOINT_VALUE_DOC);
        conf.define(CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROMETER_COMPONENT_METRICS_REGISTRY_DOC);
        return conf;
    }
}