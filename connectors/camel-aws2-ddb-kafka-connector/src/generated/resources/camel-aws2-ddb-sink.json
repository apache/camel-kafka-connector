{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.aws2ddb.CamelAws2ddbSinkConnector",
		"artifactId": "camel-aws2-ddb-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-aws2-ddb-sink",
		"type": "sink",
		"version": "0.7.0-SNAPSHOT",
		"description": "Store and retrieve data from AWS DynamoDB service using AWS SDK version 2.x."
	},
	"properties": {
		"camel.sink.path.tableName": {
			"name": "camel.sink.path.tableName",
			"description": "The name of the table currently worked with.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.amazonDDBClient": {
			"name": "camel.sink.endpoint.amazonDDBClient",
			"description": "To use the AmazonDynamoDB as the client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.autoDiscoverClient": {
			"name": "camel.sink.endpoint.autoDiscoverClient",
			"description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.consistentRead": {
			"name": "camel.sink.endpoint.consistentRead",
			"description": "Determines whether or not strong consistency should be enforced when data is read.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keyAttributeName": {
			"name": "camel.sink.endpoint.keyAttributeName",
			"description": "Attribute name when creating table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keyAttributeType": {
			"name": "camel.sink.endpoint.keyAttributeType",
			"description": "Attribute type when creating table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.operation": {
			"name": "camel.sink.endpoint.operation",
			"description": "What operation to perform One of: [BatchGetItems] [DeleteItem] [DeleteTable] [DescribeTable] [GetItem] [PutItem] [Query] [Scan] [UpdateItem] [UpdateTable]",
			"defaultValue": "\"PutItem\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"BatchGetItems",
				"DeleteItem",
				"DeleteTable",
				"DescribeTable",
				"GetItem",
				"PutItem",
				"Query",
				"Scan",
				"UpdateItem",
				"UpdateTable"
			]
		},
		"camel.sink.endpoint.proxyHost": {
			"name": "camel.sink.endpoint.proxyHost",
			"description": "To define a proxy host when instantiating the DDB client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyPort": {
			"name": "camel.sink.endpoint.proxyPort",
			"description": "The region in which DynamoDB client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyProtocol": {
			"name": "camel.sink.endpoint.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the DDB client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.sink.endpoint.readCapacity": {
			"name": "camel.sink.endpoint.readCapacity",
			"description": "The provisioned throughput to reserve for reading resources from your table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.region": {
			"name": "camel.sink.endpoint.region",
			"description": "The region in which DDB client needs to work",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.trustAllCertificates": {
			"name": "camel.sink.endpoint.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.writeCapacity": {
			"name": "camel.sink.endpoint.writeCapacity",
			"description": "The provisioned throughput to reserved for writing resources to your table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.basicPropertyBinding": {
			"name": "camel.sink.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.synchronous": {
			"name": "camel.sink.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.accessKey": {
			"name": "camel.sink.endpoint.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.secretKey": {
			"name": "camel.sink.endpoint.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.amazonDDBClient": {
			"name": "camel.component.aws2-ddb.amazonDDBClient",
			"description": "To use the AmazonDynamoDB as the client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.autoDiscoverClient": {
			"name": "camel.component.aws2-ddb.autoDiscoverClient",
			"description": "Setting the autoDiscoverClient mechanism, if true, the component will look for a client instance in the registry automatically otherwise it will skip that checking.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.configuration": {
			"name": "camel.component.aws2-ddb.configuration",
			"description": "The component configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.consistentRead": {
			"name": "camel.component.aws2-ddb.consistentRead",
			"description": "Determines whether or not strong consistency should be enforced when data is read.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.keyAttributeName": {
			"name": "camel.component.aws2-ddb.keyAttributeName",
			"description": "Attribute name when creating table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.keyAttributeType": {
			"name": "camel.component.aws2-ddb.keyAttributeType",
			"description": "Attribute type when creating table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.lazyStartProducer": {
			"name": "camel.component.aws2-ddb.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.operation": {
			"name": "camel.component.aws2-ddb.operation",
			"description": "What operation to perform One of: [BatchGetItems] [DeleteItem] [DeleteTable] [DescribeTable] [GetItem] [PutItem] [Query] [Scan] [UpdateItem] [UpdateTable]",
			"defaultValue": "\"PutItem\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"BatchGetItems",
				"DeleteItem",
				"DeleteTable",
				"DescribeTable",
				"GetItem",
				"PutItem",
				"Query",
				"Scan",
				"UpdateItem",
				"UpdateTable"
			]
		},
		"camel.component.aws2-ddb.proxyHost": {
			"name": "camel.component.aws2-ddb.proxyHost",
			"description": "To define a proxy host when instantiating the DDB client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.proxyPort": {
			"name": "camel.component.aws2-ddb.proxyPort",
			"description": "The region in which DynamoDB client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.proxyProtocol": {
			"name": "camel.component.aws2-ddb.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the DDB client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.component.aws2-ddb.readCapacity": {
			"name": "camel.component.aws2-ddb.readCapacity",
			"description": "The provisioned throughput to reserve for reading resources from your table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.region": {
			"name": "camel.component.aws2-ddb.region",
			"description": "The region in which DDB client needs to work",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.trustAllCertificates": {
			"name": "camel.component.aws2-ddb.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.writeCapacity": {
			"name": "camel.component.aws2-ddb.writeCapacity",
			"description": "The provisioned throughput to reserved for writing resources to your table",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.basicPropertyBinding": {
			"name": "camel.component.aws2-ddb.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		},
		"camel.component.aws2-ddb.accessKey": {
			"name": "camel.component.aws2-ddb.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-ddb.secretKey": {
			"name": "camel.component.aws2-ddb.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}