/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.springredis;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelSpringredisSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_CONF = "camel.source.path.host";
    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_DOC = "The host where Redis server is running.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_CONF = "camel.source.path.port";
    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_DOC = "Redis server port number";
    public static final String CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_CONF = "camel.source.endpoint.channels";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_DOC = "List of topic names or name patterns to subscribe to. Multiple names can be separated by comma.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_CONF = "camel.source.endpoint.command";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_DOC = "Default command, which can be overridden by message header. Notice the consumer only supports the following commands: PSUBSCRIBE and SUBSCRIBE One of: [PING] [SET] [GET] [QUIT] [EXISTS] [DEL] [TYPE] [FLUSHDB] [KEYS] [RANDOMKEY] [RENAME] [RENAMENX] [RENAMEX] [DBSIZE] [EXPIRE] [EXPIREAT] [TTL] [SELECT] [MOVE] [FLUSHALL] [GETSET] [MGET] [SETNX] [SETEX] [MSET] [MSETNX] [DECRBY] [DECR] [INCRBY] [INCR] [APPEND] [SUBSTR] [HSET] [HGET] [HSETNX] [HMSET] [HMGET] [HINCRBY] [HEXISTS] [HDEL] [HLEN] [HKEYS] [HVALS] [HGETALL] [RPUSH] [LPUSH] [LLEN] [LRANGE] [LTRIM] [LINDEX] [LSET] [LREM] [LPOP] [RPOP] [RPOPLPUSH] [SADD] [SMEMBERS] [SREM] [SPOP] [SMOVE] [SCARD] [SISMEMBER] [SINTER] [SINTERSTORE] [SUNION] [SUNIONSTORE] [SDIFF] [SDIFFSTORE] [SRANDMEMBER] [ZADD] [ZRANGE] [ZREM] [ZINCRBY] [ZRANK] [ZREVRANK] [ZREVRANGE] [ZCARD] [ZSCORE] [MULTI] [DISCARD] [EXEC] [WATCH] [UNWATCH] [SORT] [BLPOP] [BRPOP] [AUTH] [SUBSCRIBE] [PUBLISH] [UNSUBSCRIBE] [PSUBSCRIBE] [PUNSUBSCRIBE] [ZCOUNT] [ZRANGEBYSCORE] [ZREVRANGEBYSCORE] [ZREMRANGEBYRANK] [ZREMRANGEBYSCORE] [ZUNIONSTORE] [ZINTERSTORE] [SAVE] [BGSAVE] [BGREWRITEAOF] [LASTSAVE] [SHUTDOWN] [INFO] [MONITOR] [SLAVEOF] [CONFIG] [STRLEN] [SYNC] [LPUSHX] [PERSIST] [RPUSHX] [ECHO] [LINSERT] [DEBUG] [BRPOPLPUSH] [SETBIT] [GETBIT] [SETRANGE] [GETRANGE] [PEXPIRE] [PEXPIREAT] [GEOADD] [GEODIST] [GEOHASH] [GEOPOS] [GEORADIUS] [GEORADIUSBYMEMBER]";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_DEFAULT = "SET";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_CONF = "camel.source.endpoint.connectionFactory";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_DOC = "Reference to a pre-configured RedisConnectionFactory instance to use.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_CONF = "camel.source.endpoint.redisTemplate";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_DOC = "Reference to a pre-configured RedisTemplate instance to use.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_CONF = "camel.source.endpoint.serializer";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_DOC = "Reference to a pre-configured RedisSerializer instance to use.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_CONF = "camel.source.endpoint.listenerContainer";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_DOC = "Reference to a pre-configured RedisMessageListenerContainer instance to use.";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    public static final String CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.spring-redis.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.spring-redis.basicPropertyBinding";
    public static final String CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelSpringredisSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelSpringredisSourceConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_SPRINGREDIS_PATH_HOST_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_SPRINGREDIS_PATH_PORT_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CHANNELS_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_COMMAND_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_CONNECTION_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_REDIS_TEMPLATE_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SERIALIZER_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_LISTENER_CONTAINER_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SOURCE_SPRINGREDIS_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}