{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.crypto.CamelCryptoSinkConnector",
		"artifactId": "camel-crypto-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-crypto-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Sign and verify exchanges using the Signature Service of the Java Cryptographic Extension (JCE)."
	},
	"properties": {
		"camel.sink.path.cryptoOperation": {
			"name": "camel.sink.path.cryptoOperation",
			"description": "Set the Crypto operation from that supplied after the crypto scheme in the endpoint uri e.g. crypto:sign sets sign as the operation. One of: [sign] [verify]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"sign",
				"verify"
			]
		},
		"camel.sink.path.name": {
			"name": "camel.sink.path.name",
			"description": "The logical name of this operation.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.algorithm": {
			"name": "camel.sink.endpoint.algorithm",
			"description": "Sets the JCE name of the Algorithm that should be used for the signer.",
			"defaultValue": "\"SHA256withRSA\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.alias": {
			"name": "camel.sink.endpoint.alias",
			"description": "Sets the alias used to query the KeyStore for keys and {link java.security.cert.Certificate Certificates} to be used in signing and verifying exchanges. This value can be provided at runtime via the message header org.apache.camel.component.crypto.DigitalSignatureConstants#KEYSTORE_ALIAS",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.certificateName": {
			"name": "camel.sink.endpoint.certificateName",
			"description": "Sets the reference name for a PrivateKey that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keystore": {
			"name": "camel.sink.endpoint.keystore",
			"description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keystoreName": {
			"name": "camel.sink.endpoint.keystoreName",
			"description": "Sets the reference name for a Keystore that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.privateKey": {
			"name": "camel.sink.endpoint.privateKey",
			"description": "Set the PrivateKey that should be used to sign the exchange",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.privateKeyName": {
			"name": "camel.sink.endpoint.privateKeyName",
			"description": "Sets the reference name for a PrivateKey that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.provider": {
			"name": "camel.sink.endpoint.provider",
			"description": "Set the id of the security provider that provides the configured Signature algorithm.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.publicKeyName": {
			"name": "camel.sink.endpoint.publicKeyName",
			"description": "references that should be resolved when the context changes",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.secureRandomName": {
			"name": "camel.sink.endpoint.secureRandomName",
			"description": "Sets the reference name for a SecureRandom that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.signatureHeaderName": {
			"name": "camel.sink.endpoint.signatureHeaderName",
			"description": "Set the name of the message header that should be used to store the base64 encoded signature. This defaults to 'CamelDigitalSignature'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.bufferSize": {
			"name": "camel.sink.endpoint.bufferSize",
			"description": "Set the size of the buffer used to read in the Exchange payload data.",
			"defaultValue": "\"2048\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.certificate": {
			"name": "camel.sink.endpoint.certificate",
			"description": "Set the Certificate that should be used to verify the signature in the exchange based on its payload.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.clearHeaders": {
			"name": "camel.sink.endpoint.clearHeaders",
			"description": "Determines if the Signature specific headers be cleared after signing and verification. Defaults to true, and should only be made otherwise at your extreme peril as vital private information such as Keys and passwords may escape if unset.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keyStoreParameters": {
			"name": "camel.sink.endpoint.keyStoreParameters",
			"description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges based on the given KeyStoreParameters. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.publicKey": {
			"name": "camel.sink.endpoint.publicKey",
			"description": "Set the PublicKey that should be used to verify the signature in the exchange.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.secureRandom": {
			"name": "camel.sink.endpoint.secureRandom",
			"description": "Set the SecureRandom used to initialize the Signature service",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "Sets the password used to access an aliased PrivateKey in the KeyStore.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.algorithm": {
			"name": "camel.component.crypto.algorithm",
			"description": "Sets the JCE name of the Algorithm that should be used for the signer.",
			"defaultValue": "\"SHA256withRSA\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.alias": {
			"name": "camel.component.crypto.alias",
			"description": "Sets the alias used to query the KeyStore for keys and {link java.security.cert.Certificate Certificates} to be used in signing and verifying exchanges. This value can be provided at runtime via the message header org.apache.camel.component.crypto.DigitalSignatureConstants#KEYSTORE_ALIAS",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.certificateName": {
			"name": "camel.component.crypto.certificateName",
			"description": "Sets the reference name for a PrivateKey that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.keystore": {
			"name": "camel.component.crypto.keystore",
			"description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.keystoreName": {
			"name": "camel.component.crypto.keystoreName",
			"description": "Sets the reference name for a Keystore that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.lazyStartProducer": {
			"name": "camel.component.crypto.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.privateKey": {
			"name": "camel.component.crypto.privateKey",
			"description": "Set the PrivateKey that should be used to sign the exchange",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.privateKeyName": {
			"name": "camel.component.crypto.privateKeyName",
			"description": "Sets the reference name for a PrivateKey that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.provider": {
			"name": "camel.component.crypto.provider",
			"description": "Set the id of the security provider that provides the configured Signature algorithm.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.publicKeyName": {
			"name": "camel.component.crypto.publicKeyName",
			"description": "references that should be resolved when the context changes",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.secureRandomName": {
			"name": "camel.component.crypto.secureRandomName",
			"description": "Sets the reference name for a SecureRandom that can be found in the registry.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.signatureHeaderName": {
			"name": "camel.component.crypto.signatureHeaderName",
			"description": "Set the name of the message header that should be used to store the base64 encoded signature. This defaults to 'CamelDigitalSignature'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.autowiredEnabled": {
			"name": "camel.component.crypto.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.bufferSize": {
			"name": "camel.component.crypto.bufferSize",
			"description": "Set the size of the buffer used to read in the Exchange payload data.",
			"defaultValue": "\"2048\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.certificate": {
			"name": "camel.component.crypto.certificate",
			"description": "Set the Certificate that should be used to verify the signature in the exchange based on its payload.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.clearHeaders": {
			"name": "camel.component.crypto.clearHeaders",
			"description": "Determines if the Signature specific headers be cleared after signing and verification. Defaults to true, and should only be made otherwise at your extreme peril as vital private information such as Keys and passwords may escape if unset.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.configuration": {
			"name": "camel.component.crypto.configuration",
			"description": "To use the shared DigitalSignatureConfiguration as configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.keyStoreParameters": {
			"name": "camel.component.crypto.keyStoreParameters",
			"description": "Sets the KeyStore that can contain keys and Certficates for use in signing and verifying exchanges based on the given KeyStoreParameters. A KeyStore is typically used with an alias, either one supplied in the Route definition or dynamically via the message header CamelSignatureKeyStoreAlias. If no alias is supplied and there is only a single entry in the Keystore, then this single entry will be used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.publicKey": {
			"name": "camel.component.crypto.publicKey",
			"description": "Set the PublicKey that should be used to verify the signature in the exchange.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.secureRandom": {
			"name": "camel.component.crypto.secureRandom",
			"description": "Set the SecureRandom used to initialize the Signature service",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto.password": {
			"name": "camel.component.crypto.password",
			"description": "Sets the password used to access an aliased PrivateKey in the KeyStore.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}