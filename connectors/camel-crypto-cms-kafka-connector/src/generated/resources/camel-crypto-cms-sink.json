{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.cryptocms.CamelCryptocmsSinkConnector",
		"artifactId": "camel-crypto-cms-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-crypto-cms-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Encrypt, decrypt, sign and verify data in CMS Enveloped Data format."
	},
	"properties": {
		"camel.sink.path.cryptoOperation": {
			"name": "camel.sink.path.cryptoOperation",
			"description": "Set the Crypto operation from that supplied after the crypto scheme in the endpoint uri e.g. crypto-cms:sign sets sign as the operation. Possible values: sign, verify, encrypt, or decrypt. One of: [sign] [verify] [encrypt] [decrypt]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"sign",
				"verify",
				"encrypt",
				"decrypt"
			]
		},
		"camel.sink.path.name": {
			"name": "camel.sink.path.name",
			"description": "The name part in the URI can be chosen by the user to distinguish between different signer\/verifier\/encryptor\/decryptor endpoints within the camel context.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.keyStore": {
			"name": "camel.sink.endpoint.keyStore",
			"description": "Keystore which contains signer private keys, verifier public keys, encryptor public keys, decryptor private keys depending on the operation. Use either this parameter or the parameter 'keyStoreParameters'.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keyStoreParameters": {
			"name": "camel.sink.endpoint.keyStoreParameters",
			"description": "Keystore containing signer private keys, verifier public keys, encryptor public keys, decryptor private keys depending on the operation. Use either this parameter or the parameter 'keystore'.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "Sets the password of the private keys. It is assumed that all private keys in the keystore have the same password. If not set then it is assumed that the password of the private keys is given by the keystore password given in the KeyStoreParameters.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.fromBase64": {
			"name": "camel.sink.endpoint.fromBase64",
			"description": "If true then the CMS message is base 64 encoded and must be decoded during the processing. Default value is false.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.contentEncryptionAlgorithm": {
			"name": "camel.sink.endpoint.contentEncryptionAlgorithm",
			"description": "Encryption algorithm, for example DESede\/CBC\/PKCS5Padding. Further possible values: DESede\/CBC\/PKCS5Padding, AES\/CBC\/PKCS5Padding, Camellia\/CBC\/PKCS5Padding, CAST5\/CBC\/PKCS5Padding. One of: [AES\/CBC\/PKCS5Padding] [DESede\/CBC\/PKCS5Padding] [Camellia\/CBC\/PKCS5Padding] [CAST5\/CBC\/PKCS5Padding]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"AES\/CBC\/PKCS5Padding",
				"DESede\/CBC\/PKCS5Padding",
				"Camellia\/CBC\/PKCS5Padding",
				"CAST5\/CBC\/PKCS5Padding"
			]
		},
		"camel.sink.endpoint.originatorInformationProvider": {
			"name": "camel.sink.endpoint.originatorInformationProvider",
			"description": "Provider for the originator info. See https:\/\/tools.ietf.org\/html\/rfc5652#section-6.1. The default value is null.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.recipient": {
			"name": "camel.sink.endpoint.recipient",
			"description": "Recipient Info: reference to a bean which implements the interface org.apache.camel.component.crypto.cms.api.TransRecipientInfo",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.secretKeyLength": {
			"name": "camel.sink.endpoint.secretKeyLength",
			"description": "Key length for the secret symmetric key used for the content encryption. Only used if the specified content-encryption algorithm allows keys of different sizes. If contentEncryptionAlgorithm=AES\/CBC\/PKCS5Padding or Camellia\/CBC\/PKCS5Padding then 128; if contentEncryptionAlgorithm=DESede\/CBC\/PKCS5Padding then 192, 128; if strong encryption is enabled then for AES\/CBC\/PKCS5Padding and Camellia\/CBC\/PKCS5Padding also the key lengths 192 and 256 are possible.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.unprotectedAttributesGeneratorProvider": {
			"name": "camel.sink.endpoint.unprotectedAttributesGeneratorProvider",
			"description": "Provider of the generator for the unprotected attributes. The default value is null which means no unprotected attribute is added to the Enveloped Data object. See https:\/\/tools.ietf.org\/html\/rfc5652#section-6.1.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.toBase64": {
			"name": "camel.sink.endpoint.toBase64",
			"description": "Indicates whether the Signed Data or Enveloped Data instance shall be base 64 encoded. Default value is false.",
			"defaultValue": "\"false\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.includeContent": {
			"name": "camel.sink.endpoint.includeContent",
			"description": "Indicates whether the signed content should be included into the Signed Data instance. If false then a detached Signed Data instance is created in the header CamelCryptoCmsSignedData.",
			"defaultValue": "\"true\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.signer": {
			"name": "camel.sink.endpoint.signer",
			"description": "Signer information: reference to bean(s) which implements org.apache.camel.component.crypto.cms.api.SignerInfo. Multiple values can be separated by comma",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.signedDataHeaderBase64": {
			"name": "camel.sink.endpoint.signedDataHeaderBase64",
			"description": "Indicates whether the value in the header CamelCryptoCmsSignedData is base64 encoded. Default value is false. Only relevant for detached signatures. In the detached signature case, the header contains the Signed Data object.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.verifySignaturesOfAllSigners": {
			"name": "camel.sink.endpoint.verifySignaturesOfAllSigners",
			"description": "If true then the signatures of all signers contained in the Signed Data object are verified. If false then only one signature whose signer info matches with one of the specified certificates is verified. Default value is true.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto-cms.lazyStartProducer": {
			"name": "camel.component.crypto-cms.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto-cms.autowiredEnabled": {
			"name": "camel.component.crypto-cms.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto-cms.envelopedDataDecryptorConfiguration": {
			"name": "camel.component.crypto-cms.envelopedDataDecryptorConfiguration",
			"description": "To configure the shared EnvelopedDataDecryptorConfiguration, which determines the uri parameters for the decrypt operation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.crypto-cms.signedDataVerifierConfiguration": {
			"name": "camel.component.crypto-cms.signedDataVerifierConfiguration",
			"description": "To configure the shared SignedDataVerifierConfiguration, which determines the uri parameters for the verify operation.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}