{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.zookeepermaster.CamelZookeepermasterSourceConnector",
		"artifactId": "camel-zookeeper-master-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-zookeeper-master-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Have only a single consumer in a cluster consuming from a given endpoint; with automatic failover if the JVM dies."
	},
	"properties": {
		"camel.source.path.groupName": {
			"name": "camel.source.path.groupName",
			"description": "The name of the cluster group to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.path.consumerEndpointUri": {
			"name": "camel.source.path.consumerEndpointUri",
			"description": "The consumer endpoint to use in master\/slave mode",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.zookeeper-master.bridgeErrorHandler": {
			"name": "camel.component.zookeeper-master.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.maximumConnectionTimeout": {
			"name": "camel.component.zookeeper-master.maximumConnectionTimeout",
			"description": "Timeout in millis to use when connecting to the zookeeper ensemble",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.zkRoot": {
			"name": "camel.component.zookeeper-master.zkRoot",
			"description": "The root path to use in zookeeper where information is stored which nodes are master\/slave etc. Will by default use: \/camel\/zookeepermaster\/clusters\/master",
			"defaultValue": "\"\/camel\/zookeepermaster\/clusters\/master\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.zooKeeperUrl": {
			"name": "camel.component.zookeeper-master.zooKeeperUrl",
			"description": "The url for the zookeeper ensemble",
			"defaultValue": "\"localhost:2181\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.autowiredEnabled": {
			"name": "camel.component.zookeeper-master.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.containerIdFactory": {
			"name": "camel.component.zookeeper-master.containerIdFactory",
			"description": "To use a custom ContainerIdFactory for creating container ids.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.curator": {
			"name": "camel.component.zookeeper-master.curator",
			"description": "To use a custom configured CuratorFramework as connection to zookeeper ensemble.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.zookeeper-master.zooKeeperPassword": {
			"name": "camel.component.zookeeper-master.zooKeeperPassword",
			"description": "The password to use when connecting to the zookeeper ensemble",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}