{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.jsonata.CamelJsonataSinkConnector",
		"artifactId": "camel-jsonata-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-jsonata-sink",
		"type": "sink",
		"version": "0.7.0-SNAPSHOT",
		"description": "JSON to JSON transformation using JSONATA."
	},
	"properties": {
		"camel.sink.path.resourceUri": {
			"name": "camel.sink.path.resourceUri",
			"description": "Path to the resource. You can prefix with: classpath, file, http, ref, or bean. classpath, file and http loads the resource using these protocols (classpath is default). ref will lookup the resource in the registry. bean will call a method on a bean to be used as the resource. For bean you can specify the method name after dot, eg bean:myBean.myMethod.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.allowContextMapAll": {
			"name": "camel.sink.endpoint.allowContextMapAll",
			"description": "Sets whether the context map should allow access to all details. By default only the message body and headers can be accessed. This option can be enabled for full access to the current Exchange and CamelContext. Doing so impose a potential security risk as this opens access to the full power of CamelContext API.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.contentCache": {
			"name": "camel.sink.endpoint.contentCache",
			"description": "Sets whether to use resource content cache or not",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.inputType": {
			"name": "camel.sink.endpoint.inputType",
			"description": "Specifies if the output should be Jackson JsonNode or a JSON String. One of: [Jackson] [JsonString]",
			"defaultValue": "\"Jackson\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"Jackson",
				"JsonString"
			]
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.outputType": {
			"name": "camel.sink.endpoint.outputType",
			"description": "Specifies if the output should be Jackson JsonNode or a JSON String. One of: [Jackson] [JsonString]",
			"defaultValue": "\"Jackson\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"Jackson",
				"JsonString"
			]
		},
		"camel.sink.endpoint.basicPropertyBinding": {
			"name": "camel.sink.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.synchronous": {
			"name": "camel.sink.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jsonata.lazyStartProducer": {
			"name": "camel.component.jsonata.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jsonata.basicPropertyBinding": {
			"name": "camel.component.jsonata.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		}
	}
}