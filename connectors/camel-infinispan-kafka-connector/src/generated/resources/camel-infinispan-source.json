{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.infinispan.CamelInfinispanSourceConnector",
		"artifactId": "camel-infinispan-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-infinispan-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Read and write from\/to Infinispan distributed key\/value store and data grid."
	},
	"properties": {
		"camel.source.path.cacheName": {
			"name": "camel.source.path.cacheName",
			"description": "The name of the cache to use. Use current to use the existing cache name from the currently configured cached manager. Or use default for the default cache manager name.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.hosts": {
			"name": "camel.source.endpoint.hosts",
			"description": "Specifies the host of the cache on Infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.queryBuilder": {
			"name": "camel.source.endpoint.queryBuilder",
			"description": "Specifies the query builder.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.secure": {
			"name": "camel.source.endpoint.secure",
			"description": "Define if we are connecting to a secured Infinispan instance",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.customListener": {
			"name": "camel.source.endpoint.customListener",
			"description": "Returns the custom listener in use, if provided",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.eventTypes": {
			"name": "camel.source.endpoint.eventTypes",
			"description": "Specifies the set of event types to register by the consumer.Multiple event can be separated by comma. The possible event types are: CLIENT_CACHE_ENTRY_CREATED, CLIENT_CACHE_ENTRY_MODIFIED, CLIENT_CACHE_ENTRY_REMOVED, CLIENT_CACHE_ENTRY_EXPIRED, CLIENT_CACHE_FAILOVER",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.password": {
			"name": "camel.source.endpoint.password",
			"description": "Define the password to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslMechanism": {
			"name": "camel.source.endpoint.saslMechanism",
			"description": "Define the SASL Mechanism to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityRealm": {
			"name": "camel.source.endpoint.securityRealm",
			"description": "Define the security realm to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityServerName": {
			"name": "camel.source.endpoint.securityServerName",
			"description": "Define the security server name to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.username": {
			"name": "camel.source.endpoint.username",
			"description": "Define the username to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cacheContainer": {
			"name": "camel.source.endpoint.cacheContainer",
			"description": "Specifies the cache Container to connect",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cacheContainerConfiguration": {
			"name": "camel.source.endpoint.cacheContainerConfiguration",
			"description": "The CacheContainer configuration. Used if the cacheContainer is not defined.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.configurationProperties": {
			"name": "camel.source.endpoint.configurationProperties",
			"description": "Implementation specific properties for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.configurationUri": {
			"name": "camel.source.endpoint.configurationUri",
			"description": "An implementation specific URI for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.flags": {
			"name": "camel.source.endpoint.flags",
			"description": "A comma separated list of org.infinispan.client.hotrod.Flag to be applied by default on each cache invocation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.remappingFunction": {
			"name": "camel.source.endpoint.remappingFunction",
			"description": "Set a specific remappingFunction to use in a compute operation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.resultHeader": {
			"name": "camel.source.endpoint.resultHeader",
			"description": "Store the operation result in a header instead of the message body. By default, resultHeader == null and the query result is stored in the message body, any existing content in the message body is discarded. If resultHeader is set, the value is used as the name of the header to store the query result and the original message body is preserved. This value can be overridden by an in message header named: CamelInfinispanOperationResultHeader",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.configuration": {
			"name": "camel.component.infinispan.configuration",
			"description": "Component configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.hosts": {
			"name": "camel.component.infinispan.hosts",
			"description": "Specifies the host of the cache on Infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.queryBuilder": {
			"name": "camel.component.infinispan.queryBuilder",
			"description": "Specifies the query builder.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.secure": {
			"name": "camel.component.infinispan.secure",
			"description": "Define if we are connecting to a secured Infinispan instance",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.bridgeErrorHandler": {
			"name": "camel.component.infinispan.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.customListener": {
			"name": "camel.component.infinispan.customListener",
			"description": "Returns the custom listener in use, if provided",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.eventTypes": {
			"name": "camel.component.infinispan.eventTypes",
			"description": "Specifies the set of event types to register by the consumer.Multiple event can be separated by comma. The possible event types are: CLIENT_CACHE_ENTRY_CREATED, CLIENT_CACHE_ENTRY_MODIFIED, CLIENT_CACHE_ENTRY_REMOVED, CLIENT_CACHE_ENTRY_EXPIRED, CLIENT_CACHE_FAILOVER",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.password": {
			"name": "camel.component.infinispan.password",
			"description": "Define the password to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.saslMechanism": {
			"name": "camel.component.infinispan.saslMechanism",
			"description": "Define the SASL Mechanism to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.securityRealm": {
			"name": "camel.component.infinispan.securityRealm",
			"description": "Define the security realm to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.securityServerName": {
			"name": "camel.component.infinispan.securityServerName",
			"description": "Define the security server name to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.username": {
			"name": "camel.component.infinispan.username",
			"description": "Define the username to access the infinispan instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.autowiredEnabled": {
			"name": "camel.component.infinispan.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.cacheContainer": {
			"name": "camel.component.infinispan.cacheContainer",
			"description": "Specifies the cache Container to connect",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.cacheContainerConfiguration": {
			"name": "camel.component.infinispan.cacheContainerConfiguration",
			"description": "The CacheContainer configuration. Used if the cacheContainer is not defined.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.configurationProperties": {
			"name": "camel.component.infinispan.configurationProperties",
			"description": "Implementation specific properties for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.configurationUri": {
			"name": "camel.component.infinispan.configurationUri",
			"description": "An implementation specific URI for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.flags": {
			"name": "camel.component.infinispan.flags",
			"description": "A comma separated list of org.infinispan.client.hotrod.Flag to be applied by default on each cache invocation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.remappingFunction": {
			"name": "camel.component.infinispan.remappingFunction",
			"description": "Set a specific remappingFunction to use in a compute operation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.infinispan.resultHeader": {
			"name": "camel.component.infinispan.resultHeader",
			"description": "Store the operation result in a header instead of the message body. By default, resultHeader == null and the query result is stored in the message body, any existing content in the message body is discarded. If resultHeader is set, the value is used as the name of the header to store the query result and the original message body is preserved. This value can be overridden by an in message header named: CamelInfinispanOperationResultHeader",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}