{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.azurestoragedatalake.CamelAzurestoragedatalakeSourceConnector",
		"artifactId": "camel-azure-storage-datalake-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-azure-storage-datalake-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Camel Azure Datalake Gen2 Component"
	},
	"properties": {
		"camel.source.path.accountName": {
			"name": "camel.source.path.accountName",
			"description": "name of the azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.path.fileSystemName": {
			"name": "camel.source.path.fileSystemName",
			"description": "name of filesystem to be used",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.accountKey": {
			"name": "camel.source.endpoint.accountKey",
			"description": "account key for authentication",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientId": {
			"name": "camel.source.endpoint.clientId",
			"description": "client id for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientSecret": {
			"name": "camel.source.endpoint.clientSecret",
			"description": "client secret for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientSecretCredential": {
			"name": "camel.source.endpoint.clientSecretCredential",
			"description": "client secret credential for authentication",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.close": {
			"name": "camel.source.endpoint.close",
			"description": "Whether or not a file changed event raised indicates completion (true) or modification (false)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.closeStreamAfterRead": {
			"name": "camel.source.endpoint.closeStreamAfterRead",
			"description": "check for closing stream after read",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.dataCount": {
			"name": "camel.source.endpoint.dataCount",
			"description": "count number of bytes to download",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.dataLakeServiceClient": {
			"name": "camel.source.endpoint.dataLakeServiceClient",
			"description": "service client of datalake",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.directoryName": {
			"name": "camel.source.endpoint.directoryName",
			"description": "directory of the file to be handled in component",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.downloadLinkExpiration": {
			"name": "camel.source.endpoint.downloadLinkExpiration",
			"description": "download link expiration time",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.expression": {
			"name": "camel.source.endpoint.expression",
			"description": "expression for queryInputStream",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fileDir": {
			"name": "camel.source.endpoint.fileDir",
			"description": "directory of file to do operations in the local system",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fileName": {
			"name": "camel.source.endpoint.fileName",
			"description": "name of file to be handled in component",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fileOffset": {
			"name": "camel.source.endpoint.fileOffset",
			"description": "offset position in file for different operations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxResults": {
			"name": "camel.source.endpoint.maxResults",
			"description": "maximum number of results to show at a time",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxRetryRequests": {
			"name": "camel.source.endpoint.maxRetryRequests",
			"description": "no of retries to a given request",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.openOptions": {
			"name": "camel.source.endpoint.openOptions",
			"description": "set open options for creating file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.path": {
			"name": "camel.source.endpoint.path",
			"description": "path in azure datalake for operations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.permission": {
			"name": "camel.source.endpoint.permission",
			"description": "permission string for the file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.position": {
			"name": "camel.source.endpoint.position",
			"description": "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.recursive": {
			"name": "camel.source.endpoint.recursive",
			"description": "recursively include all paths",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.regex": {
			"name": "camel.source.endpoint.regex",
			"description": "regular expression for matching file names",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.retainUncommitedData": {
			"name": "camel.source.endpoint.retainUncommitedData",
			"description": "Whether or not uncommitted data is to be retained after the operation",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.serviceClient": {
			"name": "camel.source.endpoint.serviceClient",
			"description": "datalake service client for azure storage datalake",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sharedKeyCredential": {
			"name": "camel.source.endpoint.sharedKeyCredential",
			"description": "shared key credential for azure datalake gen2",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.tenantId": {
			"name": "camel.source.endpoint.tenantId",
			"description": "tenant id for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeout": {
			"name": "camel.source.endpoint.timeout",
			"description": "Timeout for operation",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.umask": {
			"name": "camel.source.endpoint.umask",
			"description": "umask permission for file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.userPrincipalNameReturned": {
			"name": "camel.source.endpoint.userPrincipalNameReturned",
			"description": "whether or not to use upn",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendEmptyMessageWhenIdle": {
			"name": "camel.source.endpoint.sendEmptyMessageWhenIdle",
			"description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.pollStrategy": {
			"name": "camel.source.endpoint.pollStrategy",
			"description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffErrorThreshold": {
			"name": "camel.source.endpoint.backoffErrorThreshold",
			"description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffIdleThreshold": {
			"name": "camel.source.endpoint.backoffIdleThreshold",
			"description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffMultiplier": {
			"name": "camel.source.endpoint.backoffMultiplier",
			"description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Milliseconds before the next poll.",
			"defaultValue": "500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.greedy": {
			"name": "camel.source.endpoint.greedy",
			"description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.initialDelay": {
			"name": "camel.source.endpoint.initialDelay",
			"description": "Milliseconds before the first poll starts.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repeatCount": {
			"name": "camel.source.endpoint.repeatCount",
			"description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.runLoggingLevel": {
			"name": "camel.source.endpoint.runLoggingLevel",
			"description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]",
			"defaultValue": "\"TRACE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"TRACE",
				"DEBUG",
				"INFO",
				"WARN",
				"ERROR",
				"OFF"
			]
		},
		"camel.source.endpoint.scheduledExecutorService": {
			"name": "camel.source.endpoint.scheduledExecutorService",
			"description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.scheduler": {
			"name": "camel.source.endpoint.scheduler",
			"description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler",
			"defaultValue": "\"none\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.schedulerProperties": {
			"name": "camel.source.endpoint.schedulerProperties",
			"description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.startScheduler": {
			"name": "camel.source.endpoint.startScheduler",
			"description": "Whether the scheduler should be auto started.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeUnit": {
			"name": "camel.source.endpoint.timeUnit",
			"description": "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]",
			"defaultValue": "\"MILLISECONDS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NANOSECONDS",
				"MICROSECONDS",
				"MILLISECONDS",
				"SECONDS",
				"MINUTES",
				"HOURS",
				"DAYS"
			]
		},
		"camel.source.endpoint.useFixedDelay": {
			"name": "camel.source.endpoint.useFixedDelay",
			"description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.accountKey": {
			"name": "camel.component.azure-storage-datalake.accountKey",
			"description": "account key for authentication",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.clientId": {
			"name": "camel.component.azure-storage-datalake.clientId",
			"description": "client id for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.clientSecret": {
			"name": "camel.component.azure-storage-datalake.clientSecret",
			"description": "client secret for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.clientSecretCredential": {
			"name": "camel.component.azure-storage-datalake.clientSecretCredential",
			"description": "client secret credential for authentication",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.close": {
			"name": "camel.component.azure-storage-datalake.close",
			"description": "Whether or not a file changed event raised indicates completion (true) or modification (false)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.closeStreamAfterRead": {
			"name": "camel.component.azure-storage-datalake.closeStreamAfterRead",
			"description": "check for closing stream after read",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.configuration": {
			"name": "camel.component.azure-storage-datalake.configuration",
			"description": "configuration object for datalake",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.dataCount": {
			"name": "camel.component.azure-storage-datalake.dataCount",
			"description": "count number of bytes to download",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.directoryName": {
			"name": "camel.component.azure-storage-datalake.directoryName",
			"description": "directory of the file to be handled in component",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.downloadLinkExpiration": {
			"name": "camel.component.azure-storage-datalake.downloadLinkExpiration",
			"description": "download link expiration time",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.expression": {
			"name": "camel.component.azure-storage-datalake.expression",
			"description": "expression for queryInputStream",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.fileDir": {
			"name": "camel.component.azure-storage-datalake.fileDir",
			"description": "directory of file to do operations in the local system",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.fileName": {
			"name": "camel.component.azure-storage-datalake.fileName",
			"description": "name of file to be handled in component",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.fileOffset": {
			"name": "camel.component.azure-storage-datalake.fileOffset",
			"description": "offset position in file for different operations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.maxResults": {
			"name": "camel.component.azure-storage-datalake.maxResults",
			"description": "maximum number of results to show at a time",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.maxRetryRequests": {
			"name": "camel.component.azure-storage-datalake.maxRetryRequests",
			"description": "no of retries to a given request",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.openOptions": {
			"name": "camel.component.azure-storage-datalake.openOptions",
			"description": "set open options for creating file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.path": {
			"name": "camel.component.azure-storage-datalake.path",
			"description": "path in azure datalake for operations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.permission": {
			"name": "camel.component.azure-storage-datalake.permission",
			"description": "permission string for the file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.position": {
			"name": "camel.component.azure-storage-datalake.position",
			"description": "This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.recursive": {
			"name": "camel.component.azure-storage-datalake.recursive",
			"description": "recursively include all paths",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.regex": {
			"name": "camel.component.azure-storage-datalake.regex",
			"description": "regular expression for matching file names",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.retainUncommitedData": {
			"name": "camel.component.azure-storage-datalake.retainUncommitedData",
			"description": "Whether or not uncommitted data is to be retained after the operation",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.serviceClient": {
			"name": "camel.component.azure-storage-datalake.serviceClient",
			"description": "datalake service client for azure storage datalake",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.sharedKeyCredential": {
			"name": "camel.component.azure-storage-datalake.sharedKeyCredential",
			"description": "shared key credential for azure datalake gen2",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.tenantId": {
			"name": "camel.component.azure-storage-datalake.tenantId",
			"description": "tenant id for azure account",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.timeout": {
			"name": "camel.component.azure-storage-datalake.timeout",
			"description": "Timeout for operation",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.umask": {
			"name": "camel.component.azure-storage-datalake.umask",
			"description": "umask permission for file",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.userPrincipalNameReturned": {
			"name": "camel.component.azure-storage-datalake.userPrincipalNameReturned",
			"description": "whether or not to use upn",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.bridgeErrorHandler": {
			"name": "camel.component.azure-storage-datalake.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-datalake.autowiredEnabled": {
			"name": "camel.component.azure-storage-datalake.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}