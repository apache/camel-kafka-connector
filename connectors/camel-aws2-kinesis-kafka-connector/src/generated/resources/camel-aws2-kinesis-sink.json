{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.aws2kinesis.CamelAws2kinesisSinkConnector",
		"artifactId": "camel-aws2-kinesis-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-aws2-kinesis-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Consume and produce records from and to AWS Kinesis Streams using AWS SDK version 2.x."
	},
	"properties": {
		"camel.sink.path.streamName": {
			"name": "camel.sink.path.streamName",
			"description": "Name of the stream",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.amazonKinesisClient": {
			"name": "camel.sink.endpoint.amazonKinesisClient",
			"description": "Amazon Kinesis client to use for all requests for this endpoint",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.cborEnabled": {
			"name": "camel.sink.endpoint.cborEnabled",
			"description": "This option will set the CBOR_ENABLED property during the execution",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.overrideEndpoint": {
			"name": "camel.sink.endpoint.overrideEndpoint",
			"description": "Set the need for overidding the endpoint. This option needs to be used in combination with uriEndpointOverride option",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyHost": {
			"name": "camel.sink.endpoint.proxyHost",
			"description": "To define a proxy host when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyPort": {
			"name": "camel.sink.endpoint.proxyPort",
			"description": "To define a proxy port when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyProtocol": {
			"name": "camel.sink.endpoint.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the Kinesis client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.sink.endpoint.region": {
			"name": "camel.sink.endpoint.region",
			"description": "The region in which Kinesis Firehose client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.trustAllCertificates": {
			"name": "camel.sink.endpoint.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.uriEndpointOverride": {
			"name": "camel.sink.endpoint.uriEndpointOverride",
			"description": "Set the overriding uri endpoint. This option needs to be used in combination with overrideEndpoint option",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.useDefaultCredentialsProvider": {
			"name": "camel.sink.endpoint.useDefaultCredentialsProvider",
			"description": "Set whether the Kinesis client should expect to load credentials through a default credentials provider or to expect static credentials to be passed in.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.accessKey": {
			"name": "camel.sink.endpoint.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.secretKey": {
			"name": "camel.sink.endpoint.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.amazonKinesisClient": {
			"name": "camel.component.aws2-kinesis.amazonKinesisClient",
			"description": "Amazon Kinesis client to use for all requests for this endpoint",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.cborEnabled": {
			"name": "camel.component.aws2-kinesis.cborEnabled",
			"description": "This option will set the CBOR_ENABLED property during the execution",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.configuration": {
			"name": "camel.component.aws2-kinesis.configuration",
			"description": "Component configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.overrideEndpoint": {
			"name": "camel.component.aws2-kinesis.overrideEndpoint",
			"description": "Set the need for overidding the endpoint. This option needs to be used in combination with uriEndpointOverride option",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyHost": {
			"name": "camel.component.aws2-kinesis.proxyHost",
			"description": "To define a proxy host when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyPort": {
			"name": "camel.component.aws2-kinesis.proxyPort",
			"description": "To define a proxy port when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyProtocol": {
			"name": "camel.component.aws2-kinesis.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the Kinesis client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.component.aws2-kinesis.region": {
			"name": "camel.component.aws2-kinesis.region",
			"description": "The region in which Kinesis Firehose client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.trustAllCertificates": {
			"name": "camel.component.aws2-kinesis.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.uriEndpointOverride": {
			"name": "camel.component.aws2-kinesis.uriEndpointOverride",
			"description": "Set the overriding uri endpoint. This option needs to be used in combination with overrideEndpoint option",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.useDefaultCredentialsProvider": {
			"name": "camel.component.aws2-kinesis.useDefaultCredentialsProvider",
			"description": "Set whether the Kinesis client should expect to load credentials through a default credentials provider or to expect static credentials to be passed in.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.lazyStartProducer": {
			"name": "camel.component.aws2-kinesis.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.autowiredEnabled": {
			"name": "camel.component.aws2-kinesis.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.accessKey": {
			"name": "camel.component.aws2-kinesis.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.secretKey": {
			"name": "camel.component.aws2-kinesis.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		}
	},
	"transforms": [
		"org.apache.camel.kafkaconnector.aws2kinesis.transformers.KinesisRecordDataTransforms"
	]
}