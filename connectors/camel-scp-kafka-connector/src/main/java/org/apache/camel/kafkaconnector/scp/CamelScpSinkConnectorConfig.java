/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.scp;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelScpSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_SCP_PATH_HOST_CONF = "camel.sink.path.host";
    public static final String CAMEL_SINK_SCP_PATH_HOST_DOC = "Hostname of the FTP server";
    public static final String CAMEL_SINK_SCP_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_PATH_PORT_CONF = "camel.sink.path.port";
    public static final String CAMEL_SINK_SCP_PATH_PORT_DOC = "Port of the FTP server";
    public static final Integer CAMEL_SINK_SCP_PATH_PORT_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_CONF = "camel.sink.path.directoryName";
    public static final String CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_DOC = "The starting directory";
    public static final String CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_CHMOD_CONF = "camel.sink.endpoint.chmod";
    public static final String CAMEL_SINK_SCP_ENDPOINT_CHMOD_DOC = "Allows you to set chmod on the stored file. For example chmod=664.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_CHMOD_DEFAULT = "664";
    public static final String CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_CONF = "camel.sink.endpoint.disconnect";
    public static final String CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_DOC = "Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop, then you need to stop the consumer/route instead.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_CONF = "camel.sink.endpoint.fileName";
    public static final String CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_DOC = "Use Expression such as File Language to dynamically set the filename. For consumers, it's used as a filename filter. For producers, it's used to evaluate the filename to write. If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type, it is always evaluated using the File Language. If the expression is an Expression type, the specified Expression type is used - this allows you, for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames, so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_FLATTEN_CONF = "camel.sink.endpoint.flatten";
    public static final String CAMEL_SINK_SCP_ENDPOINT_FLATTEN_DOC = "Flatten is used to flatten the file name path to strip any leading paths, so it's just the file name. This allows you to consume recursively into sub-directories, but when you eg write the files to another directory they will be written in a single directory. Setting this to true on the producer enforces that any file name in CamelFileName header will be stripped for any leading paths.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_FLATTEN_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_CONF = "camel.sink.endpoint.jailStartingDirectory";
    public static final String CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_DOC = "Used for jailing (restricting) writing files to the starting directory (and sub) only. This is enabled by default to not allow Camel to write files to outside directories (to be more secured out of the box). You can turn this off to allow writing files to directories outside the starting directory, such as parent or root folders.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_DEFAULT = true;
    public static final String CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_CONF = "camel.sink.endpoint.strictHostKeyChecking";
    public static final String CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DOC = "Sets whether to use strict host key checking. Possible values are: no, yes One of: [no] [yes]";
    public static final String CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DEFAULT = "no";
    public static final String CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_CONF = "camel.sink.endpoint.allowNullBody";
    public static final String CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_DOC = "Used to specify if a null body is allowed during file writing. If set to true then an empty file will be created, when set to false, and attempting to send a null body to the file component, a GenericFileWriteException of 'Cannot write null body to file.' will be thrown. If the fileExist option is set to 'Override', then the file will be truncated, and if set to append the file will remain unchanged.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_CONF = "camel.sink.endpoint.disconnectOnBatchComplete";
    public static final String CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_DOC = "Whether or not to disconnect from remote FTP server right after a Batch upload is complete. disconnectOnBatchComplete will only disconnect the current connection to the FTP server.";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_CONF = "camel.sink.endpoint.moveExistingFileStrategy";
    public static final String CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_DOC = "Strategy (Custom Strategy) used to move file with special naming token to use when fileExist=Move is configured. By default, there is an implementation used if no custom strategy is provided";
    public static final String CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    public static final String CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_CONF = "camel.sink.endpoint.connectTimeout";
    public static final String CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_DOC = "Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH";
    public static final Integer CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_DEFAULT = 10000;
    public static final String CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_CONF = "camel.sink.endpoint.soTimeout";
    public static final String CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_DOC = "Sets the so timeout FTP and FTPS Only for Camel 2.4. SFTP for Camel 2.14.3/2.15.3/2.16 onwards. Is the SocketOptions.SO_TIMEOUT value in millis. Recommended option is to set this to 300000 so as not have a hanged connection. On SFTP this option is set as timeout on the JSCH Session instance.";
    public static final Integer CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_DEFAULT = 300000;
    public static final String CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    public static final String CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_CONF = "camel.sink.endpoint.timeout";
    public static final String CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_DOC = "Sets the data timeout for waiting for reply Used only by FTPClient";
    public static final Integer CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_DEFAULT = 30000;
    public static final String CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_CONF = "camel.sink.endpoint.knownHostsFile";
    public static final String CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_DOC = "Sets the known_hosts file, so that the jsch endpoint can do host key verification. You can prefix with classpath: to load the file from classpath instead of file system.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_PASSWORD_CONF = "camel.sink.endpoint.password";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PASSWORD_DOC = "Password to use for login";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_CONF = "camel.sink.endpoint.preferredAuthentications";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DOC = "Set a comma separated list of authentications that will be used in order of preference. Possible authentication methods are defined by JCraft JSCH. Some examples include: gssapi-with-mic,publickey,keyboard-interactive,password If not specified the JSCH and/or system defaults will be used.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_CONF = "camel.sink.endpoint.privateKeyBytes";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_DOC = "Set the private key bytes to that the endpoint can do private key verification. This must be used only if privateKeyFile wasn't set. Otherwise the file will have the priority.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_CONF = "camel.sink.endpoint.privateKeyFile";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_DOC = "Set the private key file to that the endpoint can do private key verification. You can prefix with classpath: to load the file from classpath instead of file system.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_CONF = "camel.sink.endpoint.privateKeyFilePassphrase";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_DOC = "Set the private key file passphrase to that the endpoint can do private key verification.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_USERNAME_CONF = "camel.sink.endpoint.username";
    public static final String CAMEL_SINK_SCP_ENDPOINT_USERNAME_DOC = "Username to use for login";
    public static final String CAMEL_SINK_SCP_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_CONF = "camel.sink.endpoint.useUserKnownHostsFile";
    public static final String CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DOC = "If knownHostFile has not been explicit configured, then use the host file from System.getProperty(user.home) /.ssh/known_hosts";
    public static final Boolean CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DEFAULT = true;
    public static final String CAMEL_SINK_SCP_ENDPOINT_CIPHERS_CONF = "camel.sink.endpoint.ciphers";
    public static final String CAMEL_SINK_SCP_ENDPOINT_CIPHERS_DOC = "Set a comma separated list of ciphers that will be used in order of preference. Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc. If not specified the default list from JSCH will be used.";
    public static final String CAMEL_SINK_SCP_ENDPOINT_CIPHERS_DEFAULT = null;
    public static final String CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.scp.lazyStartProducer";
    public static final String CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_CONF = "camel.component.scp.verboseLogging";
    public static final String CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_DOC = "JSCH is verbose logging out of the box. Therefore we turn the logging down to DEBUG logging by default. But setting this option to true turns on the verbose logging again.";
    public static final Boolean CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_DEFAULT = false;
    public static final String CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.scp.basicPropertyBinding";
    public static final String CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelScpSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelScpSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_SCP_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_SCP_PATH_HOST_DOC);
        conf.define(CAMEL_SINK_SCP_PATH_PORT_CONF, ConfigDef.Type.INT, CAMEL_SINK_SCP_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_PATH_PORT_DOC);
        conf.define(CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_PATH_DIRECTORY_NAME_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_CHMOD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_CHMOD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_CHMOD_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_FILE_NAME_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_FLATTEN_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_FLATTEN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_FLATTEN_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_JAIL_STARTING_DIRECTORY_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_ALLOW_NULL_BODY_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_DISCONNECT_ON_BATCH_COMPLETE_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_MOVE_EXISTING_FILE_STRATEGY_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_CONNECT_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_SO_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_KNOWN_HOSTS_FILE_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_BYTES_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_PRIVATE_KEY_FILE_PASSPHRASE_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_USERNAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DOC);
        conf.define(CAMEL_SINK_SCP_ENDPOINT_CIPHERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_SCP_ENDPOINT_CIPHERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_ENDPOINT_CIPHERS_DOC);
        conf.define(CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_SCP_COMPONENT_VERBOSE_LOGGING_DOC);
        conf.define(CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SINK_SCP_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}