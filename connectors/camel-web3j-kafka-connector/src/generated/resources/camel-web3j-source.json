{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.web3j.CamelWeb3jSourceConnector",
		"artifactId": "camel-web3j-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-web3j-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Interact with Ethereum nodes using web3j client API."
	},
	"properties": {
		"camel.source.path.nodeAddress": {
			"name": "camel.source.path.nodeAddress",
			"description": "Sets the node address used to communicate",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.addresses": {
			"name": "camel.source.endpoint.addresses",
			"description": "Contract address or a list of addresses.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fromAddress": {
			"name": "camel.source.endpoint.fromAddress",
			"description": "The address the transaction is send from",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fromBlock": {
			"name": "camel.source.endpoint.fromBlock",
			"description": "The block number, or the string latest for the last mined block or pending, earliest for not yet mined transactions.",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fullTransactionObjects": {
			"name": "camel.source.endpoint.fullTransactionObjects",
			"description": "If true it returns the full transaction objects, if false only the hashes of the transactions.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.gasLimit": {
			"name": "camel.source.endpoint.gasLimit",
			"description": "The maximum gas allowed in this block.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.privateFor": {
			"name": "camel.source.endpoint.privateFor",
			"description": "A transaction privateFor nodes with public keys in a Quorum network",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.quorumAPI": {
			"name": "camel.source.endpoint.quorumAPI",
			"description": "If true, this will support Quorum API.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.toAddress": {
			"name": "camel.source.endpoint.toAddress",
			"description": "The address the transaction is directed to.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.toBlock": {
			"name": "camel.source.endpoint.toBlock",
			"description": "The block number, or the string latest for the last mined block or pending, earliest for not yet mined transactions.",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.topics": {
			"name": "camel.source.endpoint.topics",
			"description": "Topics are order-dependent. Each topic can also be a list of topics. Specify multiple topics separated by comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.web3j": {
			"name": "camel.source.endpoint.web3j",
			"description": "The preconfigured Web3j object.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.web3j.addresses": {
			"name": "camel.component.web3j.addresses",
			"description": "Contract address or a list of addresses.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.configuration": {
			"name": "camel.component.web3j.configuration",
			"description": "Default configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.fromAddress": {
			"name": "camel.component.web3j.fromAddress",
			"description": "The address the transaction is send from",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.fromBlock": {
			"name": "camel.component.web3j.fromBlock",
			"description": "The block number, or the string latest for the last mined block or pending, earliest for not yet mined transactions.",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.fullTransactionObjects": {
			"name": "camel.component.web3j.fullTransactionObjects",
			"description": "If true it returns the full transaction objects, if false only the hashes of the transactions.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.gasLimit": {
			"name": "camel.component.web3j.gasLimit",
			"description": "The maximum gas allowed in this block.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.privateFor": {
			"name": "camel.component.web3j.privateFor",
			"description": "A transaction privateFor nodes with public keys in a Quorum network",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.quorumAPI": {
			"name": "camel.component.web3j.quorumAPI",
			"description": "If true, this will support Quorum API.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.toAddress": {
			"name": "camel.component.web3j.toAddress",
			"description": "The address the transaction is directed to.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.toBlock": {
			"name": "camel.component.web3j.toBlock",
			"description": "The block number, or the string latest for the last mined block or pending, earliest for not yet mined transactions.",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.topics": {
			"name": "camel.component.web3j.topics",
			"description": "Topics are order-dependent. Each topic can also be a list of topics. Specify multiple topics separated by comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.web3j": {
			"name": "camel.component.web3j.web3j",
			"description": "The preconfigured Web3j object.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.bridgeErrorHandler": {
			"name": "camel.component.web3j.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.web3j.autowiredEnabled": {
			"name": "camel.component.web3j.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}