/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.jpa;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelJpaSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_JPA_PATH_ENTITY_TYPE_CONF = "camel.sink.path.entityType";
    private static final String CAMEL_SINK_JPA_PATH_ENTITY_TYPE_DOC = "Entity class name";
    private static final String CAMEL_SINK_JPA_PATH_ENTITY_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_CONF = "camel.sink.endpoint.joinTransaction";
    private static final String CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_DOC = "The camel-jpa component will join transaction by default. You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent, instead of having to set it on all endpoints.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_DEFAULT = true;
    public static final String CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_CONF = "camel.sink.endpoint.maximumResults";
    private static final String CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_DOC = "Set the maximum number of results to retrieve on the Query.";
    private static final Integer CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_DEFAULT = -1;
    public static final String CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_CONF = "camel.sink.endpoint.namedQuery";
    private static final String CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_DOC = "To use a named query.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_CONF = "camel.sink.endpoint.nativeQuery";
    private static final String CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_DOC = "To use a custom native query. You may want to use the option resultClass also when using native queries.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_CONF = "camel.sink.endpoint.persistenceUnit";
    private static final String CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_DOC = "The JPA persistence unit used by default.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_DEFAULT = "camel";
    public static final String CAMEL_SINK_JPA_ENDPOINT_QUERY_CONF = "camel.sink.endpoint.query";
    private static final String CAMEL_SINK_JPA_ENDPOINT_QUERY_DOC = "To use a custom query.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_QUERY_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_CONF = "camel.sink.endpoint.resultClass";
    private static final String CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_DOC = "Defines the type of the returned payload (we will call entityManager.createNativeQuery(nativeQuery, resultClass) instead of entityManager.createNativeQuery(nativeQuery)). Without this option, we will return an object array. Only has an affect when using in conjunction with native query when consuming data.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_CONF = "camel.sink.endpoint.findEntity";
    private static final String CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_DOC = "If enabled then the producer will find a single entity by using the message body as key and entityType as the class type. This can be used instead of a query to find a single entity.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_CONF = "camel.sink.endpoint.flushOnSend";
    private static final String CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_DOC = "Flushes the EntityManager after the entity bean has been persisted.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_DEFAULT = true;
    public static final String CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    private static final String CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_REMOVE_CONF = "camel.sink.endpoint.remove";
    private static final String CAMEL_SINK_JPA_ENDPOINT_REMOVE_DOC = "Indicates to use entityManager.remove(entity).";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_REMOVE_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_CONF = "camel.sink.endpoint.useExecuteUpdate";
    private static final String CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_DOC = "To configure whether to use executeUpdate() when producer executes a query. When you use INSERT, UPDATE or DELETE statement as a named query, you need to specify this option to 'true'.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_CONF = "camel.sink.endpoint.usePersist";
    private static final String CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_DOC = "Indicates to use entityManager.persist(entity) instead of entityManager.merge(entity). Note: entityManager.persist(entity) doesn't work for detached entities (where the EntityManager has to execute an UPDATE instead of an INSERT query)!";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_CONF = "camel.sink.endpoint.usePassedInEntityManager";
    private static final String CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_DOC = "If set to true, then Camel will use the EntityManager from the header JpaConstants.ENTITY_MANAGER instead of the configured entity manager on the component/endpoint. This allows end users to control which entity manager will be in use.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    private static final String CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_CONF = "camel.sink.endpoint.entityManagerProperties";
    private static final String CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DOC = "Additional properties for the entity manager to use.";
    private static final String CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_CONF = "camel.sink.endpoint.sharedEntityManager";
    private static final String CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DOC = "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    private static final String CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_CONF = "camel.component.jpa.entityManagerFactory";
    private static final String CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DOC = "To use the EntityManagerFactory. This is strongly recommended to configure.";
    private static final String CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_CONF = "camel.component.jpa.joinTransaction";
    private static final String CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_DOC = "The camel-jpa component will join transaction by default. You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent, instead of having to set it on all endpoints.";
    private static final Boolean CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_DEFAULT = true;
    public static final String CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_CONF = "camel.component.jpa.sharedEntityManager";
    private static final String CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DOC = "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.";
    private static final Boolean CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_CONF = "camel.component.jpa.transactionManager";
    private static final String CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_DOC = "To use the PlatformTransactionManager for managing transactions.";
    private static final String CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_DEFAULT = null;
    public static final String CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.jpa.lazyStartProducer";
    private static final String CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.jpa.basicPropertyBinding";
    private static final String CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelJpaSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelJpaSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_JPA_PATH_ENTITY_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_PATH_ENTITY_TYPE_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_JPA_PATH_ENTITY_TYPE_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_JOIN_TRANSACTION_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_CONF, ConfigDef.Type.INT, CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_MAXIMUM_RESULTS_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_NAMED_QUERY_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_NATIVE_QUERY_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_JPA_ENDPOINT_PERSISTENCE_UNIT_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_QUERY_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_RESULT_CLASS_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_FIND_ENTITY_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_FLUSH_ON_SEND_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_REMOVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_REMOVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_REMOVE_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_USE_EXECUTE_UPDATE_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_USE_PERSIST_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_USE_PASSED_IN_ENTITY_MANAGER_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DOC);
        conf.define(CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_JOIN_TRANSACTION_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}