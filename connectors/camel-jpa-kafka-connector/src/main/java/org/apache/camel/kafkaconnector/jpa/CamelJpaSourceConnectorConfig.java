/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.jpa;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelJpaSourceConnectorConfig extends CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_CONF = "camel.source.path.entityType";
    private static final String CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_DOC = "Entity class name";
    private static final String CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_CONF = "camel.source.endpoint.joinTransaction";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_DOC = "The camel-jpa component will join transaction by default. You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent, instead of having to set it on all endpoints.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_CONF = "camel.source.endpoint.maximumResults";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_DOC = "Set the maximum number of results to retrieve on the Query.";
    private static final Integer CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_DEFAULT = -1;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_CONF = "camel.source.endpoint.namedQuery";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_DOC = "To use a named query.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_CONF = "camel.source.endpoint.nativeQuery";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_DOC = "To use a custom native query. You may want to use the option resultClass also when using native queries.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_CONF = "camel.source.endpoint.persistenceUnit";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_DOC = "The JPA persistence unit used by default.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_DEFAULT = "camel";
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_QUERY_CONF = "camel.source.endpoint.query";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_QUERY_DOC = "To use a custom query.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_QUERY_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_CONF = "camel.source.endpoint.resultClass";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_DOC = "Defines the type of the returned payload (we will call entityManager.createNativeQuery(nativeQuery, resultClass) instead of entityManager.createNativeQuery(nativeQuery)). Without this option, we will return an object array. Only has an affect when using in conjunction with native query when consuming data.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_CONF = "camel.source.endpoint.consumeDelete";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_DOC = "If true, the entity is deleted after it is consumed; if false, the entity is not deleted.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_CONF = "camel.source.endpoint.consumeLockEntity";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_DOC = "Specifies whether or not to set an exclusive lock on each entity bean while processing the results from polling.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_CONF = "camel.source.endpoint.deleteHandler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_DOC = "To use a custom DeleteHandler to delete the row after the consumer is done processing the exchange";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_CONF = "camel.source.endpoint.lockModeType";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_DOC = "To configure the lock mode on the consumer. One of: [READ] [WRITE] [OPTIMISTIC] [OPTIMISTIC_FORCE_INCREMENT] [PESSIMISTIC_READ] [PESSIMISTIC_WRITE] [PESSIMISTIC_FORCE_INCREMENT] [NONE]";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_DEFAULT = "PESSIMISTIC_WRITE";
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF = "camel.source.endpoint.maxMessagesPerPoll";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC = "An integer value to define the maximum number of messages to gather per poll. By default, no maximum is set. Can be used to avoid polling many thousands of messages when starting up the server. Set a value of 0 or negative to disable.";
    private static final Integer CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_CONF = "camel.source.endpoint.preDeleteHandler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_DOC = "To use a custom Pre-DeleteHandler to delete the row after the consumer has read the entity.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF = "camel.source.endpoint.sendEmptyMessageWhenIdle";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC = "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_CONF = "camel.source.endpoint.skipLockedEntity";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_DOC = "To configure whether to use NOWAIT on lock and silently skip the entity.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_CONF = "camel.source.endpoint.transacted";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_DOC = "Whether to run the consumer in transacted mode, by which all messages will either commit or rollback, when the entire batch has been processed. The default behavior (false) is to commit all the previously successfully processed messages, and only rollback the last failed message.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_CONF = "camel.source.endpoint.parameters";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_DOC = "This key/value mapping is used for building the query parameters. It is expected to be of the generic type java.util.Map where the keys are the named parameters of a given JPA query and the values are their corresponding effective values you want to select for. When it's used for producer, Simple expression can be used as a parameter value. It allows you to retrieve parameter values from the message body, header and etc.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_CONF = "camel.source.endpoint.pollStrategy";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_DOC = "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_CONF = "camel.source.endpoint.entityManagerProperties";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DOC = "Additional properties for the entity manager to use.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_CONF = "camel.source.endpoint.sharedEntityManager";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DOC = "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF = "camel.source.endpoint.backoffErrorThreshold";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC = "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.";
    private static final Integer CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF = "camel.source.endpoint.backoffIdleThreshold";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC = "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.";
    private static final Integer CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_CONF = "camel.source.endpoint.backoffMultiplier";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_DOC = "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.";
    private static final Integer CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_DELAY_CONF = "camel.source.endpoint.delay";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_DELAY_DOC = "Milliseconds before the next poll.";
    private static final Long CAMEL_SOURCE_JPA_ENDPOINT_DELAY_DEFAULT = 500L;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_CONF = "camel.source.endpoint.greedy";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_DOC = "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_CONF = "camel.source.endpoint.initialDelay";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_DOC = "Milliseconds before the first poll starts.";
    private static final Long CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_CONF = "camel.source.endpoint.repeatCount";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_DOC = "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.";
    private static final Long CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_CONF = "camel.source.endpoint.runLoggingLevel";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_DOC = "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT = "TRACE";
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.scheduledExecutorService";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC = "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_CONF = "camel.source.endpoint.scheduler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_DOC = "To use a cron scheduler from either camel-spring or camel-quartz component One of: [none] [spring] [quartz]";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_DEFAULT = "none";
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_CONF = "camel.source.endpoint.schedulerProperties";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_DOC = "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_CONF = "camel.source.endpoint.startScheduler";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_DOC = "Whether the scheduler should be auto started.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_CONF = "camel.source.endpoint.timeUnit";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_DOC = "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_DEFAULT = "MILLISECONDS";
    public static final String CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_CONF = "camel.source.endpoint.useFixedDelay";
    private static final String CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_DOC = "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.";
    private static final Boolean CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_CONF = "camel.component.jpa.entityManagerFactory";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DOC = "To use the EntityManagerFactory. This is strongly recommended to configure.";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_CONF = "camel.component.jpa.joinTransaction";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_DOC = "The camel-jpa component will join transaction by default. You can use this option to turn this off, for example if you use LOCAL_RESOURCE and join transaction doesn't work with your JPA provider. This option can also be set globally on the JpaComponent, instead of having to set it on all endpoints.";
    private static final Boolean CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_DEFAULT = true;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_CONF = "camel.component.jpa.sharedEntityManager";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DOC = "Whether to use Spring's SharedEntityManager for the consumer/producer. Note in most cases joinTransaction should be set to false as this is not an EXTENDED EntityManager.";
    private static final Boolean CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_CONF = "camel.component.jpa.transactionManager";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_DOC = "To use the PlatformTransactionManager for managing transactions.";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_DEFAULT = null;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.jpa.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.jpa.basicPropertyBinding";
    private static final String CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelJpaSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelJpaSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_JPA_PATH_ENTITY_TYPE_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_JOIN_TRANSACTION_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_MAXIMUM_RESULTS_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_NAMED_QUERY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_NATIVE_QUERY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_JPA_ENDPOINT_PERSISTENCE_UNIT_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_QUERY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_RESULT_CLASS_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_DELETE_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_CONSUME_LOCK_ENTITY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_DELETE_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_LOCK_MODE_TYPE_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_PRE_DELETE_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SKIP_LOCKED_ENTITY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_TRANSACTED_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_PARAMETERS_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_POLL_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_ENTITY_MANAGER_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SHARED_ENTITY_MANAGER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_BACKOFF_MULTIPLIER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_JPA_ENDPOINT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_DELAY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_GREEDY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_INITIAL_DELAY_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_REPEAT_COUNT_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_RUN_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_SCHEDULER_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_START_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_TIME_UNIT_DOC);
        conf.define(CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_ENDPOINT_USE_FIXED_DELAY_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_ENTITY_MANAGER_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_JOIN_TRANSACTION_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_SHARED_ENTITY_MANAGER_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_TRANSACTION_MANAGER_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_JPA_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}