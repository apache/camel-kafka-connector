/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.sftp;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelSftpSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_SFTP_PATH_HOST_CONF = "camel.source.path.host";
    public static final String CAMEL_SOURCE_SFTP_PATH_HOST_DOC = "Hostname of the FTP server";
    public static final String CAMEL_SOURCE_SFTP_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_PATH_PORT_CONF = "camel.source.path.port";
    public static final String CAMEL_SOURCE_SFTP_PATH_PORT_DOC = "Port of the FTP server";
    public static final Integer CAMEL_SOURCE_SFTP_PATH_PORT_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_CONF = "camel.source.path.directoryName";
    public static final String CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_DOC = "The starting directory";
    public static final String CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_CONF = "camel.source.endpoint.binary";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_DOC = "Specifies the file transfer mode, BINARY or ASCII. Default is ASCII (false).";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_CONF = "camel.source.endpoint.charset";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_DOC = "This option is used to specify the encoding of the file. You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file, you can use this option to specify which charset to write the file as well. Do mind that when writing the file Camel may have to read the message content into memory to be able to convert the data into the configured charset, so do not use this if you have big messages.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_CONF = "camel.source.endpoint.disconnect";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_DOC = "Whether or not to disconnect from remote FTP server right after use. Disconnect will only disconnect the current connection to the FTP server. If you have a consumer which you want to stop, then you need to stop the consumer/route instead.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_CONF = "camel.source.endpoint.doneFileName";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_DOC = "Producer: If provided, then Camel will write a 2nd done file when the original file has been written. The done file will be empty. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders. The done file will always be written in the same folder as the original file. Consumer: If provided, Camel will only consume files if a done file exists. This option configures what file name to use. Either you can specify a fixed name. Or you can use dynamic placeholders.The done file is always expected in the same folder as the original file. Only ${file.name} and ${file.name.next} is supported as dynamic placeholders.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_CONF = "camel.source.endpoint.fileName";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_DOC = "Use Expression such as File Language to dynamically set the filename. For consumers, it's used as a filename filter. For producers, it's used to evaluate the filename to write. If an expression is set, it take precedence over the CamelFileName header. (Note: The header itself can also be an Expression). The expression options support both String and Expression types. If the expression is a String type, it is always evaluated using the File Language. If the expression is an Expression type, the specified Expression type is used - this allows you, for instance, to use OGNL expressions. For the consumer, you can use it to filter filenames, so you can for instance consume today's file using the File Language syntax: mydata-${date:now:yyyyMMdd}.txt. The producers support the CamelOverruleFileName header which takes precedence over any existing CamelFileName header; the CamelOverruleFileName is a header that is used only once, and makes it easier as this avoids to temporary store CamelFileName and have to restore it afterwards.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_CONF = "camel.source.endpoint.jschLoggingLevel";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_DOC = "The logging level to use for JSCH activity logging. As JSCH is verbose at by default at INFO level the threshold is WARN by default. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_DEFAULT = "WARN";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_CONF = "camel.source.endpoint.passiveMode";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_DOC = "Sets passive mode connections. Default is active mode connections.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_CONF = "camel.source.endpoint.separator";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_DOC = "Sets the path separator to be used. UNIX = Uses unix style path separator Windows = Uses windows style path separator Auto = (is default) Use existing path separator in file name One of: [UNIX] [Windows] [Auto]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_DEFAULT = "UNIX";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_CONF = "camel.source.endpoint.fastExistsCheck";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_DOC = "If set this option to be true, camel-ftp will use the list file directly to check if the file exists. Since some FTP server may not support to list the file directly, if the option is false, camel-ftp will use the old way to list the directory and check if the file exists. This option also influences readLock=changed to control whether it performs a fast check to update file information or not. This can be used to speed up the process if the FTP server has a lot of files.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_CONF = "camel.source.endpoint.delete";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_DOC = "If true, the file will be deleted after it is processed successfully.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_CONF = "camel.source.endpoint.moveFailed";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_DOC = "Sets the move failure expression based on Simple language. For example, to move files into a .error subdirectory use: .error. Note: When moving the files to the fail location Camel will handle the error and will not pick up the file again.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_CONF = "camel.source.endpoint.noop";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_DOC = "If true, the file is not moved or deleted in any way. This option is good for readonly data, or for ETL type requirements. If noop=true, Camel will set idempotent=true as well, to avoid consuming the same files over and over again.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_CONF = "camel.source.endpoint.preMove";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_DOC = "Expression (such as File Language) used to dynamically set the filename when moving it before processing. For example to move in-progress files into the order directory set this value to order.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_CONF = "camel.source.endpoint.preSort";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_DOC = "When pre-sort is enabled then the consumer will sort the file and directory names during polling, that was retrieved from the file system. You may want to do this in case you need to operate on the files in a sorted order. The pre-sort is executed before the consumer starts to filter, and accept files to process by Camel. This option is default=false meaning disabled.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_CONF = "camel.source.endpoint.recursive";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_DOC = "If a directory, will look for files in all the sub-directories as well.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF = "camel.source.endpoint.sendEmptyMessageWhenIdle";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC = "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_CONF = "camel.source.endpoint.streamDownload";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_DOC = "Sets the download method to use when not using a local working directory. If set to true, the remote files are streamed to the route as they are read. When set to false, the remote files are loaded into memory before being sent into the route. If enabling this option then you must set stepwise=false as both cannot be enabled at the same time.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_CONF = "camel.source.endpoint.download";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_DOC = "Whether the FTP consumer should download the file. If this option is set to false, then the message body will be null, but the consumer will still trigger a Camel Exchange that has details about the file such as file name, file size, etc. It's just that the file will not be downloaded.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_CONF = "camel.source.endpoint.ignoreFileNotFoundOrPermissionError";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_DOC = "Whether to ignore when (trying to list files in directories or when downloading a file), which does not exist or due to permission error. By default when a directory or file does not exists or insufficient permission, then an exception is thrown. Setting this option to true allows to ignore that instead.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_CONF = "camel.source.endpoint.inProgressRepository";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_DOC = "A pluggable in-progress repository org.apache.camel.spi.IdempotentRepository. The in-progress repository is used to account the current in progress files being consumed. By default a memory based repository is used.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_CONF = "camel.source.endpoint.localWorkDirectory";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_DOC = "When consuming, a local work directory can be used to store the remote file content directly in local files, to avoid loading the content into memory. This is beneficial, if you consume a very big remote file and thus can conserve memory.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.onCompletionExceptionHandler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_DOC = "To use a custom org.apache.camel.spi.ExceptionHandler to handle any thrown exceptions that happens during the file on completion process where the consumer does either a commit or rollback. The default implementation will log any exception at WARN level and ignore.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_CONF = "camel.source.endpoint.pollStrategy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_DOC = "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_CONF = "camel.source.endpoint.processStrategy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_DOC = "A pluggable org.apache.camel.component.file.GenericFileProcessStrategy allowing you to implement your own readLock option or similar. Can also be used when special conditions must be met before a file can be consumed, such as a special ready file exists. If this option is set then the readLock option does not apply.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_CONF = "camel.source.endpoint.useList";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_DOC = "Whether to allow using LIST command when downloading a file. Default is true. In some use cases you may want to download a specific file and are not allowed to use the LIST command, and therefore you can set this option to false. Notice when using this option, then the specific file to download does not include meta-data information such as file size, timestamp, permissions etc, because those information is only possible to retrieve when LIST command is in use.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_CONF = "camel.source.endpoint.autoCreate";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_DOC = "Automatically create missing directories in the file's pathname. For the file consumer, that means creating the starting directory. For the file producer, it means the directory the files should be written to.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_CONF = "camel.source.endpoint.bindAddress";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_DOC = "Specifies the address of the local interface against which the connection should bind.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_CONF = "camel.source.endpoint.bulkRequests";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_DOC = "Specifies how many requests may be outstanding at any one time. Increasing this value may slightly improve file transfer speed but will increase memory usage.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_CONF = "camel.source.endpoint.compression";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_DOC = "To use compression. Specify a level from 1 to 10. Important: You must manually add the needed JSCH zlib JAR to the classpath for compression support.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_CONF = "camel.source.endpoint.connectTimeout";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_DOC = "Sets the connect timeout for waiting for a connection to be established Used by both FTPClient and JSCH";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_DEFAULT = 10000;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_CONF = "camel.source.endpoint.existDirCheckUsingLs";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_DOC = "Whether to check for existing directory using LS command or CD. By default LS is used which is safer as otherwise Camel needs to change the directory back after checking. However LS has been reported to cause a problem on windows system in some situations and therefore you can disable this option to use CD.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_CONF = "camel.source.endpoint.maximumReconnectAttempts";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_DOC = "Specifies the maximum reconnect attempts Camel performs when it tries to connect to the remote FTP server. Use 0 to disable this behavior.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_CONF = "camel.source.endpoint.proxy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_DOC = "To use a custom configured com.jcraft.jsch.Proxy. This proxy is used to consume/send messages from the target SFTP host.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_CONF = "camel.source.endpoint.reconnectDelay";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_DOC = "Delay in millis Camel will wait before performing a reconnect attempt.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_CONF = "camel.source.endpoint.serverAliveCountMax";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_DOC = "Sets the number of keep-alive messages which may be sent without receiving any messages back from the server. If this threshold is reached while keep-alive messages are being sent, the connection will be disconnected. The default value is one.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_DEFAULT = 1;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_CONF = "camel.source.endpoint.serverAliveInterval";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_DOC = "Sets the interval (millis) to send a keep-alive message. If zero is specified, any keep-alive message must not be sent. The default interval is zero.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_CONF = "camel.source.endpoint.soTimeout";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_DOC = "Sets the so timeout FTP and FTPS Only for Camel 2.4. SFTP for Camel 2.14.3/2.15.3/2.16 onwards. Is the SocketOptions.SO_TIMEOUT value in millis. Recommended option is to set this to 300000 so as not have a hanged connection. On SFTP this option is set as timeout on the JSCH Session instance.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_DEFAULT = 300000;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_CONF = "camel.source.endpoint.stepwise";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_DOC = "Sets whether we should stepwise change directories while traversing file structures when downloading files, or as well when uploading a file to a directory. You can disable this if you for example are in a situation where you cannot change directory on the FTP server due security reasons. Stepwise cannot be used together with streamDownload.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_CONF = "camel.source.endpoint.throwExceptionOnConnectFailed";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_DOC = "Should an exception be thrown if connection failed (exhausted) By default exception is not thrown and a WARN is logged. You can use this to enable exception being thrown and handle the thrown exception from the org.apache.camel.spi.PollingConsumerPollStrategy rollback method.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_CONF = "camel.source.endpoint.timeout";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_DOC = "Sets the data timeout for waiting for reply Used only by FTPClient";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_DEFAULT = 30000;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_CONF = "camel.source.endpoint.antExclude";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_DOC = "Ant style filter exclusion. If both antInclude and antExclude are used, antExclude takes precedence over antInclude. Multiple exclusions may be specified in comma-delimited format.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_CONF = "camel.source.endpoint.antFilterCaseSensitive";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_DOC = "Sets case sensitive flag on ant filter.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_CONF = "camel.source.endpoint.antInclude";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_DOC = "Ant style filter inclusion. Multiple inclusions may be specified in comma-delimited format.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_CONF = "camel.source.endpoint.eagerMaxMessagesPerPoll";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_DOC = "Allows for controlling whether the limit from maxMessagesPerPoll is eager or not. If eager then the limit is during the scanning of files. Where as false would scan all files, and then perform sorting. Setting this option to false allows for sorting all files first, and then limit the poll. Mind that this requires a higher memory usage as all file details are in memory to perform the sorting.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_CONF = "camel.source.endpoint.exclude";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_DOC = "Is used to exclude files, if filename matches the regex pattern (matching is case in-senstive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_CONF = "camel.source.endpoint.excludeExt";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_DOC = "Is used to exclude files matching file extension name (case insensitive). For example to exclude bak files, then use excludeExt=bak. Multiple extensions can be separated by comma, for example to exclude bak and dat files, use excludeExt=bak,dat.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_CONF = "camel.source.endpoint.filter";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DOC = "Pluggable filter as a org.apache.camel.component.file.GenericFileFilter class. Will skip files if filter returns false in its accept() method.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_CONF = "camel.source.endpoint.filterDirectory";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_DOC = "Filters the directory based on Simple language. For example to filter on current date, you can use a simple date pattern such as ${date:now:yyyMMdd}";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_CONF = "camel.source.endpoint.filterFile";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_DOC = "Filters the file based on Simple language. For example to filter on file size, you can use ${file:size} 5000";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_CONF = "camel.source.endpoint.idempotent";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_DOC = "Option to use the Idempotent Consumer EIP pattern to let Camel skip already processed files. Will by default use a memory based LRUCache that holds 1000 entries. If noop=true then idempotent will be enabled as well to avoid consuming the same files over and over again.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_DEFAULT = "false";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_CONF = "camel.source.endpoint.idempotentKey";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_DOC = "To use a custom idempotent key. By default the absolute path of the file is used. You can use the File Language, for example to use the file name and file size, you can do: idempotentKey=${file:name}-${file:size}";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_CONF = "camel.source.endpoint.idempotentRepository";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_DOC = "A pluggable repository org.apache.camel.spi.IdempotentRepository which by default use MemoryMessageIdRepository if none is specified and idempotent is true.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_CONF = "camel.source.endpoint.include";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_DOC = "Is used to include files, if filename matches the regex pattern (matching is case in-sensitive). Notice if you use symbols such as plus sign and others you would need to configure this using the RAW() syntax if configuring this as an endpoint uri. See more details at configuring endpoint uris";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_CONF = "camel.source.endpoint.includeExt";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_DOC = "Is used to include files matching file extension name (case insensitive). For example to include txt files, then use includeExt=txt. Multiple extensions can be separated by comma, for example to include txt and xml files, use includeExt=txt,xml";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_CONF = "camel.source.endpoint.maxDepth";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_DOC = "The maximum depth to traverse when recursively processing a directory.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_DEFAULT = 2147483647;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF = "camel.source.endpoint.maxMessagesPerPoll";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC = "To define a maximum messages to gather per poll. By default no maximum is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Set a value of 0 or negative to disabled it. Notice: If this option is in use then the File and FTP components will limit before any sorting. For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up, and then sorted. You can use the eagerMaxMessagesPerPoll option and set this to false to allow to scan all files first and then sort afterwards.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_CONF = "camel.source.endpoint.minDepth";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_DOC = "The minimum depth to start processing when recursively processing a directory. Using minDepth=1 means the base directory. Using minDepth=2 means the first sub directory.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_CONF = "camel.source.endpoint.move";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_DOC = "Expression (such as Simple Language) used to dynamically set the filename when moving it after processing. To move files into a .done subdirectory just enter .done.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_CONF = "camel.source.endpoint.exclusiveReadLockStrategy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_DOC = "Pluggable read-lock as a org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy implementation.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CONF = "camel.source.endpoint.readLock";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DOC = "Used by consumer, to only poll the files if it has exclusive read-lock on the file (i.e. the file is not in-progress or being written). Camel will wait until the file lock is granted. This option provides the build in strategies: - none - No read lock is in use - markerFile - Camel creates a marker file (fileName.camelLock) and then holds a lock on it. This option is not available for the FTP component - changed - Changed is using file length/modification timestamp to detect whether the file is currently being copied or not. Will at least use 1 sec to determine this, so this option cannot consume files as fast as the others, but can be more reliable as the JDK IO API cannot always determine whether a file is currently being used by another process. The option readLockCheckInterval can be used to set the check frequency. - fileLock - is for using java.nio.channels.FileLock. This option is not avail for Windows OS and the FTP component. This approach should be avoided when accessing a remote file system via a mount/share unless that file system supports distributed file locks. - rename - rename is for using a try to rename the file as a test if we can get exclusive read-lock. - idempotent - (only for file component) idempotent is for using a idempotentRepository as the read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. - idempotent-changed - (only for file component) idempotent-changed is for using a idempotentRepository and changed as the combined read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that. - idempotent-rename - (only for file component) idempotent-rename is for using a idempotentRepository and rename as the combined read-lock. This allows to use read locks that supports clustering if the idempotent repository implementation supports that.Notice: The various read locks is not all suited to work in clustered mode, where concurrent consumers on different nodes is competing for the same files on a shared file system. The markerFile using a close to atomic operation to create the empty marker file, but its not guaranteed to work in a cluster. The fileLock may work better but then the file system need to support distributed file locks, and so on. Using the idempotent read lock can support clustering if the idempotent repository supports clustering, such as Hazelcast Component or Infinispan. One of: [none] [markerFile] [fileLock] [rename] [changed] [idempotent] [idempotent-changed] [idempotent-rename]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DEFAULT = "none";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_CONF = "camel.source.endpoint.readLockCheckInterval";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_DOC = "Interval in millis for the read-lock, if supported by the read lock. This interval is used for sleeping between attempts to acquire the read lock. For example when using the changed read lock, you can set a higher interval period to cater for slow writes. The default of 1 sec. may be too fast if the producer is very slow writing the file. Notice: For FTP the default readLockCheckInterval is 5000. The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_CONF = "camel.source.endpoint.readLockDeleteOrphanLockFiles";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_DOC = "Whether or not read lock with marker files should upon startup delete any orphan read lock files, which may have been left on the file system, if Camel was not properly shutdown (such as a JVM crash). If turning this option to false then any orphaned lock file will cause Camel to not attempt to pickup that file, this could also be due another node is concurrently reading files from the same shared directory.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_CONF = "camel.source.endpoint.readLockIdempotentReleaseAsync";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_DOC = "Whether the delayed release task should be synchronous or asynchronous. See more details at the readLockIdempotentReleaseDelay option.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_CONF = "camel.source.endpoint.readLockIdempotentReleaseAsyncPoolSize";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_DOC = "The number of threads in the scheduled thread pool when using asynchronous release tasks. Using a default of 1 core threads should be sufficient in almost all use-cases, only set this to a higher value if either updating the idempotent repository is slow, or there are a lot of files to process. This option is not in-use if you use a shared thread pool by configuring the readLockIdempotentReleaseExecutorService option. See more details at the readLockIdempotentReleaseDelay option.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_CONF = "camel.source.endpoint.readLockIdempotentReleaseDelay";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_DOC = "Whether to delay the release task for a period of millis. This can be used to delay the release tasks to expand the window when a file is regarded as read-locked, in an active/active cluster scenario with a shared idempotent repository, to ensure other nodes cannot potentially scan and acquire the same file, due to race-conditions. By expanding the time-window of the release tasks helps prevents these situations. Note delaying is only needed if you have configured readLockRemoveOnCommit to true.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.readLockIdempotentReleaseExecutorService";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_DOC = "To use a custom and shared thread pool for asynchronous release tasks. See more details at the readLockIdempotentReleaseDelay option.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_CONF = "camel.source.endpoint.readLockLoggingLevel";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_DOC = "Logging level used when a read lock could not be acquired. By default a DEBUG is logged. You can change this level, for example to OFF to not have any logging. This option is only applicable for readLock of types: changed, fileLock, idempotent, idempotent-changed, idempotent-rename, rename. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_DEFAULT = "DEBUG";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_CONF = "camel.source.endpoint.readLockMarkerFile";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_DOC = "Whether to use marker file with the changed, rename, or exclusive read lock types. By default a marker file is used as well to guard against other processes picking up the same files. This behavior can be turned off by setting this option to false. For example if you do not want to write marker files to the file systems by the Camel application.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_CONF = "camel.source.endpoint.readLockMinAge";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_DOC = "This option is applied only for readLock=changed. It allows to specify a minimum age the file must be before attempting to acquire the read lock. For example use readLockMinAge=300s to require the file is at last 5 minutes old. This can speedup the changed read lock as it will only attempt to acquire files which are at least that given age.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_CONF = "camel.source.endpoint.readLockMinLength";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_DOC = "This option is applied only for readLock=changed. It allows you to configure a minimum file length. By default Camel expects the file to contain data, and thus the default value is 1. You can set this option to zero, to allow consuming zero-length files.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_DEFAULT = 1L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_CONF = "camel.source.endpoint.readLockRemoveOnCommit";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_DOC = "This option is applied only for readLock=idempotent. It allows to specify whether to remove the file name entry from the idempotent repository when processing the file is succeeded and a commit happens. By default the file is not removed which ensures that any race-condition do not occur so another active node may attempt to grab the file. Instead the idempotent repository may support eviction strategies that you can configure to evict the file name entry after X minutes - this ensures no problems with race conditions. See more details at the readLockIdempotentReleaseDelay option.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_CONF = "camel.source.endpoint.readLockRemoveOnRollback";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_DOC = "This option is applied only for readLock=idempotent. It allows to specify whether to remove the file name entry from the idempotent repository when processing the file failed and a rollback happens. If this option is false, then the file name entry is confirmed (as if the file did a commit).";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_CONF = "camel.source.endpoint.readLockTimeout";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_DOC = "Optional timeout in millis for the read-lock, if supported by the read-lock. If the read-lock could not be granted and the timeout triggered, then Camel will skip the file. At next poll Camel, will try the file again, and this time maybe the read-lock could be granted. Use a value of 0 or lower to indicate forever. Currently fileLock, changed and rename support the timeout. Notice: For FTP the default readLockTimeout value is 20000 instead of 10000. The readLockTimeout value must be higher than readLockCheckInterval, but a rule of thumb is to have a timeout that is at least 2 or more times higher than the readLockCheckInterval. This is needed to ensure that amble time is allowed for the read lock process to try to grab the lock before the timeout was hit.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_DEFAULT = 10000L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF = "camel.source.endpoint.backoffErrorThreshold";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC = "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF = "camel.source.endpoint.backoffIdleThreshold";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC = "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_CONF = "camel.source.endpoint.backoffMultiplier";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_DOC = "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.";
    public static final Integer CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_CONF = "camel.source.endpoint.delay";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_DOC = "Milliseconds before the next poll.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_DEFAULT = 500L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_CONF = "camel.source.endpoint.greedy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_DOC = "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_CONF = "camel.source.endpoint.initialDelay";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_DOC = "Milliseconds before the first poll starts.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_CONF = "camel.source.endpoint.repeatCount";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_DOC = "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.";
    public static final Long CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_CONF = "camel.source.endpoint.runLoggingLevel";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_DOC = "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT = "TRACE";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF = "camel.source.endpoint.scheduledExecutorService";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC = "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_CONF = "camel.source.endpoint.scheduler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_DOC = "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_DEFAULT = "none";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_CONF = "camel.source.endpoint.schedulerProperties";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_DOC = "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_CONF = "camel.source.endpoint.startScheduler";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_DOC = "Whether the scheduler should be auto started.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_CONF = "camel.source.endpoint.timeUnit";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_DOC = "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_DEFAULT = "MILLISECONDS";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_CONF = "camel.source.endpoint.useFixedDelay";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_DOC = "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_CONF = "camel.source.endpoint.ciphers";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_DOC = "Set a comma separated list of ciphers that will be used in order of preference. Possible cipher names are defined by JCraft JSCH. Some examples include: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc. If not specified the default list from JSCH will be used.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_CONF = "camel.source.endpoint.keyExchangeProtocols";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_DOC = "Set a comma separated list of key exchange protocols that will be used in order of preference. Possible cipher names are defined by JCraft JSCH. Some examples include: diffie-hellman-group-exchange-sha1,diffie-hellman-group1-sha1,diffie-hellman-group14-sha1, diffie-hellman-group-exchange-sha256,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521. If not specified the default list from JSCH will be used.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_CONF = "camel.source.endpoint.keyPair";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_DOC = "Sets a key pair of the public and private key so to that the SFTP endpoint can do public/private key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_CONF = "camel.source.endpoint.knownHosts";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_DOC = "Sets the known_hosts from the byte array, so that the SFTP endpoint can do host key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_CONF = "camel.source.endpoint.knownHostsFile";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_DOC = "Sets the known_hosts file, so that the SFTP endpoint can do host key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_CONF = "camel.source.endpoint.knownHostsUri";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_DOC = "Sets the known_hosts file (loaded from classpath by default), so that the SFTP endpoint can do host key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_CONF = "camel.source.endpoint.password";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_DOC = "Password to use for login";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_CONF = "camel.source.endpoint.preferredAuthentications";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DOC = "Set the preferred authentications which SFTP endpoint will used. Some example include:password,publickey. If not specified the default list from JSCH will be used.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_CONF = "camel.source.endpoint.privateKey";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_DOC = "Set the private key as byte so that the SFTP endpoint can do private key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_CONF = "camel.source.endpoint.privateKeyFile";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_DOC = "Set the private key file so that the SFTP endpoint can do private key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_CONF = "camel.source.endpoint.privateKeyPassphrase";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_DOC = "Set the private key file passphrase so that the SFTP endpoint can do private key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_CONF = "camel.source.endpoint.privateKeyUri";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_DOC = "Set the private key file (loaded from classpath by default) so that the SFTP endpoint can do private key verification.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_CONF = "camel.source.endpoint.strictHostKeyChecking";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DOC = "Sets whether to use strict host key checking. One of: [no] [yes]";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DEFAULT = "no";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_CONF = "camel.source.endpoint.username";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_DOC = "Username to use for login";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_CONF = "camel.source.endpoint.useUserKnownHostsFile";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DOC = "If knownHostFile has not been explicit configured then use the host file from System.getProperty(user.home)/.ssh/known_hosts";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DEFAULT = true;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_CONF = "camel.source.endpoint.shuffle";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_DOC = "To shuffle the list of files (sort in random order)";
    public static final Boolean CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_CONF = "camel.source.endpoint.sortBy";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_DOC = "Built-in sort by using the File Language. Supports nested sorts, so you can have a sort by file name and as a 2nd group sort by modified date.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_CONF = "camel.source.endpoint.sorter";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_DOC = "Pluggable sorter as a java.util.Comparator class.";
    public static final String CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_DEFAULT = null;
    public static final String CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.sftp.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.sftp.autowiredEnabled";
    public static final String CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;

    public CamelSftpSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelSftpSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_SFTP_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_SFTP_PATH_HOST_DOC);
        conf.define(CAMEL_SOURCE_SFTP_PATH_PORT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_PATH_PORT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_PATH_DIRECTORY_NAME_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BINARY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_CHARSET_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_DISCONNECT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_DONE_FILE_NAME_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_FILE_NAME_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_JSCH_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PASSIVE_MODE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SEPARATOR_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_FAST_EXISTS_CHECK_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_DELETE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_FAILED_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_NOOP_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRE_MOVE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRE_SORT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_RECURSIVE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SEND_EMPTY_MESSAGE_WHEN_IDLE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_STREAM_DOWNLOAD_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_DOWNLOAD_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_IGNORE_FILE_NOT_FOUND_OR_PERMISSION_ERROR_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_IN_PROGRESS_REPOSITORY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_LOCAL_WORK_DIRECTORY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_ON_COMPLETION_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_POLL_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PROCESS_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_USE_LIST_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_AUTO_CREATE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BIND_ADDRESS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BULK_REQUESTS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_COMPRESSION_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_CONNECT_TIMEOUT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXIST_DIR_CHECK_USING_LS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MAXIMUM_RECONNECT_ATTEMPTS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PROXY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_RECONNECT_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_COUNT_MAX_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SERVER_ALIVE_INTERVAL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SO_TIMEOUT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_STEPWISE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_THROW_EXCEPTION_ON_CONNECT_FAILED_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_TIMEOUT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_EXCLUDE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_FILTER_CASE_SENSITIVE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_ANT_INCLUDE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EAGER_MAX_MESSAGES_PER_POLL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUDE_EXT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_DIRECTORY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_FILTER_FILE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_KEY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_IDEMPOTENT_REPOSITORY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_INCLUDE_EXT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MAX_DEPTH_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MAX_MESSAGES_PER_POLL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MIN_DEPTH_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_MOVE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_EXCLUSIVE_READ_LOCK_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_CHECK_INTERVAL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_DELETE_ORPHAN_LOCK_FILES_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_ASYNC_POOL_SIZE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_IDEMPOTENT_RELEASE_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MARKER_FILE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_AGE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_MIN_LENGTH_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_COMMIT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_REMOVE_ON_ROLLBACK_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_READ_LOCK_TIMEOUT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_ERROR_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_IDLE_THRESHOLD_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_BACKOFF_MULTIPLIER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_GREEDY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_INITIAL_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_REPEAT_COUNT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_RUN_LOGGING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULED_EXECUTOR_SERVICE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SCHEDULER_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_START_SCHEDULER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_TIME_UNIT_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_USE_FIXED_DELAY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_CIPHERS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_KEY_EXCHANGE_PROTOCOLS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_KEY_PAIR_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_FILE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_KNOWN_HOSTS_URI_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PREFERRED_AUTHENTICATIONS_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_FILE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_PASSPHRASE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_PRIVATE_KEY_URI_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_STRICT_HOST_KEY_CHECKING_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_USE_USER_KNOWN_HOSTS_FILE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SHUFFLE_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SORT_BY_DOC);
        conf.define(CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_ENDPOINT_SORTER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_SFTP_COMPONENT_AUTOWIRED_ENABLED_DOC);
        return conf;
    }
}