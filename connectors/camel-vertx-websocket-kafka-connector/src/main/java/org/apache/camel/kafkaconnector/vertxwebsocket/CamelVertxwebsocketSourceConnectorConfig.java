/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.vertxwebsocket;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelVertxwebsocketSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_CONF = "camel.source.path.host";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_DOC = "The host that the consumer should bind to or the host of the remote websocket destination that the producer should connect to";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_DEFAULT = "0.0.0.0";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_CONF = "camel.source.path.port";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_DOC = "The port that the consumer should bind to or port of the remote websocket destination that the producer should connect to";
    public static final Integer CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_DEFAULT = 0;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_CONF = "camel.source.path.path";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_DOC = "The path that the consumer should bind to or path of the remote websocket destination that the producer should connect to";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_DEFAULT = "/";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_CONF = "camel.source.endpoint.allowedOriginPattern";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_DOC = "Regex pattern to match the origin header sent by WebSocket clients";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_CONF = "camel.source.endpoint.router";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_DOC = "To use an existing vertx router for the HTTP server";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_CONF = "camel.source.endpoint.serverOptions";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_DOC = "Sets customized options for configuring the HTTP server hosting the WebSocket for the consumer";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_CONF = "camel.source.endpoint.sslContextParameters";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_DOC = "To configure security using SSLContextParameters";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.vertx-websocket.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.vertx-websocket.basicPropertyBinding";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_CONF = "camel.component.vertx-websocket.router";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_DOC = "To provide a custom vertx router to use on the WebSocket server";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_CONF = "camel.component.vertx-websocket.vertx";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_DOC = "To use an existing vertx instead of creating a new instance";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_CONF = "camel.component.vertx-websocket.vertxOptions";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_DOC = "To provide a custom set of vertx options for configuring vertx";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_CONF = "camel.component.vertx-websocket.useGlobalSslContextParameters";
    public static final String CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DOC = "Enable usage of global SSL context parameters.";
    public static final Boolean CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DEFAULT = false;

    public CamelVertxwebsocketSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelVertxwebsocketSourceConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_HOST_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PORT_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_VERTXWEBSOCKET_PATH_PATH_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ALLOWED_ORIGIN_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_ROUTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SERVER_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_ENDPOINT_SSL_CONTEXT_PARAMETERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_ROUTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_VERTX_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXWEBSOCKET_COMPONENT_USE_GLOBAL_SSL_CONTEXT_PARAMETERS_DOC);
        return conf;
    }
}