{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.sql.CamelSqlSourceConnector",
		"artifactId": "camel-sql-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-sql-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Perform SQL queries using Spring JDBC."
	},
	"properties": {
		"camel.source.path.query": {
			"name": "camel.source.path.query",
			"description": "Sets the SQL query to perform. You can externalize the query by using file: or classpath: as prefix and specify the location of the file.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.allowNamedParameters": {
			"name": "camel.source.endpoint.allowNamedParameters",
			"description": "Whether to allow using named parameters in the queries.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.dataSource": {
			"name": "camel.source.endpoint.dataSource",
			"description": "Sets the DataSource to use to communicate with the databaset at endpoint level.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.dataSourceRef": {
			"name": "camel.source.endpoint.dataSourceRef",
			"description": "Sets the reference to a DataSource to lookup from the registry, to use for communicating with the database.",
			"priority": "LOW",
			"required": "false"
		},
		"camel.source.endpoint.outputClass": {
			"name": "camel.source.endpoint.outputClass",
			"description": "Specify the full package and class name to use as conversion when outputType=SelectOne.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.outputHeader": {
			"name": "camel.source.endpoint.outputHeader",
			"description": "Store the query result in a header instead of the message body. By default, outputHeader == null and the query result is stored in the message body, any existing content in the message body is discarded. If outputHeader is set, the value is used as the name of the header to store the query result and the original message body is preserved.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.outputType": {
			"name": "camel.source.endpoint.outputType",
			"description": "Make the output of consumer or producer to SelectList as List of Map, or SelectOne as single Java object in the following way: a) If the query has only single column, then that JDBC Column object is returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long object. b) If the query has more than one column, then it will return a Map of that result. c) If the outputClass is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with. d) If the query resulted in more than one rows, it throws an non-unique result exception. StreamList streams the result of the query using an Iterator. This can be used with the Splitter EIP in streaming mode to process the ResultSet in streaming fashion. One of: [SelectOne] [SelectList] [StreamList]",
			"defaultValue": "\"SelectList\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"SelectOne",
				"SelectList",
				"StreamList"
			]
		},
		"camel.source.endpoint.separator": {
			"name": "camel.source.endpoint.separator",
			"description": "The separator to use when parameter values is taken from message body (if the body is a String type), to be inserted at # placeholders. Notice if you use named parameters, then a Map type is used instead. The default value is comma",
			"defaultValue": "\",\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.breakBatchOnConsumeFail": {
			"name": "camel.source.endpoint.breakBatchOnConsumeFail",
			"description": "Sets whether to break batch if onConsume failed.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.expectedUpdateCount": {
			"name": "camel.source.endpoint.expectedUpdateCount",
			"description": "Sets an expected update count to validate when using onConsume.",
			"defaultValue": "-1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxMessagesPerPoll": {
			"name": "camel.source.endpoint.maxMessagesPerPoll",
			"description": "Sets the maximum number of messages to poll",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.onConsume": {
			"name": "camel.source.endpoint.onConsume",
			"description": "After processing each row then this query can be executed, if the Exchange was processed successfully, for example to mark the row as processed. The query can have parameter.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.onConsumeBatchComplete": {
			"name": "camel.source.endpoint.onConsumeBatchComplete",
			"description": "After processing the entire batch, this query can be executed to bulk update rows etc. The query cannot have parameters.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.onConsumeFailed": {
			"name": "camel.source.endpoint.onConsumeFailed",
			"description": "After processing each row then this query can be executed, if the Exchange failed, for example to mark the row as failed. The query can have parameter.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.routeEmptyResultSet": {
			"name": "camel.source.endpoint.routeEmptyResultSet",
			"description": "Sets whether empty resultset should be allowed to be sent to the next hop. Defaults to false. So the empty resultset will be filtered out.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendEmptyMessageWhenIdle": {
			"name": "camel.source.endpoint.sendEmptyMessageWhenIdle",
			"description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.transacted": {
			"name": "camel.source.endpoint.transacted",
			"description": "Enables or disables transaction. If enabled then if processing an exchange failed then the consumer breaks out processing any further exchanges to cause a rollback eager.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.useIterator": {
			"name": "camel.source.endpoint.useIterator",
			"description": "Sets how resultset should be delivered to route. Indicates delivery as either a list or individual object. defaults to true.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.pollStrategy": {
			"name": "camel.source.endpoint.pollStrategy",
			"description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.processingStrategy": {
			"name": "camel.source.endpoint.processingStrategy",
			"description": "Allows to plugin to use a custom org.apache.camel.component.sql.SqlProcessingStrategy to execute queries when the consumer has processed the rows\/batch.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.alwaysPopulateStatement": {
			"name": "camel.source.endpoint.alwaysPopulateStatement",
			"description": "If enabled then the populateStatement method from org.apache.camel.component.sql.SqlPrepareStatementStrategy is always invoked, also if there is no expected parameters to be prepared. When this is false then the populateStatement is only invoked if there is 1 or more expected parameters to be set; for example this avoids reading the message body\/headers for SQL queries with no parameters.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.parametersCount": {
			"name": "camel.source.endpoint.parametersCount",
			"description": "If set greater than zero, then Camel will use this count value of parameters to replace instead of querying via JDBC metadata API. This is useful if the JDBC vendor could not return correct parameters count, then user may override instead.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.placeholder": {
			"name": "camel.source.endpoint.placeholder",
			"description": "Specifies a character that will be replaced to in SQL query. Notice, that it is simple String.replaceAll() operation and no SQL parsing is involved (quoted strings will also change).",
			"defaultValue": "\"#\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.prepareStatementStrategy": {
			"name": "camel.source.endpoint.prepareStatementStrategy",
			"description": "Allows to plugin to use a custom org.apache.camel.component.sql.SqlPrepareStatementStrategy to control preparation of the query and prepared statement.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.templateOptions": {
			"name": "camel.source.endpoint.templateOptions",
			"description": "Configures the Spring JdbcTemplate with the key\/values from the Map",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.usePlaceholder": {
			"name": "camel.source.endpoint.usePlaceholder",
			"description": "Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffErrorThreshold": {
			"name": "camel.source.endpoint.backoffErrorThreshold",
			"description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffIdleThreshold": {
			"name": "camel.source.endpoint.backoffIdleThreshold",
			"description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffMultiplier": {
			"name": "camel.source.endpoint.backoffMultiplier",
			"description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Milliseconds before the next poll.",
			"defaultValue": "500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.greedy": {
			"name": "camel.source.endpoint.greedy",
			"description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.initialDelay": {
			"name": "camel.source.endpoint.initialDelay",
			"description": "Milliseconds before the first poll starts.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repeatCount": {
			"name": "camel.source.endpoint.repeatCount",
			"description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.runLoggingLevel": {
			"name": "camel.source.endpoint.runLoggingLevel",
			"description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]",
			"defaultValue": "\"TRACE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"TRACE",
				"DEBUG",
				"INFO",
				"WARN",
				"ERROR",
				"OFF"
			]
		},
		"camel.source.endpoint.scheduledExecutorService": {
			"name": "camel.source.endpoint.scheduledExecutorService",
			"description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.scheduler": {
			"name": "camel.source.endpoint.scheduler",
			"description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler",
			"defaultValue": "\"none\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.schedulerProperties": {
			"name": "camel.source.endpoint.schedulerProperties",
			"description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.startScheduler": {
			"name": "camel.source.endpoint.startScheduler",
			"description": "Whether the scheduler should be auto started.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeUnit": {
			"name": "camel.source.endpoint.timeUnit",
			"description": "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]",
			"defaultValue": "\"MILLISECONDS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NANOSECONDS",
				"MICROSECONDS",
				"MILLISECONDS",
				"SECONDS",
				"MINUTES",
				"HOURS",
				"DAYS"
			]
		},
		"camel.source.endpoint.useFixedDelay": {
			"name": "camel.source.endpoint.useFixedDelay",
			"description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sql.dataSource": {
			"name": "camel.component.sql.dataSource",
			"description": "Sets the DataSource to use to communicate with the database.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sql.bridgeErrorHandler": {
			"name": "camel.component.sql.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sql.autowiredEnabled": {
			"name": "camel.component.sql.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sql.usePlaceholder": {
			"name": "camel.component.sql.usePlaceholder",
			"description": "Sets whether to use placeholder and replace all placeholder characters with sign in the SQL queries. This option is default true",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}