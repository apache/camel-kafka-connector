{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.quickfix.CamelQuickfixSourceConnector",
		"artifactId": "camel-quickfix-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-quickfix-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Open a Financial Interchange (FIX) session using an embedded QuickFix\/J engine."
	},
	"properties": {
		"camel.source.path.configurationName": {
			"name": "camel.source.path.configurationName",
			"description": "Path to the quickfix configuration file. You can prefix with: classpath, file, http, ref, or bean. classpath, file and http loads the configuration file using these protocols (classpath is default). ref will lookup the configuration file in the registry. bean will call a method on a bean to be used as the configuration. For bean you can specify the method name after dot, eg bean:myBean.myMethod",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.lazyCreateEngine": {
			"name": "camel.source.endpoint.lazyCreateEngine",
			"description": "This option allows to create QuickFIX\/J engine on demand. Value true means the engine is started when first message is send or there's consumer configured in route definition. When false value is used, the engine is started at the endpoint creation. When this parameter is missing, the value of component's property lazyCreateEngines is being used.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sessionID": {
			"name": "camel.source.endpoint.sessionID",
			"description": "The optional sessionID identifies a specific FIX session. The format of the sessionID is: (BeginString):(SenderCompID)\/(SenderSubID)\/(SenderLocationID)-(TargetCompID)\/(TargetSubID)\/(TargetLocationID)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.quickfix.lazyCreateEngines": {
			"name": "camel.component.quickfix.lazyCreateEngines",
			"description": "If set to true, the engines will be created and started when needed (when first message is send)",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.quickfix.bridgeErrorHandler": {
			"name": "camel.component.quickfix.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.quickfix.autowiredEnabled": {
			"name": "camel.component.quickfix.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.quickfix.logFactory": {
			"name": "camel.component.quickfix.logFactory",
			"description": "To use the given LogFactory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.quickfix.messageFactory": {
			"name": "camel.component.quickfix.messageFactory",
			"description": "To use the given MessageFactory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.quickfix.messageStoreFactory": {
			"name": "camel.component.quickfix.messageStoreFactory",
			"description": "To use the given MessageStoreFactory",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}