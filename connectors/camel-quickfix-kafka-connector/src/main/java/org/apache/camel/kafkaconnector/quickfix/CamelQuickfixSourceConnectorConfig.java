/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.quickfix;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelQuickfixSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_CONF = "camel.source.path.configurationName";
    private static final String CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_DOC = "The configFile is the name of the QuickFIX/J configuration to use for the FIX engine (located as a resource found in your classpath).";
    private static final String CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_CONF = "camel.source.endpoint.lazyCreateEngine";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DOC = "This option allows to create QuickFIX/J engine on demand. Value true means the engine is started when first message is send or there's consumer configured in route definition. When false value is used, the engine is started at the endpoint creation. When this parameter is missing, the value of component's property lazyCreateEngines is being used.";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDCONF = "camel.source.endpoint.sessionID";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDDOC = "The optional sessionID identifies a specific FIX session. The format of the sessionID is: (BeginString):(SenderCompID)/(SenderSubID)/(SenderLocationID)-(TargetCompID)/(TargetSubID)/(TargetLocationID)";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDDEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.source.endpoint.basicPropertyBinding";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_CONF = "camel.source.endpoint.synchronous";
    private static final String CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_CONF = "camel.component.quickfix.lazyCreateEngines";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DOC = "If set to true, the engines will be created and started when needed (when first message is send)";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.quickfix.bridgeErrorHandler";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.quickfix.basicPropertyBinding";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_CONF = "camel.component.quickfix.logFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_DOC = "To use the given LogFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_CONF = "camel.component.quickfix.messageFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DOC = "To use the given MessageFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_CONF = "camel.component.quickfix.messageStoreFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DOC = "To use the given MessageStoreFactory";
    private static final String CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DEFAULT = null;

    public CamelQuickfixSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelQuickfixSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_QUICKFIX_PATH_CONFIGURATION_NAME_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDCONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_SESSION_IDDOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_LOG_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DOC);
        return conf;
    }
}