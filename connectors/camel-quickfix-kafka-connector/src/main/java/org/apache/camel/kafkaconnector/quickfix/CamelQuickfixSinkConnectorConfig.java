/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.quickfix;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelQuickfixSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_CONF = "camel.sink.path.configurationName";
    private static final String CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_DOC = "The configFile is the name of the QuickFIX/J configuration to use for the FIX engine (located as a resource found in your classpath).";
    private static final String CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_CONF = "camel.sink.endpoint.lazyCreateEngine";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DOC = "This option allows to create QuickFIX/J engine on demand. Value true means the engine is started when first message is send or there's consumer configured in route definition. When false value is used, the engine is started at the endpoint creation. When this parameter is missing, the value of component's property lazyCreateEngines is being used.";
    private static final Boolean CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDCONF = "camel.sink.endpoint.sessionID";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDDOC = "The optional sessionID identifies a specific FIX session. The format of the sessionID is: (BeginString):(SenderCompID)/(SenderSubID)/(SenderLocationID)-(TargetCompID)/(TargetSubID)/(TargetLocationID)";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDDEFAULT = null;
    public static final String CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    private static final String CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_CONF = "camel.component.quickfix.lazyCreateEngines";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DOC = "If set to true, the engines will be created and started when needed (when first message is send)";
    private static final Boolean CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.quickfix.lazyStartProducer";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.quickfix.basicPropertyBinding";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_CONF = "camel.component.quickfix.logFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_DOC = "To use the given LogFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_CONF = "camel.component.quickfix.messageFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DOC = "To use the given MessageFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_CONF = "camel.component.quickfix.messageStoreFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DOC = "To use the given MessageStoreFactory";
    private static final String CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DEFAULT = null;

    public CamelQuickfixSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelQuickfixSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_QUICKFIX_PATH_CONFIGURATION_NAME_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_CREATE_ENGINE_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDCONF, ConfigDef.Type.STRING, CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDDEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_ENDPOINT_SESSION_IDDOC);
        conf.define(CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_CREATE_ENGINES_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_LOG_FACTORY_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_FACTORY_DOC);
        conf.define(CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_QUICKFIX_COMPONENT_MESSAGE_STORE_FACTORY_DOC);
        return conf;
    }
}