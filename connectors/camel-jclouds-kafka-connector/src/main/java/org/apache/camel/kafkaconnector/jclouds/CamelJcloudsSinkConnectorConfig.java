/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.jclouds;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelJcloudsSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_JCLOUDS_PATH_COMMAND_CONF = "camel.sink.path.command";
    public static final String CAMEL_SINK_JCLOUDS_PATH_COMMAND_DOC = "What command to execute such as blobstore or compute. One of: [blobstore] [compute]";
    public static final String CAMEL_SINK_JCLOUDS_PATH_COMMAND_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_CONF = "camel.sink.path.providerId";
    public static final String CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_DOC = "The name of the cloud provider that provides the target service (e.g. aws-s3 or aws_ec2).";
    public static final String CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_CONF = "camel.sink.endpoint.blobName";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_DOC = "The name of the blob.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_CONF = "camel.sink.endpoint.container";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_DOC = "The name of the blob container.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_CONF = "camel.sink.endpoint.group";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_DOC = "The group that will be assigned to the newly created node. Values depend on the actual cloud provider.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_CONF = "camel.sink.endpoint.hardwareId";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_DOC = "The hardware that will be used for creating a node. Values depend on the actual cloud provider.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_CONF = "camel.sink.endpoint.imageId";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_DOC = "The imageId that will be used for creating a node. Values depend on the actual cloud provider.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_CONF = "camel.sink.endpoint.locationId";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_DOC = "The location that will be used for creating a node. Values depend on the actual cloud provider.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_CONF = "camel.sink.endpoint.nodeId";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_DOC = "The id of the node that will run the script or destroyed.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_CONF = "camel.sink.endpoint.nodeState";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_DOC = "To filter by node status to only select running nodes etc. One of: [PENDING] [TERMINATED] [SUSPENDED] [RUNNING] [ERROR] [UNRECOGNIZED]";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_CONF = "camel.sink.endpoint.operation";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_DOC = "Specifies the type of operation that will be performed to the blobstore.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_USER_CONF = "camel.sink.endpoint.user";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_USER_DOC = "The user on the target node that will run the script.";
    public static final String CAMEL_SINK_JCLOUDS_ENDPOINT_USER_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_CONF = "camel.component.jclouds.blobStores";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_DOC = "To use the given BlobStore which must be configured when using blobstore.";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_CONF = "camel.component.jclouds.computeServices";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_DOC = "To use the given ComputeService which must be configured when use compute.";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_DEFAULT = null;
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.jclouds.lazyStartProducer";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.jclouds.autowiredEnabled";
    public static final String CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;

    public CamelJcloudsSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelJcloudsSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_JCLOUDS_PATH_COMMAND_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_PATH_COMMAND_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_JCLOUDS_PATH_COMMAND_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_JCLOUDS_PATH_PROVIDER_ID_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_BLOB_NAME_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_CONTAINER_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_GROUP_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_HARDWARE_ID_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_IMAGE_ID_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_LOCATION_ID_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_ID_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_NODE_STATE_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_OPERATION_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_ENDPOINT_USER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_ENDPOINT_USER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_ENDPOINT_USER_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_COMPONENT_BLOB_STORES_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_COMPONENT_COMPUTE_SERVICES_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_JCLOUDS_COMPONENT_AUTOWIRED_ENABLED_DOC);
        return conf;
    }
}