/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.hipchat;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelHipchatSinkConnectorConfig extends CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_CONF = "camel.sink.path.protocol";
    public static final String CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_DOC = "The protocol for the hipchat server, such as http.";
    public static final String CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_DEFAULT = null;
    public static final String CAMEL_SINK_HIPCHAT_PATH_HOST_CONF = "camel.sink.path.host";
    public static final String CAMEL_SINK_HIPCHAT_PATH_HOST_DOC = "The host for the hipchat server, such as api.hipchat.com";
    public static final String CAMEL_SINK_HIPCHAT_PATH_HOST_DEFAULT = null;
    public static final String CAMEL_SINK_HIPCHAT_PATH_PORT_CONF = "camel.sink.path.port";
    public static final String CAMEL_SINK_HIPCHAT_PATH_PORT_DOC = "The port for the hipchat server. Is by default 80.";
    public static final String CAMEL_SINK_HIPCHAT_PATH_PORT_DEFAULT = "80";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_CONF = "camel.sink.endpoint.authToken";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_DOC = "OAuth 2 auth token";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_DEFAULT = null;
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_CONF = "camel.sink.endpoint.consumeUsers";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_DOC = "Username(s) when consuming messages from the hiptchat server. Multiple user names can be separated by comma.";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_DEFAULT = null;
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_CONF = "camel.sink.endpoint.httpClient";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_DOC = "The CloseableHttpClient reference from registry to be used during API HTTP requests.";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_DEFAULT = "CloseableHttpClient default from HttpClient library";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    public static final String CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    public static final Boolean CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.hipchat.lazyStartProducer";
    public static final String CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.hipchat.basicPropertyBinding";
    public static final String CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    public static final Boolean CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelHipchatSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelHipchatSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_HIPCHAT_PATH_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_PATH_HOST_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_PATH_HOST_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_HIPCHAT_PATH_HOST_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_PATH_PORT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_PATH_PORT_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_AUTH_TOKEN_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_CONSUME_USERS_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_HTTP_CLIENT_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_HIPCHAT_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.LOW, CAMEL_SINK_HIPCHAT_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}