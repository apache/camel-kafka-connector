/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.language;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelLanguageSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_CONF = "camel.sink.path.languageName";
    private static final String CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_DOC = "Sets the name of the language to use One of: [bean] [constant] [exchangeProperty] [file] [groovy] [header] [javascript] [jsonpath] [mvel] [ognl] [] [ref] [simple] [spel] [sql] [terser] [tokenize] [xpath] [xquery] [xtokenize]";
    private static final String CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_CONF = "camel.sink.path.resourceUri";
    private static final String CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_DOC = "Path to the resource, or a reference to lookup a bean in the Registry to use as the resource";
    private static final String CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_DEFAULT = null;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_CONF = "camel.sink.endpoint.allowContextMapAll";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_DOC = "Sets whether the context map should allow access to all details. By default only the message body and headers can be accessed. This option can be enabled for full access to the current Exchange and CamelContext. Doing so impose a potential security risk as this opens access to the full power of CamelContext API.";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_CONF = "camel.sink.endpoint.binary";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_DOC = "Whether the script is binary content or text content. By default the script is read as text content (eg java.lang.String)";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_CONF = "camel.sink.endpoint.cacheScript";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_DOC = "Whether to cache the compiled script and reuse Notice reusing the script can cause side effects from processing one Camel org.apache.camel.Exchange to the next org.apache.camel.Exchange.";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_CONF = "camel.sink.endpoint.contentCache";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_DOC = "Sets whether to use resource content cache or not";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_DEFAULT = true;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_CONF = "camel.sink.endpoint.script";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_DOC = "Sets the script to execute";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_DEFAULT = null;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_CONF = "camel.sink.endpoint.transform";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_DOC = "Whether or not the result of the script should be used as message body. This options is default true.";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_DEFAULT = true;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    private static final String CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.language.lazyStartProducer";
    private static final String CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.language.basicPropertyBinding";
    private static final String CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelLanguageSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelLanguageSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_LANGUAGE_PATH_LANGUAGE_NAME_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_CONF, ConfigDef.Type.STRING, CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_PATH_RESOURCE_URI_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_ALLOW_CONTEXT_MAP_ALL_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_BINARY_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_CACHE_SCRIPT_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_CONTENT_CACHE_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_SCRIPT_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_TRANSFORM_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_LANGUAGE_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}