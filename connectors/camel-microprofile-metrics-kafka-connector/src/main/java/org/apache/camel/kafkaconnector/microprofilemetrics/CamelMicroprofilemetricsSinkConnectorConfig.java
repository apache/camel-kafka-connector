/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.microprofilemetrics;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelMicroprofilemetricsSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_CONF = "camel.sink.path.metricType";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_DOC = "Metric type One of: [concurrent gauge] [counter] [gauge] [meter] [histogram] [timer] [simple timer] [invalid]";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_CONF = "camel.sink.path.metricName";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_DOC = "Metric name";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_CONF = "camel.sink.endpoint.action";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_DOC = "Action to use when using the timer type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_CONF = "camel.sink.endpoint.counterIncrement";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_DOC = "Increment value when using the counter type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_CONF = "camel.sink.endpoint.description";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_DOC = "Metric description";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_CONF = "camel.sink.endpoint.displayName";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_DOC = "Metric display name";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_CONF = "camel.sink.endpoint.gaugeDecrement";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_DOC = "Decrement metric value when using concurrent gauge type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_CONF = "camel.sink.endpoint.gaugeIncrement";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_DOC = "Increment metric value when using the concurrent gauge type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_CONF = "camel.sink.endpoint.gaugeValue";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_DOC = "Decrement metric value when using concurrent gauge type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_CONF = "camel.sink.endpoint.mark";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_DOC = "Mark value to set when using the meter type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_CONF = "camel.sink.endpoint.metricUnit";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_DOC = "Metric unit. See org.eclipse.microprofile.metrics.MetricUnits";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_CONF = "camel.sink.endpoint.tags";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_DOC = "Comma delimited list of tags associated with the metric in the format tagName=tagValue";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_CONF = "camel.sink.endpoint.value";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_DOC = "Value to set when using the histogram type";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_DEFAULT = null;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.microprofile-metrics.lazyStartProducer";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.microprofile-metrics.basicPropertyBinding";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_CONF = "camel.component.microprofile-metrics.metricRegistry";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_DOC = "Use a custom MetricRegistry.";
    private static final String CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_DEFAULT = null;

    public CamelMicroprofilemetricsSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelMicroprofilemetricsSinkConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_TYPE_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_MICROPROFILEMETRICS_PATH_METRIC_NAME_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_ACTION_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_COUNTER_INCREMENT_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DESCRIPTION_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_DISPLAY_NAME_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_DECREMENT_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_INCREMENT_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_GAUGE_VALUE_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_MARK_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_METRIC_UNIT_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_TAGS_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_VALUE_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_MICROPROFILEMETRICS_COMPONENT_METRIC_REGISTRY_DOC);
        return conf;
    }
}