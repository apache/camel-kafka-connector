{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.sjms2.CamelSjms2SourceConnector",
		"artifactId": "camel-sjms2-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-sjms2-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Send and receive messages to\/from a JMS Queue or Topic using plain JMS 2.x API."
	},
	"properties": {
		"camel.source.path.destinationType": {
			"name": "camel.source.path.destinationType",
			"description": "The kind of destination to use One of: [queue] [topic]",
			"defaultValue": "\"queue\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"queue",
				"topic"
			]
		},
		"camel.source.path.destinationName": {
			"name": "camel.source.path.destinationName",
			"description": "DestinationName is a JMS queue or topic name. By default, the destinationName is interpreted as a queue name.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.acknowledgementMode": {
			"name": "camel.source.endpoint.acknowledgementMode",
			"description": "The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE One of: [SESSION_TRANSACTED] [CLIENT_ACKNOWLEDGE] [AUTO_ACKNOWLEDGE] [DUPS_OK_ACKNOWLEDGE]",
			"defaultValue": "\"AUTO_ACKNOWLEDGE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"SESSION_TRANSACTED",
				"CLIENT_ACKNOWLEDGE",
				"AUTO_ACKNOWLEDGE",
				"DUPS_OK_ACKNOWLEDGE"
			]
		},
		"camel.source.endpoint.connectionFactory": {
			"name": "camel.source.endpoint.connectionFactory",
			"description": "The connection factory to be use. A connection factory must be configured either on the component or endpoint.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.disableReplyTo": {
			"name": "camel.source.endpoint.disableReplyTo",
			"description": "Specifies whether Camel ignores the JMSReplyTo header in messages. If true, Camel does not send a reply back to the destination specified in the JMSReplyTo header. You can use this option if you want Camel to consume from a route and you do not want Camel to automatically send back a reply message because another component in your code handles the reply message. You can also use this option if you want to use Camel as a proxy between different message brokers and you want to route message from one system to another.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.replyTo": {
			"name": "camel.source.endpoint.replyTo",
			"description": "Provides an explicit ReplyTo destination (overrides any incoming value of Message.getJMSReplyTo() in consumer).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.testConnectionOnStartup": {
			"name": "camel.source.endpoint.testConnectionOnStartup",
			"description": "Specifies whether to test the connection on startup. This ensures that when Camel starts that all the JMS consumers have a valid connection to the JMS broker. If a connection cannot be granted then Camel throws an exception on startup. This ensures that Camel is not started with failed connections. The JMS producers is tested as well.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.asyncConsumer": {
			"name": "camel.source.endpoint.asyncConsumer",
			"description": "Whether the JmsConsumer processes the Exchange asynchronously. If enabled then the JmsConsumer may pickup the next message from the JMS queue, while the previous message is being processed asynchronously (by the Asynchronous Routing Engine). This means that messages may be processed not 100% strictly in order. If disabled (as default) then the Exchange is fully processed before the JmsConsumer will pickup the next message from the JMS queue. Note if transacted has been enabled, then asyncConsumer=true does not run asynchronously, as transaction must be executed synchronously (Camel 3.0 may support async transactions).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.autoStartup": {
			"name": "camel.source.endpoint.autoStartup",
			"description": "Specifies whether the consumer container should auto-startup.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientId": {
			"name": "camel.source.endpoint.clientId",
			"description": "Sets the JMS client ID to use. Note that this value, if specified, must be unique and can only be used by a single JMS connection instance. It is typically only required for durable topic subscriptions. If using Apache ActiveMQ you may prefer to use Virtual Topics instead.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.concurrentConsumers": {
			"name": "camel.source.endpoint.concurrentConsumers",
			"description": "Specifies the default number of concurrent consumers when consuming from JMS (not for request\/reply over JMS). See also the maxMessagesPerTask option to control dynamic scaling up\/down of threads. When doing request\/reply over JMS then the option replyToConcurrentConsumers is used to control number of concurrent consumers on the reply message listener.",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.durable": {
			"name": "camel.source.endpoint.durable",
			"description": "Sets topic consumer to durable.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.durableSubscriptionName": {
			"name": "camel.source.endpoint.durableSubscriptionName",
			"description": "The durable subscriber name for specifying durable topic subscriptions. The clientId option must be configured as well.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.replyToDeliveryPersistent": {
			"name": "camel.source.endpoint.replyToDeliveryPersistent",
			"description": "Specifies whether to use persistent delivery by default for replies.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.shared": {
			"name": "camel.source.endpoint.shared",
			"description": "Sets the consumer to shared.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.subscriptionId": {
			"name": "camel.source.endpoint.subscriptionId",
			"description": "Sets the subscription Id, required for durable or shared topics.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.eagerLoadingOfProperties": {
			"name": "camel.source.endpoint.eagerLoadingOfProperties",
			"description": "Enables eager loading of JMS properties and payload as soon as a message is loaded which generally is inefficient as the JMS properties may not be required but sometimes can catch early any issues with the underlying JMS provider and the use of JMS properties. See also the option eagerPoisonBody.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.eagerPoisonBody": {
			"name": "camel.source.endpoint.eagerPoisonBody",
			"description": "If eagerLoadingOfProperties is enabled and the JMS message payload (JMS body or JMS properties) is poison (cannot be read\/mapped), then set this text as the message body instead so the message can be processed (the cause of the poison are already stored as exception on the Exchange). This can be turned off by setting eagerPoisonBody=false. See also the option eagerLoadingOfProperties.",
			"defaultValue": "\"Poison JMS message due to ${exception.message}\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.messageSelector": {
			"name": "camel.source.endpoint.messageSelector",
			"description": "Sets the JMS Message selector syntax.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.replyToSameDestinationAllowed": {
			"name": "camel.source.endpoint.replyToSameDestinationAllowed",
			"description": "Whether a JMS consumer is allowed to send a reply message to the same destination that the consumer is using to consume from. This prevents an endless loop by consuming and sending back the same message to itself.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.asyncStartListener": {
			"name": "camel.source.endpoint.asyncStartListener",
			"description": "Whether to startup the consumer message listener asynchronously, when starting a route. For example if a JmsConsumer cannot get a connection to a remote JMS broker, then it may block while retrying and\/or failover. This will cause Camel to block while starting routes. By setting this option to true, you will let routes startup, while the JmsConsumer connects to the JMS broker using a dedicated thread in asynchronous mode. If this option is used, then beware that if the connection could not be established, then an exception is logged at WARN level, and the consumer will not be able to receive messages; You can then restart the route to retry.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.asyncStopListener": {
			"name": "camel.source.endpoint.asyncStopListener",
			"description": "Whether to stop the consumer message listener asynchronously, when stopping a route.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.destinationCreationStrategy": {
			"name": "camel.source.endpoint.destinationCreationStrategy",
			"description": "To use a custom DestinationCreationStrategy.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionListener": {
			"name": "camel.source.endpoint.exceptionListener",
			"description": "Specifies the JMS Exception Listener that is to be notified of any underlying JMS exceptions.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.headerFilterStrategy": {
			"name": "camel.source.endpoint.headerFilterStrategy",
			"description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.includeAllJMSXProperties": {
			"name": "camel.source.endpoint.includeAllJMSXProperties",
			"description": "Whether to include all JMSXxxx properties when mapping from JMS to Camel Message. Setting this to true will include properties such as JMSXAppID, and JMSXUserID etc. Note: If you are using a custom headerFilterStrategy then this option does not apply.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.jmsKeyFormatStrategy": {
			"name": "camel.source.endpoint.jmsKeyFormatStrategy",
			"description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides two implementations out of the box: default and passthrough. The default strategy will safely marshal dots and hyphens (. and -). The passthrough strategy leaves the key as is. Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.mapJmsMessage": {
			"name": "camel.source.endpoint.mapJmsMessage",
			"description": "Specifies whether Camel should auto map the received JMS message to a suited payload type, such as javax.jms.TextMessage to a String etc. See section about how mapping works below for more details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.messageCreatedStrategy": {
			"name": "camel.source.endpoint.messageCreatedStrategy",
			"description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.recoveryInterval": {
			"name": "camel.source.endpoint.recoveryInterval",
			"description": "Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds. The default is 5000 ms, that is, 5 seconds.",
			"defaultValue": "5000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.synchronous": {
			"name": "camel.source.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.transferException": {
			"name": "camel.source.endpoint.transferException",
			"description": "If enabled and you are using Request Reply messaging (InOut) and an Exchange failed on the consumer side, then the caused Exception will be send back in response as a javax.jms.ObjectMessage. If the client is Camel, the returned Exception is rethrown. This allows you to use Camel JMS as a bridge in your routing - for example, using persistent queues to enable robust routing. Notice that if you also have transferExchange enabled, this option takes precedence. The caught exception is required to be serializable. The original Exception on the consumer side can be wrapped in an outer exception such as org.apache.camel.RuntimeCamelException when returned to the producer. Use this with caution as the data is using Java Object serialization and requires the received to be able to deserialize the data at Class level, which forces a strong coupling between the producers and consumer!",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.transacted": {
			"name": "camel.source.endpoint.transacted",
			"description": "Specifies whether to use transacted mode",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.connectionFactory": {
			"name": "camel.component.sjms2.connectionFactory",
			"description": "The connection factory to be use. A connection factory must be configured either on the component or endpoint.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.bridgeErrorHandler": {
			"name": "camel.component.sjms2.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.autowiredEnabled": {
			"name": "camel.component.sjms2.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.destinationCreationStrategy": {
			"name": "camel.component.sjms2.destinationCreationStrategy",
			"description": "To use a custom DestinationCreationStrategy.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.jmsKeyFormatStrategy": {
			"name": "camel.component.sjms2.jmsKeyFormatStrategy",
			"description": "Pluggable strategy for encoding and decoding JMS keys so they can be compliant with the JMS specification. Camel provides one implementation out of the box: default. The default strategy will safely marshal dots and hyphens (. and -). Can be used for JMS brokers which do not care whether JMS header keys contain illegal characters. You can provide your own implementation of the org.apache.camel.component.jms.JmsKeyFormatStrategy and refer to it using the # notation.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.messageCreatedStrategy": {
			"name": "camel.component.sjms2.messageCreatedStrategy",
			"description": "To use the given MessageCreatedStrategy which are invoked when Camel creates new instances of javax.jms.Message objects when Camel is sending a JMS message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.recoveryInterval": {
			"name": "camel.component.sjms2.recoveryInterval",
			"description": "Specifies the interval between recovery attempts, i.e. when a connection is being refreshed, in milliseconds. The default is 5000 ms, that is, 5 seconds.",
			"defaultValue": "5000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.replyToOnTimeoutMaxConcurrentConsumers": {
			"name": "camel.component.sjms2.replyToOnTimeoutMaxConcurrentConsumers",
			"description": "Specifies the maximum number of concurrent consumers for continue routing when timeout occurred when using request\/reply over JMS.",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.requestTimeoutCheckerInterval": {
			"name": "camel.component.sjms2.requestTimeoutCheckerInterval",
			"description": "Configures how often Camel should check for timed out Exchanges when doing request\/reply over JMS. By default Camel checks once per second. But if you must react faster when a timeout occurs, then you can lower this interval, to check more frequently. The timeout is determined by the option requestTimeout.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.sjms2.headerFilterStrategy": {
			"name": "camel.component.sjms2.headerFilterStrategy",
			"description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}