{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.couchdb.CamelCouchdbSinkConnector",
		"artifactId": "camel-couchdb-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-couchdb-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Consume changesets for inserts, updates and deletes in a CouchDB database, as well as get, save, update and delete documents from a CouchDB database."
	},
	"properties": {
		"camel.sink.path.protocol": {
			"name": "camel.sink.path.protocol",
			"description": "The protocol to use for communicating with the database. One of: [http] [https]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"http",
				"https"
			]
		},
		"camel.sink.path.hostname": {
			"name": "camel.sink.path.hostname",
			"description": "Hostname of the running couchdb instance",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.port": {
			"name": "camel.sink.path.port",
			"description": "Port number for the running couchdb instance",
			"defaultValue": "5984",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.path.database": {
			"name": "camel.sink.path.database",
			"description": "Name of the database to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.createDatabase": {
			"name": "camel.sink.endpoint.createDatabase",
			"description": "Creates the database if it does not already exist",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "Password for authenticated databases",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.username": {
			"name": "camel.sink.endpoint.username",
			"description": "Username in case of authenticated databases",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.couchdb.lazyStartProducer": {
			"name": "camel.component.couchdb.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.couchdb.autowiredEnabled": {
			"name": "camel.component.couchdb.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}