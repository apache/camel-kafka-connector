/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.azurecosmosdb;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelAzurecosmosdbSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_CONF = "camel.source.path.databaseName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_DOC = "The name of the Cosmos database that component should connect to. In case you are producing data and have createDatabaseIfNotExists=true, the component will automatically auto create a Cosmos database.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_CONF = "camel.source.path.containerName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_DOC = "The name of the Cosmos container that component should connect to. In case you are producing data and have createContainerIfNotExists=true, the component will automatically auto create a Cosmos container.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_CONF = "camel.source.endpoint.clientTelemetryEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_DOC = "Sets the flag to enable client telemetry which will periodically collect database operations aggregation statistics, system information like cpu/memory and send it to cosmos monitoring service, which will be helpful during debugging. DEFAULT value is false indicating this is opt in feature, by default no telemetry collection.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_CONF = "camel.source.endpoint.connectionSharingAcrossClientsEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DOC = "Enables connections sharing across multiple Cosmos Clients. The default is false. When you have multiple instances of Cosmos Client in the same JVM interacting to multiple Cosmos accounts, enabling this allows connection sharing in Direct mode if possible between instances of Cosmos Client. Please note, when setting this option, the connection configuration (e.g., socket timeout config, idle timeout config) of the first instantiated client will be used for all other client instances.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_CONF = "camel.source.endpoint.consistencyLevel";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_DOC = "Sets the consistency levels supported for Azure Cosmos DB client operations in the Azure Cosmos DB service. The requested ConsistencyLevel must match or be weaker than that provisioned for the database account. Consistency levels by order of strength are STRONG, BOUNDED_STALENESS, SESSION and EVENTUAL. Refer to consistency level documentation for additional details: https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels One of: [Strong] [BoundedStaleness] [Session] [Eventual] [ConsistentPrefix]";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_DEFAULT = "SESSION";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_CONF = "camel.source.endpoint.containerPartitionKeyPath";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_DOC = "Sets the container partition key path.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_CONF = "camel.source.endpoint.contentResponseOnWriteEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DOC = "Sets the boolean to only return the headers and status code in Cosmos DB response in case of Create, Update and Delete operations on CosmosItem. In Consumer, it is enabled by default because of the ChangeFeed in the consumer that needs this flag to be enabled and thus is shouldn't be overridden. In Producer, it advised to disable it since it reduces the network overhead";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_CONF = "camel.source.endpoint.cosmosAsyncClient";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_DOC = "Inject an external CosmosAsyncClient into the component which provides a client-side logical representation of the Azure Cosmos DB service. This asynchronous client is used to configure and execute requests against the service.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_CONF = "camel.source.endpoint.createContainerIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos container automatically in case it doesn't exist in Cosmos database";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_CONF = "camel.source.endpoint.createDatabaseIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos database automatically in case it doesn't exist in Cosmos account";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_CONF = "camel.source.endpoint.databaseEndpoint";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_DOC = "Sets the Azure Cosmos database endpoint the component will connect to.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_CONF = "camel.source.endpoint.multipleWriteRegionsEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_DOC = "Sets the flag to enable writes on any regions for geo-replicated database accounts in the Azure Cosmos DB service. When the value of this property is true, the SDK will direct write operations to available writable regions of geo-replicated database account. Writable regions are ordered by PreferredRegions property. Setting the property value to true has no effect until EnableMultipleWriteRegions in DatabaseAccount is also set to true. DEFAULT value is true indicating that writes are directed to available writable regions of geo-replicated database account.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_CONF = "camel.source.endpoint.preferredRegions";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_DOC = "Sets the preferred regions for geo-replicated database accounts. For example, East US as the preferred region. When EnableEndpointDiscovery is true and PreferredRegions is non-empty, the SDK will prefer to use the regions in the container in the order they are specified to perform operations.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_CONF = "camel.source.endpoint.readRequestsFallbackEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_DOC = "Sets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service. DEFAULT value is true. If this property is not set, the default is true for all Consistency Levels other than Bounded Staleness, The default is false for Bounded Staleness. 1. endpointDiscoveryEnabled is true 2. the Azure Cosmos DB account has more than one region";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_CONF = "camel.source.endpoint.throughputProperties";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_DOC = "Sets throughput of the resources in the Azure Cosmos DB service.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_CONF = "camel.source.endpoint.changeFeedProcessorOptions";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_DOC = "Sets the ChangeFeedProcessorOptions to be used. Unless specifically set the default values that will be used are: maximum items per page or FeedResponse: 100 lease renew interval: 17 seconds lease acquire interval: 13 seconds lease expiration interval: 60 seconds feed poll delay: 5 seconds maximum scale count: unlimited";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_CONF = "camel.source.endpoint.createLeaseContainerIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos lease container for the consumer automatically in case it doesn't exist in Cosmos database";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_CONF = "camel.source.endpoint.createLeaseDatabaseIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos lease database for the consumer automatically in case it doesn't exist in Cosmos account";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_CONF = "camel.source.endpoint.hostName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_DOC = "Sets the hostname. The host: a host is an application instance that uses the change feed processor to listen for changes. Multiple instances with the same lease configuration can run in parallel, but each instance should have a different instance name. If not specified, this will be a generated random hostname.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_CONF = "camel.source.endpoint.leaseContainerName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_DOC = "Sets the lease container which acts as a state storage and coordinates processing the change feed across multiple workers. The lease container can be stored in the same account as the monitored container or in a separate account. It will be auto created if createLeaseContainerIfNotExists is set to true.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_DEFAULT = "camel-lease";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_CONF = "camel.source.endpoint.leaseDatabaseName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_DOC = "Sets the lease database where the leaseContainerName will be stored. If it is not specified, this component will store the lease container in the same database that is specified in databaseName. It will be auto created if createLeaseDatabaseIfNotExists is set to true.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_CONF = "camel.source.endpoint.accountKey";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_DOC = "Sets either a master or readonly key used to perform authentication for accessing resource.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_CONF = "camel.component.azure-cosmosdb.clientTelemetryEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_DOC = "Sets the flag to enable client telemetry which will periodically collect database operations aggregation statistics, system information like cpu/memory and send it to cosmos monitoring service, which will be helpful during debugging. DEFAULT value is false indicating this is opt in feature, by default no telemetry collection.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_CONF = "camel.component.azure-cosmosdb.configuration";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_DOC = "The component configurations";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_CONF = "camel.component.azure-cosmosdb.connectionSharingAcrossClientsEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DOC = "Enables connections sharing across multiple Cosmos Clients. The default is false. When you have multiple instances of Cosmos Client in the same JVM interacting to multiple Cosmos accounts, enabling this allows connection sharing in Direct mode if possible between instances of Cosmos Client. Please note, when setting this option, the connection configuration (e.g., socket timeout config, idle timeout config) of the first instantiated client will be used for all other client instances.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_CONF = "camel.component.azure-cosmosdb.consistencyLevel";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_DOC = "Sets the consistency levels supported for Azure Cosmos DB client operations in the Azure Cosmos DB service. The requested ConsistencyLevel must match or be weaker than that provisioned for the database account. Consistency levels by order of strength are STRONG, BOUNDED_STALENESS, SESSION and EVENTUAL. Refer to consistency level documentation for additional details: https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels One of: [Strong] [BoundedStaleness] [Session] [Eventual] [ConsistentPrefix]";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_DEFAULT = "SESSION";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_CONF = "camel.component.azure-cosmosdb.containerPartitionKeyPath";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_DOC = "Sets the container partition key path.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_CONF = "camel.component.azure-cosmosdb.contentResponseOnWriteEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DOC = "Sets the boolean to only return the headers and status code in Cosmos DB response in case of Create, Update and Delete operations on CosmosItem. In Consumer, it is enabled by default because of the ChangeFeed in the consumer that needs this flag to be enabled and thus is shouldn't be overridden. In Producer, it advised to disable it since it reduces the network overhead";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_CONF = "camel.component.azure-cosmosdb.cosmosAsyncClient";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_DOC = "Inject an external CosmosAsyncClient into the component which provides a client-side logical representation of the Azure Cosmos DB service. This asynchronous client is used to configure and execute requests against the service.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_CONF = "camel.component.azure-cosmosdb.createContainerIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos container automatically in case it doesn't exist in Cosmos database";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_CONF = "camel.component.azure-cosmosdb.createDatabaseIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos database automatically in case it doesn't exist in Cosmos account";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_CONF = "camel.component.azure-cosmosdb.databaseEndpoint";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_DOC = "Sets the Azure Cosmos database endpoint the component will connect to.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_CONF = "camel.component.azure-cosmosdb.multipleWriteRegionsEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_DOC = "Sets the flag to enable writes on any regions for geo-replicated database accounts in the Azure Cosmos DB service. When the value of this property is true, the SDK will direct write operations to available writable regions of geo-replicated database account. Writable regions are ordered by PreferredRegions property. Setting the property value to true has no effect until EnableMultipleWriteRegions in DatabaseAccount is also set to true. DEFAULT value is true indicating that writes are directed to available writable regions of geo-replicated database account.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_CONF = "camel.component.azure-cosmosdb.preferredRegions";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_DOC = "Sets the preferred regions for geo-replicated database accounts. For example, East US as the preferred region. When EnableEndpointDiscovery is true and PreferredRegions is non-empty, the SDK will prefer to use the regions in the container in the order they are specified to perform operations.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_CONF = "camel.component.azure-cosmosdb.readRequestsFallbackEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_DOC = "Sets whether to allow for reads to go to multiple regions configured on an account of Azure Cosmos DB service. DEFAULT value is true. If this property is not set, the default is true for all Consistency Levels other than Bounded Staleness, The default is false for Bounded Staleness. 1. endpointDiscoveryEnabled is true 2. the Azure Cosmos DB account has more than one region";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_CONF = "camel.component.azure-cosmosdb.throughputProperties";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_DOC = "Sets throughput of the resources in the Azure Cosmos DB service.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.azure-cosmosdb.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_CONF = "camel.component.azure-cosmosdb.changeFeedProcessorOptions";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_DOC = "Sets the ChangeFeedProcessorOptions to be used. Unless specifically set the default values that will be used are: maximum items per page or FeedResponse: 100 lease renew interval: 17 seconds lease acquire interval: 13 seconds lease expiration interval: 60 seconds feed poll delay: 5 seconds maximum scale count: unlimited";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_CONF = "camel.component.azure-cosmosdb.createLeaseContainerIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos lease container for the consumer automatically in case it doesn't exist in Cosmos database";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_CONF = "camel.component.azure-cosmosdb.createLeaseDatabaseIfNotExists";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DOC = "Sets if the component should create Cosmos lease database for the consumer automatically in case it doesn't exist in Cosmos account";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_CONF = "camel.component.azure-cosmosdb.hostName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_DOC = "Sets the hostname. The host: a host is an application instance that uses the change feed processor to listen for changes. Multiple instances with the same lease configuration can run in parallel, but each instance should have a different instance name. If not specified, this will be a generated random hostname.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_CONF = "camel.component.azure-cosmosdb.leaseContainerName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_DOC = "Sets the lease container which acts as a state storage and coordinates processing the change feed across multiple workers. The lease container can be stored in the same account as the monitored container or in a separate account. It will be auto created if createLeaseContainerIfNotExists is set to true.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_DEFAULT = "camel-lease";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_CONF = "camel.component.azure-cosmosdb.leaseDatabaseName";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_DOC = "Sets the lease database where the leaseContainerName will be stored. If it is not specified, this component will store the lease container in the same database that is specified in databaseName. It will be auto created if createLeaseDatabaseIfNotExists is set to true.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.azure-cosmosdb.autowiredEnabled";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_CONF = "camel.component.azure-cosmosdb.accountKey";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_DOC = "Sets either a master or readonly key used to perform authentication for accessing resource.";
    public static final String CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_DEFAULT = null;

    public CamelAzurecosmosdbSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelAzurecosmosdbSourceConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_PATH_DATABASE_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_PATH_CONTAINER_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CLIENT_TELEMETRY_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONSISTENCY_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTAINER_PARTITION_KEY_PATH_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_COSMOS_ASYNC_CLIENT_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_CONTAINER_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_DATABASE_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_DATABASE_ENDPOINT_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_MULTIPLE_WRITE_REGIONS_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_PREFERRED_REGIONS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_READ_REQUESTS_FALLBACK_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_THROUGHPUT_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CHANGE_FEED_PROCESSOR_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_HOST_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_CONTAINER_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_LEASE_DATABASE_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_AZURECOSMOSDB_ENDPOINT_ACCOUNT_KEY_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CLIENT_TELEMETRY_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONNECTION_SHARING_ACROSS_CLIENTS_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONSISTENCY_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTAINER_PARTITION_KEY_PATH_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CONTENT_RESPONSE_ON_WRITE_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_COSMOS_ASYNC_CLIENT_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_CONTAINER_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_DATABASE_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_DATABASE_ENDPOINT_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_MULTIPLE_WRITE_REGIONS_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_PREFERRED_REGIONS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_READ_REQUESTS_FALLBACK_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_THROUGHPUT_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CHANGE_FEED_PROCESSOR_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_CONTAINER_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_CREATE_LEASE_DATABASE_IF_NOT_EXISTS_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_HOST_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_CONTAINER_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_LEASE_DATABASE_NAME_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_CONF, ConfigDef.Type.PASSWORD, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_AZURECOSMOSDB_COMPONENT_ACCOUNT_KEY_DOC);
        return conf;
    }
}