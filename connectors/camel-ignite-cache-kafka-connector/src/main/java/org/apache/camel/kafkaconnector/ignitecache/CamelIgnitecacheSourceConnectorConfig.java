/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.ignitecache;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelIgnitecacheSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_CONF = "camel.source.path.cacheName";
    public static final String CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_DOC = "The cache name.";
    public static final String CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_CONF = "camel.source.endpoint.propagateIncomingBodyIfNoReturnValue";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_DOC = "Sets whether to propagate the incoming body if the return type of the underlying Ignite operation is void.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_DEFAULT = true;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_CONF = "camel.source.endpoint.treatCollectionsAsCacheObjects";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_DOC = "Sets whether to treat Collections as cache objects or as Collections of items to insert/update/compute, etc.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_CONF = "camel.source.endpoint.autoUnsubscribe";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_DOC = "Whether auto unsubscribe is enabled in the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_AUTO_UNSUBSCRIBE";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_DEFAULT = true;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_CONF = "camel.source.endpoint.fireExistingQueryResults";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_DOC = "Whether to process existing results that match the query. Used on initialization of the Continuous Query Consumer.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_DEFAULT = false;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_CONF = "camel.source.endpoint.oneExchangePerUpdate";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_DOC = "Whether to pack each update in an individual Exchange, even if multiple updates are received in one batch. Only used by the Continuous Query Consumer.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_DEFAULT = true;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_CONF = "camel.source.endpoint.pageSize";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_DOC = "The page size. Only used by the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_PAGE_SIZE";
    public static final Integer CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_DEFAULT = 1;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_CONF = "camel.source.endpoint.query";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_DOC = "The Query to execute, only needed for operations that require it, and for the Continuous Query Consumer.";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_CONF = "camel.source.endpoint.remoteFilter";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_DOC = "The remote filter, only used by the Continuous Query Consumer.";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_CONF = "camel.source.endpoint.timeInterval";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_DOC = "The time interval for the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_TIME_INTERVAL";
    public static final Long CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_DEFAULT = 0L;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_CONF = "camel.component.ignite-cache.configurationResource";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_DOC = "The resource from where to load the configuration. It can be a: URL, String or InputStream type.";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONF = "camel.component.ignite-cache.ignite";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_DOC = "To use an existing Ignite instance.";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_CONF = "camel.component.ignite-cache.igniteConfiguration";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_DOC = "Allows the user to set a programmatic ignite configuration.";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.ignite-cache.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.ignite-cache.autowiredEnabled";
    public static final String CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;

    public CamelIgnitecacheSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelIgnitecacheSourceConnectorConfig(
            Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_IGNITECACHE_PATH_CACHE_NAME_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PROPAGATE_INCOMING_BODY_IF_NO_RETURN_VALUE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TREAT_COLLECTIONS_AS_CACHE_OBJECTS_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_AUTO_UNSUBSCRIBE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_FIRE_EXISTING_QUERY_RESULTS_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_ONE_EXCHANGE_PER_UPDATE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_PAGE_SIZE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_QUERY_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_REMOTE_FILTER_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_TIME_INTERVAL_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_COMPONENT_CONFIGURATION_RESOURCE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_COMPONENT_IGNITE_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_IGNITECACHE_COMPONENT_AUTOWIRED_ENABLED_DOC);
        return conf;
    }
}