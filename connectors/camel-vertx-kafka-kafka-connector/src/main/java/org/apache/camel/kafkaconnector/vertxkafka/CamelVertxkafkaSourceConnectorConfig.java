/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.vertxkafka;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelVertxkafkaSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_CONF = "camel.source.path.topic";
    public static final String CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_DOC = "Name of the topic to use. On the consumer you can use comma to separate multiple topics. A producer can only send a message to a single topic.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_CONF = "camel.source.endpoint.additionalProperties";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DOC = "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http://localhost:8811/avro";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_CONF = "camel.source.endpoint.bootstrapServers";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DOC = "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_CONF = "camel.source.endpoint.clientDnsLookup";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DOC = "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DEFAULT = "use_all_dns_ips";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_CONF = "camel.source.endpoint.clientId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_DOC = "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_CONF = "camel.source.endpoint.connectionsMaxIdleMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DOC = "Close idle connections after the number of milliseconds specified by this config.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DEFAULT = 540000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_CONF = "camel.source.endpoint.headerFilterStrategy";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DOC = "To use a custom HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_CONF = "camel.source.endpoint.interceptorClasses";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DOC = "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_CONF = "camel.source.endpoint.metadataMaxAgeMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DOC = "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_CONF = "camel.source.endpoint.metricReporters";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DOC = "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_CONF = "camel.source.endpoint.metricsNumSamples";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DOC = "The number of samples maintained to compute metrics.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DEFAULT = 2;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_CONF = "camel.source.endpoint.metricsRecordingLevel";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DOC = "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DEFAULT = "INFO";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_CONF = "camel.source.endpoint.metricsSampleWindowMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DOC = "The window of time a metrics sample is computed over.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DEFAULT = 30000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_CONF = "camel.source.endpoint.partitionId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_DOC = "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_CONF = "camel.source.endpoint.receiveBufferBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DOC = "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DEFAULT = 32768;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_CONF = "camel.source.endpoint.reconnectBackoffMaxMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DOC = "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_CONF = "camel.source.endpoint.reconnectBackoffMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DOC = "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DEFAULT = 50L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_CONF = "camel.source.endpoint.requestTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DOC = "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DEFAULT = 30000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_CONF = "camel.source.endpoint.retryBackoffMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DOC = "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DEFAULT = 100L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_CONF = "camel.source.endpoint.sendBufferBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DOC = "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DEFAULT = 131072;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF = "camel.source.endpoint.socketConnectionSetupTimeoutMaxMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 30000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF = "camel.source.endpoint.socketConnectionSetupTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_CONF = "camel.source.endpoint.allowAutoCreateTopics";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_DOC = "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using auto.create.topics.enable broker configuration. This configuration must be set to false when using brokers older than 0.11.0";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_CONF = "camel.source.endpoint.allowManualCommit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_DOC = "Whether to allow doing manual commits via org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit. If this option is enabled then an instance of org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit is stored on the Exchange message header, which allows end users to access this API and perform manual offset commits via the Kafka consumer. Note: To take full control of the offset committing, you may need to disable the Kafka Consumer default auto commit behavior by setting 'enableAutoCommit' to 'false'.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_CONF = "camel.source.endpoint.autoCommitIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_DOC = "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_DEFAULT = 5000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_CONF = "camel.source.endpoint.autoOffsetReset";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_DOC = "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): earliest: automatically reset the offset to the earliest offsetlatest: automatically reset the offset to the latest offsetnone: throw exception to the consumer if no previous offset is found for the consumer's groupanything else: throw exception to the consumer. One of: [latest] [earliest] [none]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_DEFAULT = "latest";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_CONF = "camel.source.endpoint.checkCrcs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_DOC = "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_CONF = "camel.source.endpoint.clientRack";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_DOC = "A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_CONF = "camel.source.endpoint.defaultApiTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_DOC = "Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a timeout parameter.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_DEFAULT = 60000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_CONF = "camel.source.endpoint.enableAutoCommit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_DOC = "If true the consumer's offset will be periodically committed in the background.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_CONF = "camel.source.endpoint.excludeInternalTopics";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_DOC = "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_CONF = "camel.source.endpoint.fetchMaxBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_DOC = "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_DEFAULT = 52428800;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_CONF = "camel.source.endpoint.fetchMaxWaitMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_DOC = "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_DEFAULT = 500;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_CONF = "camel.source.endpoint.fetchMinBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_DOC = "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_DEFAULT = 1;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_CONF = "camel.source.endpoint.groupId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_DOC = "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_CONF = "camel.source.endpoint.groupInstanceId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_DOC = "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_CONF = "camel.source.endpoint.heartbeatIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_DOC = "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_DEFAULT = 3000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_CONF = "camel.source.endpoint.isolationLevel";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_DOC = "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO One of: [read_committed] [read_uncommitted]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_DEFAULT = "read_uncommitted";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_CONF = "camel.source.endpoint.keyDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_DOC = "Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_CONF = "camel.source.endpoint.maxPartitionFetchBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_DOC = "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_DEFAULT = 1048576;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_CONF = "camel.source.endpoint.maxPollIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_DOC = "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null group.instance.id which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_DEFAULT = 300000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_CONF = "camel.source.endpoint.maxPollRecords";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_DOC = "The maximum number of records returned in a single call to poll(). Note, that max.poll.records does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_DEFAULT = 500;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_CONF = "camel.source.endpoint.partitionAssignmentStrategy";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_DOC = "A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used. Available options are:org.apache.kafka.clients.consumer.RangeAssignor: The default assignor, which works on a per-topic basis.org.apache.kafka.clients.consumer.RoundRobinAssignor: Assigns partitions to consumers in a round-robin fashion.org.apache.kafka.clients.consumer.StickyAssignor: Guarantees an assignment that is maximally balanced while preserving as many existing partition assignments as possible.org.apache.kafka.clients.consumer.CooperativeStickyAssignor: Follows the same StickyAssignor logic, but allows for cooperative rebalancing.Implementing the org.apache.kafka.clients.consumer.ConsumerPartitionAssignor interface allows you to plug in a custom assignment strategy.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_DEFAULT = "org.apache.kafka.clients.consumer.RangeAssignor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_CONF = "camel.source.endpoint.seekToOffset";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_DOC = "Set if KafkaConsumer will read from a particular offset on startup. This config will take precedence over seekTo config";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_CONF = "camel.source.endpoint.seekToPosition";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_DOC = "Set if KafkaConsumer will read from beginning or end on startup: beginning : read from beginning end : read from end. One of: [beginning] [end]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_CONF = "camel.source.endpoint.sessionTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_DOC = "The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_DEFAULT = 10000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_CONF = "camel.source.endpoint.valueDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_DOC = "Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF = "camel.source.endpoint.saslClientCallbackHandlerClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_CONF = "camel.source.endpoint.saslJaasConfig";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DOC = "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: loginModuleClass controlFlag (optionName=optionValue);. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_CONF = "camel.source.endpoint.saslKerberosKinitCmd";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DOC = "Kerberos kinit command path.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DEFAULT = "/usr/bin/kinit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF = "camel.source.endpoint.saslKerberosMinTimeBeforeRelogin";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC = "Login thread sleep time between refresh attempts.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT = 60000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_CONF = "camel.source.endpoint.saslKerberosServiceName";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DOC = "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF = "camel.source.endpoint.saslKerberosTicketRenewJitter";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC = "Percentage of random jitter added to the renewal time.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF = "camel.source.endpoint.saslKerberosTicketRenewWindowFactor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC = "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF = "camel.source.endpoint.saslLoginCallbackHandlerClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_CONF = "camel.source.endpoint.saslLoginClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DOC = "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF = "camel.source.endpoint.saslLoginRefreshBufferSeconds";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC = "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT = 300;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF = "camel.source.endpoint.saslLoginRefreshMinPeriodSeconds";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC = "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT = 60;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF = "camel.source.endpoint.saslLoginRefreshWindowFactor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC = "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF = "camel.source.endpoint.saslLoginRefreshWindowJitter";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC = "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_CONF = "camel.source.endpoint.saslMechanism";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DOC = "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DEFAULT = "GSSAPI";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_CONF = "camel.source.endpoint.securityProtocol";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DOC = "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DEFAULT = "PLAINTEXT";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_CONF = "camel.source.endpoint.securityProviders";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DOC = "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_CONF = "camel.source.endpoint.sslCipherSuites";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DOC = "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_CONF = "camel.source.endpoint.sslEnabledProtocols";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DOC = "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DEFAULT = "TLSv1.2,TLSv1.3";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF = "camel.source.endpoint.sslEndpointIdentificationAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC = "The endpoint identification algorithm to validate server hostname using server certificate.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT = "https";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_CONF = "camel.source.endpoint.sslEngineFactoryClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DOC = "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_CONF = "camel.source.endpoint.sslKeymanagerAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DOC = "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DEFAULT = "SunX509";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_CONF = "camel.source.endpoint.sslKeyPassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DOC = "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF = "camel.source.endpoint.sslKeystoreCertificateChain";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC = "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_CONF = "camel.source.endpoint.sslKeystoreKey";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DOC = "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_CONF = "camel.source.endpoint.sslKeystoreLocation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DOC = "The location of the key store file. This is optional for client and can be used for two-way authentication for client.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_CONF = "camel.source.endpoint.sslKeystorePassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DOC = "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_CONF = "camel.source.endpoint.sslKeystoreType";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DOC = "The file format of the key store file. This is optional for client.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_CONF = "camel.source.endpoint.sslProtocol";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DOC = "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DEFAULT = "TLSv1.2";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_CONF = "camel.source.endpoint.sslProvider";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DOC = "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF = "camel.source.endpoint.sslSecureRandomImplementation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC = "The SecureRandom PRNG implementation to use for SSL cryptography operations.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_CONF = "camel.source.endpoint.sslTrustmanagerAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DOC = "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT = "PKIX";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_CONF = "camel.source.endpoint.sslTruststoreCertificates";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DOC = "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_CONF = "camel.source.endpoint.sslTruststoreLocation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DOC = "The location of the trust store file.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_CONF = "camel.source.endpoint.sslTruststorePassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DOC = "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_CONF = "camel.source.endpoint.sslTruststoreType";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DOC = "The file format of the trust store file.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_CONF = "camel.component.vertx-kafka.additionalProperties";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DOC = "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http://localhost:8811/avro";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_CONF = "camel.component.vertx-kafka.bootstrapServers";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DOC = "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_CONF = "camel.component.vertx-kafka.clientDnsLookup";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DOC = "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DEFAULT = "use_all_dns_ips";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_CONF = "camel.component.vertx-kafka.clientId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_DOC = "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_CONF = "camel.component.vertx-kafka.configuration";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_DOC = "The component configurations";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_CONF = "camel.component.vertx-kafka.connectionsMaxIdleMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DOC = "Close idle connections after the number of milliseconds specified by this config.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DEFAULT = 540000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_CONF = "camel.component.vertx-kafka.headerFilterStrategy";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DOC = "To use a custom HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_CONF = "camel.component.vertx-kafka.interceptorClasses";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DOC = "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_CONF = "camel.component.vertx-kafka.metadataMaxAgeMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DOC = "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_CONF = "camel.component.vertx-kafka.metricReporters";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DOC = "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_CONF = "camel.component.vertx-kafka.metricsNumSamples";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DOC = "The number of samples maintained to compute metrics.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DEFAULT = 2;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_CONF = "camel.component.vertx-kafka.metricsRecordingLevel";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DOC = "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DEFAULT = "INFO";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_CONF = "camel.component.vertx-kafka.metricsSampleWindowMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DOC = "The window of time a metrics sample is computed over.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DEFAULT = 30000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_CONF = "camel.component.vertx-kafka.partitionId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_DOC = "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_CONF = "camel.component.vertx-kafka.receiveBufferBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DOC = "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DEFAULT = 32768;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_CONF = "camel.component.vertx-kafka.reconnectBackoffMaxMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DOC = "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DEFAULT = 1000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_CONF = "camel.component.vertx-kafka.reconnectBackoffMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DOC = "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DEFAULT = 50L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.requestTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DOC = "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DEFAULT = 30000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_CONF = "camel.component.vertx-kafka.retryBackoffMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DOC = "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DEFAULT = 100L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_CONF = "camel.component.vertx-kafka.sendBufferBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DOC = "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DEFAULT = 131072;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF = "camel.component.vertx-kafka.socketConnectionSetupTimeoutMaxMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 30000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.socketConnectionSetupTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_CONF = "camel.component.vertx-kafka.allowAutoCreateTopics";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_DOC = "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using auto.create.topics.enable broker configuration. This configuration must be set to false when using brokers older than 0.11.0";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_CONF = "camel.component.vertx-kafka.allowManualCommit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_DOC = "Whether to allow doing manual commits via org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit. If this option is enabled then an instance of org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit is stored on the Exchange message header, which allows end users to access this API and perform manual offset commits via the Kafka consumer. Note: To take full control of the offset committing, you may need to disable the Kafka Consumer default auto commit behavior by setting 'enableAutoCommit' to 'false'.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_CONF = "camel.component.vertx-kafka.autoCommitIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_DOC = "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_DEFAULT = 5000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_CONF = "camel.component.vertx-kafka.autoOffsetReset";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_DOC = "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): earliest: automatically reset the offset to the earliest offsetlatest: automatically reset the offset to the latest offsetnone: throw exception to the consumer if no previous offset is found for the consumer's groupanything else: throw exception to the consumer. One of: [latest] [earliest] [none]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_DEFAULT = "latest";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.vertx-kafka.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_CONF = "camel.component.vertx-kafka.checkCrcs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_DOC = "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_CONF = "camel.component.vertx-kafka.clientRack";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_DOC = "A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.defaultApiTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_DOC = "Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a timeout parameter.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_DEFAULT = 60000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_CONF = "camel.component.vertx-kafka.enableAutoCommit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_DOC = "If true the consumer's offset will be periodically committed in the background.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_CONF = "camel.component.vertx-kafka.excludeInternalTopics";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_DOC = "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_CONF = "camel.component.vertx-kafka.fetchMaxBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_DOC = "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_DEFAULT = 52428800;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_CONF = "camel.component.vertx-kafka.fetchMaxWaitMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_DOC = "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_DEFAULT = 500;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_CONF = "camel.component.vertx-kafka.fetchMinBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_DOC = "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_DEFAULT = 1;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_CONF = "camel.component.vertx-kafka.groupId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_DOC = "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_CONF = "camel.component.vertx-kafka.groupInstanceId";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_DOC = "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_CONF = "camel.component.vertx-kafka.heartbeatIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_DOC = "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_DEFAULT = 3000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_CONF = "camel.component.vertx-kafka.isolationLevel";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_DOC = "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO One of: [read_committed] [read_uncommitted]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_DEFAULT = "read_uncommitted";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_CONF = "camel.component.vertx-kafka.keyDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_DOC = "Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_CONF = "camel.component.vertx-kafka.maxPartitionFetchBytes";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_DOC = "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_DEFAULT = 1048576;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_CONF = "camel.component.vertx-kafka.maxPollIntervalMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_DOC = "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null group.instance.id which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_DEFAULT = 300000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_CONF = "camel.component.vertx-kafka.maxPollRecords";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_DOC = "The maximum number of records returned in a single call to poll(). Note, that max.poll.records does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_DEFAULT = 500;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_CONF = "camel.component.vertx-kafka.partitionAssignmentStrategy";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_DOC = "A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used. Available options are:org.apache.kafka.clients.consumer.RangeAssignor: The default assignor, which works on a per-topic basis.org.apache.kafka.clients.consumer.RoundRobinAssignor: Assigns partitions to consumers in a round-robin fashion.org.apache.kafka.clients.consumer.StickyAssignor: Guarantees an assignment that is maximally balanced while preserving as many existing partition assignments as possible.org.apache.kafka.clients.consumer.CooperativeStickyAssignor: Follows the same StickyAssignor logic, but allows for cooperative rebalancing.Implementing the org.apache.kafka.clients.consumer.ConsumerPartitionAssignor interface allows you to plug in a custom assignment strategy.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_DEFAULT = "org.apache.kafka.clients.consumer.RangeAssignor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_CONF = "camel.component.vertx-kafka.seekToOffset";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_DOC = "Set if KafkaConsumer will read from a particular offset on startup. This config will take precedence over seekTo config";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_CONF = "camel.component.vertx-kafka.seekToPosition";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_DOC = "Set if KafkaConsumer will read from beginning or end on startup: beginning : read from beginning end : read from end. One of: [beginning] [end]";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.sessionTimeoutMs";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_DOC = "The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.";
    public static final Integer CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_DEFAULT = 10000;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_CONF = "camel.component.vertx-kafka.valueDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_DOC = "Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringDeserializer";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_CONF = "camel.component.vertx-kafka.kafkaManualCommitFactory";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_DOC = "Factory to use for creating org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit instances. This allows to plugin a custom factory to create custom org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit instances in case special logic is needed when doing manual commits that deviates from the default implementation that comes out of the box.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.vertx-kafka.autowiredEnabled";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_CONF = "camel.component.vertx-kafka.vertx";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_DOC = "To use an existing vertx instead of creating a new instance";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_CONF = "camel.component.vertx-kafka.vertxKafkaClientFactory";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DOC = "Factory to use for creating io.vertx.kafka.client.consumer.KafkaConsumer and io.vertx.kafka.client.consumer.KafkaProducer instances. This allows to configure a custom factory to create custom KafkaConsumer and KafkaProducer instances with logic that extends the vanilla VertX Kafka clients.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_CONF = "camel.component.vertx-kafka.vertxOptions";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DOC = "To provide a custom set of vertx options for configuring vertx";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF = "camel.component.vertx-kafka.saslClientCallbackHandlerClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_CONF = "camel.component.vertx-kafka.saslJaasConfig";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DOC = "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: loginModuleClass controlFlag (optionName=optionValue);. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_CONF = "camel.component.vertx-kafka.saslKerberosKinitCmd";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DOC = "Kerberos kinit command path.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DEFAULT = "/usr/bin/kinit";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF = "camel.component.vertx-kafka.saslKerberosMinTimeBeforeRelogin";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC = "Login thread sleep time between refresh attempts.";
    public static final Long CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT = 60000L;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_CONF = "camel.component.vertx-kafka.saslKerberosServiceName";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DOC = "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF = "camel.component.vertx-kafka.saslKerberosTicketRenewJitter";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC = "Percentage of random jitter added to the renewal time.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF = "camel.component.vertx-kafka.saslKerberosTicketRenewWindowFactor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC = "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF = "camel.component.vertx-kafka.saslLoginCallbackHandlerClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_CONF = "camel.component.vertx-kafka.saslLoginClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DOC = "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF = "camel.component.vertx-kafka.saslLoginRefreshBufferSeconds";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC = "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT = 300;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF = "camel.component.vertx-kafka.saslLoginRefreshMinPeriodSeconds";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC = "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT = 60;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF = "camel.component.vertx-kafka.saslLoginRefreshWindowFactor";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC = "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF = "camel.component.vertx-kafka.saslLoginRefreshWindowJitter";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC = "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_CONF = "camel.component.vertx-kafka.saslMechanism";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DOC = "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DEFAULT = "GSSAPI";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_CONF = "camel.component.vertx-kafka.securityProtocol";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DOC = "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DEFAULT = "PLAINTEXT";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_CONF = "camel.component.vertx-kafka.securityProviders";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DOC = "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_CONF = "camel.component.vertx-kafka.sslCipherSuites";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DOC = "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_CONF = "camel.component.vertx-kafka.sslEnabledProtocols";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DOC = "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DEFAULT = "TLSv1.2,TLSv1.3";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF = "camel.component.vertx-kafka.sslEndpointIdentificationAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC = "The endpoint identification algorithm to validate server hostname using server certificate.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT = "https";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_CONF = "camel.component.vertx-kafka.sslEngineFactoryClass";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DOC = "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_CONF = "camel.component.vertx-kafka.sslKeymanagerAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DOC = "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DEFAULT = "SunX509";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_CONF = "camel.component.vertx-kafka.sslKeyPassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DOC = "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF = "camel.component.vertx-kafka.sslKeystoreCertificateChain";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC = "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_CONF = "camel.component.vertx-kafka.sslKeystoreKey";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DOC = "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_CONF = "camel.component.vertx-kafka.sslKeystoreLocation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DOC = "The location of the key store file. This is optional for client and can be used for two-way authentication for client.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_CONF = "camel.component.vertx-kafka.sslKeystorePassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DOC = "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_CONF = "camel.component.vertx-kafka.sslKeystoreType";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DOC = "The file format of the key store file. This is optional for client.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_CONF = "camel.component.vertx-kafka.sslProtocol";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DOC = "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DEFAULT = "TLSv1.2";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_CONF = "camel.component.vertx-kafka.sslProvider";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DOC = "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF = "camel.component.vertx-kafka.sslSecureRandomImplementation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC = "The SecureRandom PRNG implementation to use for SSL cryptography operations.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_CONF = "camel.component.vertx-kafka.sslTrustmanagerAlgorithm";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DOC = "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT = "PKIX";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_CONF = "camel.component.vertx-kafka.sslTruststoreCertificates";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DOC = "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_CONF = "camel.component.vertx-kafka.sslTruststoreLocation";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DOC = "The location of the trust store file.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_CONF = "camel.component.vertx-kafka.sslTruststorePassword";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DOC = "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_CONF = "camel.component.vertx-kafka.sslTruststoreType";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DOC = "The file format of the trust store file.";
    public static final String CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DEFAULT = "JKS";

    public CamelVertxkafkaSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelVertxkafkaSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_VERTXKAFKA_PATH_TOPIC_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_AUTO_CREATE_TOPICS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ALLOW_MANUAL_COMMIT_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_COMMIT_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_AUTO_OFFSET_RESET_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CHECK_CRCS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_CLIENT_RACK_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_DEFAULT_API_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ENABLE_AUTO_COMMIT_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCLUDE_INTERNAL_TOPICS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MAX_WAIT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_FETCH_MIN_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_GROUP_INSTANCE_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_HEARTBEAT_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_ISOLATION_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_KEY_DESERIALIZER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_PARTITION_FETCH_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_MAX_POLL_RECORDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_PARTITION_ASSIGNMENT_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_OFFSET_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SEEK_TO_POSITION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SESSION_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_VALUE_DESERIALIZER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONFIGURATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_AUTO_CREATE_TOPICS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ALLOW_MANUAL_COMMIT_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_COMMIT_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTO_OFFSET_RESET_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CHECK_CRCS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_CLIENT_RACK_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_DEFAULT_API_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ENABLE_AUTO_COMMIT_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_EXCLUDE_INTERNAL_TOPICS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MAX_WAIT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_FETCH_MIN_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_GROUP_INSTANCE_ID_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_HEARTBEAT_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_ISOLATION_LEVEL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KEY_DESERIALIZER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_PARTITION_FETCH_BYTES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_INTERVAL_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_MAX_POLL_RECORDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_PARTITION_ASSIGNMENT_STRATEGY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_OFFSET_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SEEK_TO_POSITION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SESSION_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VALUE_DESERIALIZER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_KAFKA_MANUAL_COMMIT_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF, ConfigDef.Type.LONG, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DOC);
        return conf;
    }
}