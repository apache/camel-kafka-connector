/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.vertxkafka;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelVertxkafkaSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_CONF = "camel.sink.path.topic";
    public static final String CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_DOC = "Name of the topic to use. On the consumer you can use comma to separate multiple topics. A producer can only send a message to a single topic.";
    public static final String CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_CONF = "camel.sink.endpoint.additionalProperties";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DOC = "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http://localhost:8811/avro";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_CONF = "camel.sink.endpoint.bootstrapServers";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DOC = "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_CONF = "camel.sink.endpoint.clientDnsLookup";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DOC = "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DEFAULT = "use_all_dns_ips";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_CONF = "camel.sink.endpoint.clientId";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_DOC = "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_CONF = "camel.sink.endpoint.connectionsMaxIdleMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DOC = "Close idle connections after the number of milliseconds specified by this config.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DEFAULT = 540000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_CONF = "camel.sink.endpoint.headerFilterStrategy";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DOC = "To use a custom HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_CONF = "camel.sink.endpoint.interceptorClasses";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DOC = "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_CONF = "camel.sink.endpoint.metadataMaxAgeMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DOC = "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_CONF = "camel.sink.endpoint.metricReporters";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DOC = "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_CONF = "camel.sink.endpoint.metricsNumSamples";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DOC = "The number of samples maintained to compute metrics.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DEFAULT = 2;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_CONF = "camel.sink.endpoint.metricsRecordingLevel";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DOC = "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DEFAULT = "INFO";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_CONF = "camel.sink.endpoint.metricsSampleWindowMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DOC = "The window of time a metrics sample is computed over.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DEFAULT = 30000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_CONF = "camel.sink.endpoint.partitionId";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_DOC = "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_CONF = "camel.sink.endpoint.receiveBufferBytes";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DOC = "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DEFAULT = 32768;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_CONF = "camel.sink.endpoint.reconnectBackoffMaxMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DOC = "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DEFAULT = 1000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_CONF = "camel.sink.endpoint.reconnectBackoffMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DOC = "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DEFAULT = 50L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_CONF = "camel.sink.endpoint.requestTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DOC = "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DEFAULT = 30000;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_CONF = "camel.sink.endpoint.retryBackoffMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DOC = "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DEFAULT = 100L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_CONF = "camel.sink.endpoint.sendBufferBytes";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DOC = "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DEFAULT = 131072;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF = "camel.sink.endpoint.socketConnectionSetupTimeoutMaxMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 127000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF = "camel.sink.endpoint.socketConnectionSetupTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_CONF = "camel.sink.endpoint.acks";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_DOC = "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting. One of: [all] [-1] [0] [1]";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_DEFAULT = "1";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_CONF = "camel.sink.endpoint.batchSize";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_DOC = "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size. Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent. A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_DEFAULT = 16384;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_CONF = "camel.sink.endpoint.bufferMemory";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_DOC = "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_DEFAULT = 33554432L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_CONF = "camel.sink.endpoint.compressionType";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_DOC = "The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none, gzip, snappy, lz4, or zstd. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_DEFAULT = "none";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_CONF = "camel.sink.endpoint.deliveryTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_DOC = "An upper bound on the time to report success or failure after a call to send() returns. This limits the total time that a record will be delayed prior to sending, the time to await acknowledgement from the broker (if expected), and the time allowed for retriable send failures. The producer may report failure to send a record earlier than this config if either an unrecoverable error is encountered, the retries have been exhausted, or the record is added to a batch which reached an earlier delivery expiration deadline. The value of this config should be greater than or equal to the sum of request.timeout.ms and linger.ms.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_DEFAULT = 120000;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_CONF = "camel.sink.endpoint.enableIdempotence";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_DOC = "When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5, retries to be greater than 0 and acks must be 'all'. If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a ConfigException will be thrown.";
    public static final Boolean CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_DEFAULT = false;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_CONF = "camel.sink.endpoint.keySerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_DOC = "Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_CONF = "camel.sink.endpoint.lingerMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_DOC = "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay&mdash;that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_DEFAULT = 0L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_CONF = "camel.sink.endpoint.maxBlockMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_DOC = "The configuration controls how long the KafkaProducer's send(), partitionsFor(), initTransactions(), sendOffsetsToTransaction(), commitTransaction() and abortTransaction() methods will block. For send() this timeout bounds the total time waiting for both metadata fetch and buffer allocation (blocking in the user-supplied serializers or partitioner is not counted against this timeout). For partitionsFor() this timeout bounds the time spent waiting for metadata if it is unavailable. The transaction-related methods always block, but may timeout if the transaction coordinator could not be discovered or did not respond within the timeout.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_DEFAULT = 60000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_CONF = "camel.sink.endpoint.maxInFlightRequestsPerConnection";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DOC = "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DEFAULT = 5;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_CONF = "camel.sink.endpoint.maxRequestSize";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_DOC = "The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum uncompressed record batch size. Note that the server has its own cap on the record batch size (after compression if compression is enabled) which may be different from this.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_DEFAULT = 1048576;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_CONF = "camel.sink.endpoint.metadataMaxIdleMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_DOC = "Controls how long the producer will cache metadata for a topic that's idle. If the elapsed time since a topic was last produced to exceeds the metadata idle duration, then the topic's metadata is forgotten and the next access to it will force a metadata fetch request.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_CONF = "camel.sink.endpoint.partitionerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_DOC = "Partitioner class that implements the org.apache.kafka.clients.producer.Partitioner interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_DEFAULT = "org.apache.kafka.clients.producer.internals.DefaultPartitioner";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_CONF = "camel.sink.endpoint.retries";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_DOC = "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first. Note additionally that produce requests will be failed before the number of retries has been exhausted if the timeout configured by delivery.timeout.ms expires first before successful acknowledgement. Users should generally prefer to leave this config unset and instead use delivery.timeout.ms to control retry behavior.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_DEFAULT = 2147483647;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_CONF = "camel.sink.endpoint.transactionalId";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_DOC = "The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided, then the producer is limited to idempotent delivery. If a TransactionalId is configured, enable.idempotence is implied. By default the TransactionId is not configured, which means transactions cannot be used. Note that, by default, transactions require a cluster of at least three brokers which is the recommended setting for production; for development you can change this, by adjusting broker setting transaction.state.log.replication.factor.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_CONF = "camel.sink.endpoint.transactionTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_DOC = "The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the transaction.max.timeout.ms setting in the broker, the request will fail with a InvalidTxnTimeoutException error.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_DEFAULT = 60000;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_CONF = "camel.sink.endpoint.valueSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_DOC = "Serializer class for value that implements the org.apache.kafka.common.serialization.Serializer interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF = "camel.sink.endpoint.saslClientCallbackHandlerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_CONF = "camel.sink.endpoint.saslJaasConfig";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DOC = "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: 'loginModuleClass controlFlag (optionName=optionValue);'. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_CONF = "camel.sink.endpoint.saslKerberosKinitCmd";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DOC = "Kerberos kinit command path.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DEFAULT = "/usr/bin/kinit";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF = "camel.sink.endpoint.saslKerberosMinTimeBeforeRelogin";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC = "Login thread sleep time between refresh attempts.";
    public static final Long CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT = 60000L;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_CONF = "camel.sink.endpoint.saslKerberosServiceName";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DOC = "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF = "camel.sink.endpoint.saslKerberosTicketRenewJitter";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC = "Percentage of random jitter added to the renewal time.";
    public static final Double CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF = "camel.sink.endpoint.saslKerberosTicketRenewWindowFactor";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC = "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.";
    public static final Double CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF = "camel.sink.endpoint.saslLoginCallbackHandlerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_CONF = "camel.sink.endpoint.saslLoginClass";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DOC = "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF = "camel.sink.endpoint.saslLoginRefreshBufferSeconds";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC = "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT = 300;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF = "camel.sink.endpoint.saslLoginRefreshMinPeriodSeconds";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC = "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT = 60;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF = "camel.sink.endpoint.saslLoginRefreshWindowFactor";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC = "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF = "camel.sink.endpoint.saslLoginRefreshWindowJitter";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC = "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_CONF = "camel.sink.endpoint.saslMechanism";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DOC = "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DEFAULT = "GSSAPI";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_CONF = "camel.sink.endpoint.securityProtocol";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DOC = "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DEFAULT = "PLAINTEXT";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_CONF = "camel.sink.endpoint.securityProviders";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DOC = "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_CONF = "camel.sink.endpoint.sslCipherSuites";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DOC = "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_CONF = "camel.sink.endpoint.sslEnabledProtocols";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DOC = "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DEFAULT = "TLSv1.2,TLSv1.3";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF = "camel.sink.endpoint.sslEndpointIdentificationAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC = "The endpoint identification algorithm to validate server hostname using server certificate.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT = "https";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_CONF = "camel.sink.endpoint.sslEngineFactoryClass";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DOC = "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_CONF = "camel.sink.endpoint.sslKeymanagerAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DOC = "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DEFAULT = "SunX509";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_CONF = "camel.sink.endpoint.sslKeyPassword";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DOC = "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF = "camel.sink.endpoint.sslKeystoreCertificateChain";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC = "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_CONF = "camel.sink.endpoint.sslKeystoreKey";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DOC = "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_CONF = "camel.sink.endpoint.sslKeystoreLocation";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DOC = "The location of the key store file. This is optional for client and can be used for two-way authentication for client.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_CONF = "camel.sink.endpoint.sslKeystorePassword";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DOC = "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_CONF = "camel.sink.endpoint.sslKeystoreType";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DOC = "The file format of the key store file. This is optional for client.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_CONF = "camel.sink.endpoint.sslProtocol";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DOC = "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DEFAULT = "TLSv1.2";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_CONF = "camel.sink.endpoint.sslProvider";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DOC = "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF = "camel.sink.endpoint.sslSecureRandomImplementation";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC = "The SecureRandom PRNG implementation to use for SSL cryptography operations.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_CONF = "camel.sink.endpoint.sslTrustmanagerAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DOC = "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT = "PKIX";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_CONF = "camel.sink.endpoint.sslTruststoreCertificates";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DOC = "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_CONF = "camel.sink.endpoint.sslTruststoreLocation";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DOC = "The location of the trust store file.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_CONF = "camel.sink.endpoint.sslTruststorePassword";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DOC = "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_CONF = "camel.sink.endpoint.sslTruststoreType";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DOC = "The file format of the trust store file.";
    public static final String CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_CONF = "camel.component.vertx-kafka.additionalProperties";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DOC = "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http://localhost:8811/avro";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_CONF = "camel.component.vertx-kafka.bootstrapServers";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DOC = "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_CONF = "camel.component.vertx-kafka.clientDnsLookup";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DOC = "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DEFAULT = "use_all_dns_ips";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_CONF = "camel.component.vertx-kafka.clientId";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_DOC = "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_CONF = "camel.component.vertx-kafka.configuration";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_DOC = "The component configurations";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_CONF = "camel.component.vertx-kafka.connectionsMaxIdleMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DOC = "Close idle connections after the number of milliseconds specified by this config.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DEFAULT = 540000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_CONF = "camel.component.vertx-kafka.headerFilterStrategy";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DOC = "To use a custom HeaderFilterStrategy to filter header to and from Camel message.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_CONF = "camel.component.vertx-kafka.interceptorClasses";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DOC = "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_CONF = "camel.component.vertx-kafka.metadataMaxAgeMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DOC = "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_CONF = "camel.component.vertx-kafka.metricReporters";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DOC = "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_CONF = "camel.component.vertx-kafka.metricsNumSamples";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DOC = "The number of samples maintained to compute metrics.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DEFAULT = 2;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_CONF = "camel.component.vertx-kafka.metricsRecordingLevel";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DOC = "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DEFAULT = "INFO";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_CONF = "camel.component.vertx-kafka.metricsSampleWindowMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DOC = "The window of time a metrics sample is computed over.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DEFAULT = 30000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_CONF = "camel.component.vertx-kafka.partitionId";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_DOC = "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_CONF = "camel.component.vertx-kafka.receiveBufferBytes";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DOC = "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DEFAULT = 32768;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_CONF = "camel.component.vertx-kafka.reconnectBackoffMaxMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DOC = "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DEFAULT = 1000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_CONF = "camel.component.vertx-kafka.reconnectBackoffMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DOC = "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DEFAULT = 50L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.requestTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DOC = "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DEFAULT = 30000;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_CONF = "camel.component.vertx-kafka.retryBackoffMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DOC = "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DEFAULT = 100L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_CONF = "camel.component.vertx-kafka.sendBufferBytes";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DOC = "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DEFAULT = 131072;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF = "camel.component.vertx-kafka.socketConnectionSetupTimeoutMaxMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC = "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT = 127000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.socketConnectionSetupTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC = "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT = 10000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_CONF = "camel.component.vertx-kafka.acks";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_DOC = "The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed: acks=0 If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent. No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures). The offset given back for each record will always be set to -1. acks=1 This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers. In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost. acks=all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive. This is the strongest available guarantee. This is equivalent to the acks=-1 setting. One of: [all] [-1] [0] [1]";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_DEFAULT = "1";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_CONF = "camel.component.vertx-kafka.batchSize";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_DOC = "The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server. This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size. Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent. A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely). A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_DEFAULT = 16384;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_CONF = "camel.component.vertx-kafka.bufferMemory";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_DOC = "The total bytes of memory the producer can use to buffer records waiting to be sent to the server. If records are sent faster than they can be delivered to the server the producer will block for max.block.ms after which it will throw an exception.This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering. Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_DEFAULT = 33554432L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_CONF = "camel.component.vertx-kafka.compressionType";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_DOC = "The compression type for all data generated by the producer. The default is none (i.e. no compression). Valid values are none, gzip, snappy, lz4, or zstd. Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_DEFAULT = "none";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.deliveryTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_DOC = "An upper bound on the time to report success or failure after a call to send() returns. This limits the total time that a record will be delayed prior to sending, the time to await acknowledgement from the broker (if expected), and the time allowed for retriable send failures. The producer may report failure to send a record earlier than this config if either an unrecoverable error is encountered, the retries have been exhausted, or the record is added to a batch which reached an earlier delivery expiration deadline. The value of this config should be greater than or equal to the sum of request.timeout.ms and linger.ms.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_DEFAULT = 120000;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_CONF = "camel.component.vertx-kafka.enableIdempotence";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_DOC = "When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream. If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream. Note that enabling idempotence requires max.in.flight.requests.per.connection to be less than or equal to 5, retries to be greater than 0 and acks must be 'all'. If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a ConfigException will be thrown.";
    public static final Boolean CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_DEFAULT = false;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_CONF = "camel.component.vertx-kafka.keySerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_DOC = "Serializer class for key that implements the org.apache.kafka.common.serialization.Serializer interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.vertx-kafka.lazyStartProducer";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    public static final Boolean CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_CONF = "camel.component.vertx-kafka.lingerMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_DOC = "The producer groups together any records that arrive in between request transmissions into a single batched request. Normally this occurs only under load when records arrive faster than they can be sent out. However in some circumstances the client may want to reduce the number of requests even under moderate load. This setting accomplishes this by adding a small amount of artificial delay&mdash;that is, rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together. This can be thought of as analogous to Nagle's algorithm in TCP. This setting gives the upper bound on the delay for batching: once we get batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up. This setting defaults to 0 (i.e. no delay). Setting linger.ms=5, for example, would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_DEFAULT = 0L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_CONF = "camel.component.vertx-kafka.maxBlockMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_DOC = "The configuration controls how long the KafkaProducer's send(), partitionsFor(), initTransactions(), sendOffsetsToTransaction(), commitTransaction() and abortTransaction() methods will block. For send() this timeout bounds the total time waiting for both metadata fetch and buffer allocation (blocking in the user-supplied serializers or partitioner is not counted against this timeout). For partitionsFor() this timeout bounds the time spent waiting for metadata if it is unavailable. The transaction-related methods always block, but may timeout if the transaction coordinator could not be discovered or did not respond within the timeout.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_DEFAULT = 60000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_CONF = "camel.component.vertx-kafka.maxInFlightRequestsPerConnection";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DOC = "The maximum number of unacknowledged requests the client will send on a single connection before blocking. Note that if this setting is set to be greater than 1 and there are failed sends, there is a risk of message re-ordering due to retries (i.e., if retries are enabled).";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DEFAULT = 5;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_CONF = "camel.component.vertx-kafka.maxRequestSize";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_DOC = "The maximum size of a request in bytes. This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests. This is also effectively a cap on the maximum uncompressed record batch size. Note that the server has its own cap on the record batch size (after compression if compression is enabled) which may be different from this.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_DEFAULT = 1048576;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_CONF = "camel.component.vertx-kafka.metadataMaxIdleMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_DOC = "Controls how long the producer will cache metadata for a topic that's idle. If the elapsed time since a topic was last produced to exceeds the metadata idle duration, then the topic's metadata is forgotten and the next access to it will force a metadata fetch request.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_DEFAULT = 300000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_CONF = "camel.component.vertx-kafka.partitionerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_DOC = "Partitioner class that implements the org.apache.kafka.clients.producer.Partitioner interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_DEFAULT = "org.apache.kafka.clients.producer.internals.DefaultPartitioner";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_CONF = "camel.component.vertx-kafka.retries";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_DOC = "Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error. Note that this retry is no different than if the client resent the record upon receiving the error. Allowing retries without setting max.in.flight.requests.per.connection to 1 will potentially change the ordering of records because if two batches are sent to a single partition, and the first fails and is retried but the second succeeds, then the records in the second batch may appear first. Note additionally that produce requests will be failed before the number of retries has been exhausted if the timeout configured by delivery.timeout.ms expires first before successful acknowledgement. Users should generally prefer to leave this config unset and instead use delivery.timeout.ms to control retry behavior.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_DEFAULT = 2147483647;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_CONF = "camel.component.vertx-kafka.transactionalId";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_DOC = "The TransactionalId to use for transactional delivery. This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions. If no TransactionalId is provided, then the producer is limited to idempotent delivery. If a TransactionalId is configured, enable.idempotence is implied. By default the TransactionId is not configured, which means transactions cannot be used. Note that, by default, transactions require a cluster of at least three brokers which is the recommended setting for production; for development you can change this, by adjusting broker setting transaction.state.log.replication.factor.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_CONF = "camel.component.vertx-kafka.transactionTimeoutMs";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_DOC = "The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.If this value is larger than the transaction.max.timeout.ms setting in the broker, the request will fail with a InvalidTxnTimeoutException error.";
    public static final Integer CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_DEFAULT = 60000;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_CONF = "camel.component.vertx-kafka.valueSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_DOC = "Serializer class for value that implements the org.apache.kafka.common.serialization.Serializer interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_DEFAULT = "org.apache.kafka.common.serialization.StringSerializer";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.vertx-kafka.autowiredEnabled";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_CONF = "camel.component.vertx-kafka.vertx";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_DOC = "To use an existing vertx instead of creating a new instance";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_CONF = "camel.component.vertx-kafka.vertxKafkaClientFactory";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DOC = "Factory to use for creating io.vertx.kafka.client.consumer.KafkaConsumer and io.vertx.kafka.client.consumer.KafkaProducer instances. This allows to configure a custom factory to create custom KafkaConsumer and KafkaProducer instances with logic that extends the vanilla VertX Kafka clients.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_CONF = "camel.component.vertx-kafka.vertxOptions";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DOC = "To provide a custom set of vertx options for configuring vertx";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF = "camel.component.vertx-kafka.saslClientCallbackHandlerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_CONF = "camel.component.vertx-kafka.saslJaasConfig";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DOC = "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: 'loginModuleClass controlFlag (optionName=optionValue);'. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_CONF = "camel.component.vertx-kafka.saslKerberosKinitCmd";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DOC = "Kerberos kinit command path.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DEFAULT = "/usr/bin/kinit";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF = "camel.component.vertx-kafka.saslKerberosMinTimeBeforeRelogin";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC = "Login thread sleep time between refresh attempts.";
    public static final Long CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT = 60000L;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_CONF = "camel.component.vertx-kafka.saslKerberosServiceName";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DOC = "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF = "camel.component.vertx-kafka.saslKerberosTicketRenewJitter";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC = "Percentage of random jitter added to the renewal time.";
    public static final Double CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF = "camel.component.vertx-kafka.saslKerberosTicketRenewWindowFactor";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC = "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.";
    public static final Double CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF = "camel.component.vertx-kafka.saslLoginCallbackHandlerClass";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC = "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_CONF = "camel.component.vertx-kafka.saslLoginClass";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DOC = "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF = "camel.component.vertx-kafka.saslLoginRefreshBufferSeconds";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC = "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT = 300;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF = "camel.component.vertx-kafka.saslLoginRefreshMinPeriodSeconds";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC = "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.";
    public static final Short CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT = 60;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF = "camel.component.vertx-kafka.saslLoginRefreshWindowFactor";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC = "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT = 0.8D;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF = "camel.component.vertx-kafka.saslLoginRefreshWindowJitter";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC = "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.";
    public static final Double CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT = 0.05D;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_CONF = "camel.component.vertx-kafka.saslMechanism";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DOC = "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DEFAULT = "GSSAPI";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_CONF = "camel.component.vertx-kafka.securityProtocol";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DOC = "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DEFAULT = "PLAINTEXT";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_CONF = "camel.component.vertx-kafka.securityProviders";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DOC = "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_CONF = "camel.component.vertx-kafka.sslCipherSuites";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DOC = "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_CONF = "camel.component.vertx-kafka.sslEnabledProtocols";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DOC = "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DEFAULT = "TLSv1.2,TLSv1.3";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF = "camel.component.vertx-kafka.sslEndpointIdentificationAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC = "The endpoint identification algorithm to validate server hostname using server certificate.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT = "https";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_CONF = "camel.component.vertx-kafka.sslEngineFactoryClass";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DOC = "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_CONF = "camel.component.vertx-kafka.sslKeymanagerAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DOC = "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DEFAULT = "SunX509";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_CONF = "camel.component.vertx-kafka.sslKeyPassword";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DOC = "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF = "camel.component.vertx-kafka.sslKeystoreCertificateChain";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC = "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_CONF = "camel.component.vertx-kafka.sslKeystoreKey";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DOC = "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_CONF = "camel.component.vertx-kafka.sslKeystoreLocation";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DOC = "The location of the key store file. This is optional for client and can be used for two-way authentication for client.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_CONF = "camel.component.vertx-kafka.sslKeystorePassword";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DOC = "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_CONF = "camel.component.vertx-kafka.sslKeystoreType";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DOC = "The file format of the key store file. This is optional for client.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DEFAULT = "JKS";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_CONF = "camel.component.vertx-kafka.sslProtocol";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DOC = "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DEFAULT = "TLSv1.2";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_CONF = "camel.component.vertx-kafka.sslProvider";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DOC = "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF = "camel.component.vertx-kafka.sslSecureRandomImplementation";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC = "The SecureRandom PRNG implementation to use for SSL cryptography operations.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_CONF = "camel.component.vertx-kafka.sslTrustmanagerAlgorithm";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DOC = "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT = "PKIX";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_CONF = "camel.component.vertx-kafka.sslTruststoreCertificates";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DOC = "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_CONF = "camel.component.vertx-kafka.sslTruststoreLocation";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DOC = "The location of the trust store file.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_CONF = "camel.component.vertx-kafka.sslTruststorePassword";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DOC = "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_CONF = "camel.component.vertx-kafka.sslTruststoreType";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DOC = "The file format of the trust store file.";
    public static final String CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DEFAULT = "JKS";

    public CamelVertxkafkaSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelVertxkafkaSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_VERTXKAFKA_PATH_TOPIC_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ADDITIONAL_PROPERTIES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BOOTSTRAP_SERVERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_DNS_LOOKUP_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CLIENT_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_CONNECTIONS_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_INTERCEPTOR_CLASSES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_AGE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRIC_REPORTERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_NUM_SAMPLES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_RECORDING_LEVEL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METRICS_SAMPLE_WINDOW_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITION_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECEIVE_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MAX_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RECONNECT_BACKOFF_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_REQUEST_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRY_BACKOFF_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SEND_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ACKS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BATCH_SIZE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_BUFFER_MEMORY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_COMPRESSION_TYPE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_DELIVERY_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_ENABLE_IDEMPOTENCE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_KEY_SERIALIZER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_LINGER_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_BLOCK_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_MAX_REQUEST_SIZE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_METADATA_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_PARTITIONER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_RETRIES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTIONAL_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_TRANSACTION_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_VALUE_SERIALIZER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_JAAS_CONFIG_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_KINIT_CMD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_SERVICE_NAME_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SASL_MECHANISM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SECURITY_PROVIDERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_CIPHER_SUITES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_ENGINE_FACTORY_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEY_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_KEY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_LOCATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_KEYSTORE_TYPE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_PROVIDER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_CERTIFICATES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_LOCATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_ENDPOINT_SSL_TRUSTSTORE_TYPE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_ADDITIONAL_PROPERTIES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_BOOTSTRAP_SERVERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_DNS_LOOKUP_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_CLIENT_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_CONFIGURATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_CONNECTIONS_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_HEADER_FILTER_STRATEGY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_INTERCEPTOR_CLASSES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_AGE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRIC_REPORTERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_NUM_SAMPLES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_RECORDING_LEVEL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METRICS_SAMPLE_WINDOW_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITION_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECEIVE_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MAX_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_RECONNECT_BACKOFF_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_REQUEST_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRY_BACKOFF_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SEND_BUFFER_BYTES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_ACKS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_BATCH_SIZE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_BUFFER_MEMORY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_COMPRESSION_TYPE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_DELIVERY_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_ENABLE_IDEMPOTENCE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_KEY_SERIALIZER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_LINGER_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_BLOCK_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_MAX_REQUEST_SIZE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_METADATA_MAX_IDLE_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_PARTITIONER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_RETRIES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTIONAL_ID_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_CONF, ConfigDef.Type.INT, CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_TRANSACTION_TIMEOUT_MS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_VALUE_SERIALIZER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_AUTOWIRED_ENABLED_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_KAFKA_CLIENT_FACTORY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_VERTX_OPTIONS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_JAAS_CONFIG_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_KINIT_CMD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_CONF, ConfigDef.Type.LONG, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_SERVICE_NAME_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_JITTER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_CONF, ConfigDef.Type.SHORT, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_CONF, ConfigDef.Type.DOUBLE, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SASL_MECHANISM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SECURITY_PROVIDERS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_CIPHER_SUITES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENABLED_PROTOCOLS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_ENGINE_FACTORY_CLASS_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEY_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_CERTIFICATE_CHAIN_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_KEY_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_LOCATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_KEYSTORE_TYPE_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_PROVIDER_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_SECURE_RANDOM_IMPLEMENTATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTMANAGER_ALGORITHM_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_CERTIFICATES_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_LOCATION_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_PASSWORD_DOC);
        conf.define(CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_VERTXKAFKA_COMPONENT_SSL_TRUSTSTORE_TYPE_DOC);
        return conf;
    }
}