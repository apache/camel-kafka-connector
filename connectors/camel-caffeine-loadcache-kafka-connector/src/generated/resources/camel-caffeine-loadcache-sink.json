{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.caffeineloadcache.CamelCaffeineloadcacheSinkConnector",
		"artifactId": "camel-caffeine-loadcache-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-caffeine-loadcache-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Perform caching operations using Caffeine Cache with an attached CacheLoader."
	},
	"properties": {
		"camel.sink.path.cacheName": {
			"name": "camel.sink.path.cacheName",
			"description": "the cache name",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.action": {
			"name": "camel.sink.endpoint.action",
			"description": "To configure the default cache action. If an action is set in the message header, then the operation from the header takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.cacheLoader": {
			"name": "camel.sink.endpoint.cacheLoader",
			"description": "To configure a CacheLoader in case of a LoadCache use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.createCacheIfNotExist": {
			"name": "camel.sink.endpoint.createCacheIfNotExist",
			"description": "Configure if a cache need to be created if it does exist or can't be pre-configured.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.evictionType": {
			"name": "camel.sink.endpoint.evictionType",
			"description": "Set the eviction Type for this cache One of: [size_based] [time_based]",
			"defaultValue": "\"SIZE_BASED\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"size_based",
				"time_based"
			]
		},
		"camel.sink.endpoint.expireAfterAccessTime": {
			"name": "camel.sink.endpoint.expireAfterAccessTime",
			"description": "Set the expire After Access Time in case of time based Eviction (in seconds)",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.expireAfterWriteTime": {
			"name": "camel.sink.endpoint.expireAfterWriteTime",
			"description": "Set the expire After Access Write in case of time based Eviction (in seconds)",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.initialCapacity": {
			"name": "camel.sink.endpoint.initialCapacity",
			"description": "Set the initial Capacity for the cache",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.key": {
			"name": "camel.sink.endpoint.key",
			"description": "To configure the default action key. If a key is set in the message header, then the key from the header takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.maximumSize": {
			"name": "camel.sink.endpoint.maximumSize",
			"description": "Set the maximum size for the cache",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.removalListener": {
			"name": "camel.sink.endpoint.removalListener",
			"description": "Set a specific removal Listener for the cache",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.statsCounter": {
			"name": "camel.sink.endpoint.statsCounter",
			"description": "Set a specific Stats Counter for the cache stats",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.statsEnabled": {
			"name": "camel.sink.endpoint.statsEnabled",
			"description": "To enable stats on the cache",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.keyType": {
			"name": "camel.sink.endpoint.keyType",
			"description": "The cache key type, default java.lang.Object",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.valueType": {
			"name": "camel.sink.endpoint.valueType",
			"description": "The cache value type, default java.lang.Object",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.action": {
			"name": "camel.component.caffeine-loadcache.action",
			"description": "To configure the default cache action. If an action is set in the message header, then the operation from the header takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.cacheLoader": {
			"name": "camel.component.caffeine-loadcache.cacheLoader",
			"description": "To configure a CacheLoader in case of a LoadCache use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.createCacheIfNotExist": {
			"name": "camel.component.caffeine-loadcache.createCacheIfNotExist",
			"description": "Configure if a cache need to be created if it does exist or can't be pre-configured.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.evictionType": {
			"name": "camel.component.caffeine-loadcache.evictionType",
			"description": "Set the eviction Type for this cache One of: [size_based] [time_based]",
			"defaultValue": "\"SIZE_BASED\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"size_based",
				"time_based"
			]
		},
		"camel.component.caffeine-loadcache.expireAfterAccessTime": {
			"name": "camel.component.caffeine-loadcache.expireAfterAccessTime",
			"description": "Set the expire After Access Time in case of time based Eviction (in seconds)",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.expireAfterWriteTime": {
			"name": "camel.component.caffeine-loadcache.expireAfterWriteTime",
			"description": "Set the expire After Access Write in case of time based Eviction (in seconds)",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.initialCapacity": {
			"name": "camel.component.caffeine-loadcache.initialCapacity",
			"description": "Set the initial Capacity for the cache",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.key": {
			"name": "camel.component.caffeine-loadcache.key",
			"description": "To configure the default action key. If a key is set in the message header, then the key from the header takes precedence.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.lazyStartProducer": {
			"name": "camel.component.caffeine-loadcache.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.maximumSize": {
			"name": "camel.component.caffeine-loadcache.maximumSize",
			"description": "Set the maximum size for the cache",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.removalListener": {
			"name": "camel.component.caffeine-loadcache.removalListener",
			"description": "Set a specific removal Listener for the cache",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.statsCounter": {
			"name": "camel.component.caffeine-loadcache.statsCounter",
			"description": "Set a specific Stats Counter for the cache stats",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.statsEnabled": {
			"name": "camel.component.caffeine-loadcache.statsEnabled",
			"description": "To enable stats on the cache",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.autowiredEnabled": {
			"name": "camel.component.caffeine-loadcache.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.configuration": {
			"name": "camel.component.caffeine-loadcache.configuration",
			"description": "Sets the global component configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.keyType": {
			"name": "camel.component.caffeine-loadcache.keyType",
			"description": "The cache key type, default java.lang.Object",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.caffeine-loadcache.valueType": {
			"name": "camel.component.caffeine-loadcache.valueType",
			"description": "The cache value type, default java.lang.Object",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}