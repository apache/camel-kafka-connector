{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.couchbase.CamelCouchbaseSinkConnector",
		"artifactId": "camel-couchbase-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-couchbase-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Query Couchbase Views with a poll strategy and\/or perform various operations against Couchbase databases."
	},
	"properties": {
		"camel.sink.path.protocol": {
			"name": "camel.sink.path.protocol",
			"description": "The protocol to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.hostname": {
			"name": "camel.sink.path.hostname",
			"description": "The hostname to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.port": {
			"name": "camel.sink.path.port",
			"description": "The port number to use",
			"defaultValue": "8091",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.bucket": {
			"name": "camel.sink.endpoint.bucket",
			"description": "The bucket to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.collection": {
			"name": "camel.sink.endpoint.collection",
			"description": "The collection to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.key": {
			"name": "camel.sink.endpoint.key",
			"description": "The key to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.scope": {
			"name": "camel.sink.endpoint.scope",
			"description": "The scope to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.autoStartIdForInserts": {
			"name": "camel.sink.endpoint.autoStartIdForInserts",
			"description": "Define if we want an autostart Id when we are doing an insert operation",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.operation": {
			"name": "camel.sink.endpoint.operation",
			"description": "The operation to do",
			"defaultValue": "\"CCB_PUT\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.persistTo": {
			"name": "camel.sink.endpoint.persistTo",
			"description": "Where to persist the data",
			"defaultValue": "0",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.producerRetryAttempts": {
			"name": "camel.sink.endpoint.producerRetryAttempts",
			"description": "Define the number of retry attempts",
			"defaultValue": "2",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.producerRetryPause": {
			"name": "camel.sink.endpoint.producerRetryPause",
			"description": "Define the retry pause between different attempts",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.replicateTo": {
			"name": "camel.sink.endpoint.replicateTo",
			"description": "Where to replicate the data",
			"defaultValue": "0",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.startingIdForInsertsFrom": {
			"name": "camel.sink.endpoint.startingIdForInsertsFrom",
			"description": "Define the starting Id where we are doing an insert operation",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.additionalHosts": {
			"name": "camel.sink.endpoint.additionalHosts",
			"description": "The additional hosts",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.connectTimeout": {
			"name": "camel.sink.endpoint.connectTimeout",
			"description": "Define the timeoutconnect in milliseconds",
			"defaultValue": "2500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.queryTimeout": {
			"name": "camel.sink.endpoint.queryTimeout",
			"description": "Define the operation timeout in milliseconds",
			"defaultValue": "2500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "The password to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.username": {
			"name": "camel.sink.endpoint.username",
			"description": "The username to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.couchbase.lazyStartProducer": {
			"name": "camel.component.couchbase.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.couchbase.autowiredEnabled": {
			"name": "camel.component.couchbase.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}