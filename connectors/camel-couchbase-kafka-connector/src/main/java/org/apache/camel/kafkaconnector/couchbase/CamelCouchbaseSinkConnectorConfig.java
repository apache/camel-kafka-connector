/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.couchbase;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSinkConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelCouchbaseSinkConnectorConfig
        extends
            CamelSinkConnectorConfig {

    public static final String CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_CONF = "camel.sink.path.protocol";
    private static final String CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_DOC = "The protocol to use";
    private static final String CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_CONF = "camel.sink.path.hostname";
    private static final String CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_DOC = "The hostname to use";
    private static final String CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_PATH_PORT_CONF = "camel.sink.path.port";
    private static final String CAMEL_SINK_COUCHBASE_PATH_PORT_DOC = "The port number to use";
    private static final Integer CAMEL_SINK_COUCHBASE_PATH_PORT_DEFAULT = 8091;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_CONF = "camel.sink.endpoint.bucket";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_DOC = "The bucket to use";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_CONF = "camel.sink.endpoint.key";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_DOC = "The key to use";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_CONF = "camel.sink.endpoint.autoStartIdForInserts";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_DOC = "Define if we want an autostart Id when we are doing an insert operation";
    private static final Boolean CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_CONF = "camel.sink.endpoint.lazyStartProducer";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_CONF = "camel.sink.endpoint.operation";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_DOC = "The operation to do";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_DEFAULT = "CCB_PUT";
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_CONF = "camel.sink.endpoint.persistTo";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_DOC = "Where to persist the data";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_DEFAULT = 0;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_CONF = "camel.sink.endpoint.producerRetryAttempts";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_DOC = "Define the number of retry attempts";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_DEFAULT = 2;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_CONF = "camel.sink.endpoint.producerRetryPause";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_DOC = "Define the retry pause between different attempts";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_DEFAULT = 5000;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_CONF = "camel.sink.endpoint.replicateTo";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_DOC = "Where to replicate the data";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_DEFAULT = 0;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_CONF = "camel.sink.endpoint.startingIdForInsertsFrom";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_DOC = "Define the starting Id where we are doing an insert operation";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_CONF = "camel.sink.endpoint.additionalHosts";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_DOC = "The additional hosts";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_CONF = "camel.sink.endpoint.basicPropertyBinding";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_DOC = "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_CONF = "camel.sink.endpoint.maxReconnectDelay";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_DOC = "Define the max delay during a reconnection";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_DEFAULT = 30000L;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_CONF = "camel.sink.endpoint.obsPollInterval";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_DOC = "Define the observation polling interval";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_DEFAULT = 400L;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_CONF = "camel.sink.endpoint.obsTimeout";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_DOC = "Define the observation timeout";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_DEFAULT = -1L;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_CONF = "camel.sink.endpoint.opQueueMaxBlockTime";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_DOC = "Define the max time an operation can be in queue blocked";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_DEFAULT = 10000L;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_CONF = "camel.sink.endpoint.opTimeOut";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_DOC = "Define the operation timeout";
    private static final Long CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_DEFAULT = 2500L;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_CONF = "camel.sink.endpoint.readBufferSize";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_DOC = "Define the buffer size";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_DEFAULT = 16384;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_CONF = "camel.sink.endpoint.shouldOptimize";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_DOC = "Define if we want to use optimization or not where possible";
    private static final Boolean CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_CONF = "camel.sink.endpoint.synchronous";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_DOC = "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).";
    private static final Boolean CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_CONF = "camel.sink.endpoint.timeoutExceptionThreshold";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_DOC = "Define the threshold for throwing a timeout Exception";
    private static final Integer CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_DEFAULT = 998;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_CONF = "camel.sink.endpoint.password";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_DOC = "The password to use";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_CONF = "camel.sink.endpoint.username";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_DOC = "The username to use";
    private static final String CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_DEFAULT = null;
    public static final String CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_CONF = "camel.component.couchbase.lazyStartProducer";
    private static final String CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_DOC = "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.";
    private static final Boolean CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_DEFAULT = false;
    public static final String CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_CONF = "camel.component.couchbase.basicPropertyBinding";
    private static final String CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_DOC = "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities";
    private static final Boolean CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT = false;

    public CamelCouchbaseSinkConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelCouchbaseSinkConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSinkConnectorConfig.conf());
        conf.define(CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_COUCHBASE_PATH_PROTOCOL_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SINK_COUCHBASE_PATH_HOSTNAME_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_PATH_PORT_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_PATH_PORT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_PATH_PORT_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_BUCKET_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_KEY_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_AUTO_START_ID_FOR_INSERTS_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_OPERATION_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_PERSIST_TO_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_ATTEMPTS_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_PRODUCER_RETRY_PAUSE_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_REPLICATE_TO_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_STARTING_ID_FOR_INSERTS_FROM_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_ADDITIONAL_HOSTS_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_BASIC_PROPERTY_BINDING_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_MAX_RECONNECT_DELAY_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_POLL_INTERVAL_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_OBS_TIMEOUT_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_OP_QUEUE_MAX_BLOCK_TIME_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_CONF, ConfigDef.Type.LONG, CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_OP_TIME_OUT_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_READ_BUFFER_SIZE_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_SHOULD_OPTIMIZE_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_SYNCHRONOUS_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_CONF, ConfigDef.Type.INT, CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_TIMEOUT_EXCEPTION_THRESHOLD_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_PASSWORD_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_CONF, ConfigDef.Type.STRING, CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_ENDPOINT_USERNAME_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_COMPONENT_LAZY_START_PRODUCER_DOC);
        conf.define(CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SINK_COUCHBASE_COMPONENT_BASIC_PROPERTY_BINDING_DOC);
        return conf;
    }
}