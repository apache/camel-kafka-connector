/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.kafkaconnector.rest;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.kafkaconnector.CamelSourceConnectorConfig;
import org.apache.kafka.common.config.ConfigDef;

@Generated("This class has been generated by camel-kafka-connector-generator-maven-plugin, remove this annotation to prevent it from being generated.")
public class CamelRestSourceConnectorConfig
        extends
            CamelSourceConnectorConfig {

    public static final String CAMEL_SOURCE_REST_PATH_METHOD_CONF = "camel.source.path.method";
    public static final String CAMEL_SOURCE_REST_PATH_METHOD_DOC = "HTTP method to use. One of: [get] [post] [put] [delete] [patch] [head] [trace] [connect] [options]";
    public static final String CAMEL_SOURCE_REST_PATH_METHOD_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_PATH_PATH_CONF = "camel.source.path.path";
    public static final String CAMEL_SOURCE_REST_PATH_PATH_DOC = "The base path";
    public static final String CAMEL_SOURCE_REST_PATH_PATH_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_CONF = "camel.source.path.uriTemplate";
    public static final String CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_DOC = "The uri template";
    public static final String CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_CONF = "camel.source.endpoint.consumes";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_DOC = "Media type such as: 'text/xml', or 'application/json' this REST service accepts. By default we accept all kinds of types.";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_CONF = "camel.source.endpoint.inType";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_DOC = "To declare the incoming POJO binding type as a FQN class name";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_CONF = "camel.source.endpoint.outType";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_DOC = "To declare the outgoing POJO binding type as a FQN class name";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_CONF = "camel.source.endpoint.produces";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_DOC = "Media type such as: 'text/xml', or 'application/json' this REST service returns.";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_CONF = "camel.source.endpoint.routeId";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_DOC = "Name of the route this REST services creates";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF = "camel.source.endpoint.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_CONF = "camel.source.endpoint.consumerComponentName";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_DOC = "The Camel Rest component to use for (consumer) the REST transport, such as jetty, servlet, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used.";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_CONF = "camel.source.endpoint.description";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_DOC = "Human description to document this REST service";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_CONF = "camel.source.endpoint.exceptionHandler";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_DOC = "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_CONF = "camel.source.endpoint.exchangePattern";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_DOC = "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]";
    public static final String CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_CONF = "camel.component.rest.bridgeErrorHandler";
    public static final String CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_DOC = "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.";
    public static final Boolean CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT = false;
    public static final String CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_CONF = "camel.component.rest.consumerComponentName";
    public static final String CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_DOC = "The Camel Rest component to use for (consumer) the REST transport, such as jetty, servlet, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestConsumerFactory is registered in the registry. If either one is found, then that is being used.";
    public static final String CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_DEFAULT = null;
    public static final String CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_CONF = "camel.component.rest.autowiredEnabled";
    public static final String CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_DOC = "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.";
    public static final Boolean CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_DEFAULT = true;

    public CamelRestSourceConnectorConfig(
            ConfigDef config,
            Map<String, String> parsedConfig) {
        super(config, parsedConfig);
    }

    public CamelRestSourceConnectorConfig(Map<String, String> parsedConfig) {
        this(conf(), parsedConfig);
    }

    public static ConfigDef conf() {
        ConfigDef conf = new ConfigDef(CamelSourceConnectorConfig.conf());
        conf.define(CAMEL_SOURCE_REST_PATH_METHOD_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_PATH_METHOD_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_REST_PATH_METHOD_DOC);
        conf.define(CAMEL_SOURCE_REST_PATH_PATH_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_PATH_PATH_DEFAULT, ConfigDef.Importance.HIGH, CAMEL_SOURCE_REST_PATH_PATH_DOC);
        conf.define(CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_PATH_URI_TEMPLATE_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_CONSUMES_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_IN_TYPE_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_OUT_TYPE_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_PRODUCES_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_ROUTE_ID_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_CONSUMER_COMPONENT_NAME_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_DESCRIPTION_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_EXCEPTION_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_ENDPOINT_EXCHANGE_PATTERN_DOC);
        conf.define(CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_COMPONENT_BRIDGE_ERROR_HANDLER_DOC);
        conf.define(CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_CONF, ConfigDef.Type.STRING, CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_COMPONENT_CONSUMER_COMPONENT_NAME_DOC);
        conf.define(CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_CONF, ConfigDef.Type.BOOLEAN, CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_DEFAULT, ConfigDef.Importance.MEDIUM, CAMEL_SOURCE_REST_COMPONENT_AUTOWIRED_ENABLED_DOC);
        return conf;
    }
}