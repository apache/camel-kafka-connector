{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.rest.CamelRestSinkConnector",
		"artifactId": "camel-rest-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-rest-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Expose REST services or call external REST services."
	},
	"properties": {
		"camel.sink.path.method": {
			"name": "camel.sink.path.method",
			"description": "HTTP method to use. One of: [get] [post] [put] [delete] [patch] [head] [trace] [connect] [options]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"get",
				"post",
				"put",
				"delete",
				"patch",
				"head",
				"trace",
				"connect",
				"options"
			]
		},
		"camel.sink.path.path": {
			"name": "camel.sink.path.path",
			"description": "The base path",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.uriTemplate": {
			"name": "camel.sink.path.uriTemplate",
			"description": "The uri template",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.consumes": {
			"name": "camel.sink.endpoint.consumes",
			"description": "Media type such as: 'text\/xml', or 'application\/json' this REST service accepts. By default we accept all kinds of types.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.inType": {
			"name": "camel.sink.endpoint.inType",
			"description": "To declare the incoming POJO binding type as a FQN class name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.outType": {
			"name": "camel.sink.endpoint.outType",
			"description": "To declare the outgoing POJO binding type as a FQN class name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.produces": {
			"name": "camel.sink.endpoint.produces",
			"description": "Media type such as: 'text\/xml', or 'application\/json' this REST service returns.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.routeId": {
			"name": "camel.sink.endpoint.routeId",
			"description": "Name of the route this REST services creates",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.apiDoc": {
			"name": "camel.sink.endpoint.apiDoc",
			"description": "The openapi api doc resource to use. The resource is loaded from classpath by default and must be in JSON format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.bindingMode": {
			"name": "camel.sink.endpoint.bindingMode",
			"description": "Configures the binding mode for the producer. If set to anything other than 'off' the producer will try to convert the body of the incoming message from inType to the json or xml, and the response from json or xml to outType. One of: [auto] [off] [json] [xml] [json_xml]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"auto",
				"off",
				"json",
				"xml",
				"json_xml"
			]
		},
		"camel.sink.endpoint.host": {
			"name": "camel.sink.endpoint.host",
			"description": "Host and port of HTTP service to use (override host in openapi schema)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.producerComponentName": {
			"name": "camel.sink.endpoint.producerComponentName",
			"description": "The Camel Rest component to use for (producer) the REST transport, such as http, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestProducerFactory is registered in the registry. If either one is found, then that is being used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.queryParameters": {
			"name": "camel.sink.endpoint.queryParameters",
			"description": "Query parameters for the HTTP service to call. The query parameters can contain multiple parameters separated by ampersand such such as foo=123&bar=456.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.rest.apiDoc": {
			"name": "camel.component.rest.apiDoc",
			"description": "The swagger api doc resource to use. The resource is loaded from classpath by default and must be in JSON format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.rest.componentName": {
			"name": "camel.component.rest.componentName",
			"description": "The Camel Rest component to use for (producer) the REST transport, such as http, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestProducerFactory is registered in the registry. If either one is found, then that is being used.",
			"priority": "LOW",
			"required": "false"
		},
		"camel.component.rest.host": {
			"name": "camel.component.rest.host",
			"description": "Host and port of HTTP service to use (override host in swagger schema)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.rest.lazyStartProducer": {
			"name": "camel.component.rest.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.rest.producerComponentName": {
			"name": "camel.component.rest.producerComponentName",
			"description": "The Camel Rest component to use for (producer) the REST transport, such as http, undertow. If no component has been explicit configured, then Camel will lookup if there is a Camel component that integrates with the Rest DSL, or if a org.apache.camel.spi.RestProducerFactory is registered in the registry. If either one is found, then that is being used.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.rest.autowiredEnabled": {
			"name": "camel.component.rest.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}