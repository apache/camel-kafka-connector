{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.optaplanner.CamelOptaplannerSourceConnector",
		"artifactId": "camel-optaplanner-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-optaplanner-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Solve planning problems with OptaPlanner."
	},
	"properties": {
		"camel.source.path.configFile": {
			"name": "camel.source.path.configFile",
			"description": "Specifies the location to the solver file. If useSolverManager=FALSE, Camel uses this file and create the Solver. If useSolverManager=TRUE and SolverManager is set in the header {OptaPlannerConstants.SOLVER_MANAGER} : this file is ignored by Camel usage of SolverManager. SolverManager can be injected by DI in Quarkus or Spring.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.problemId": {
			"name": "camel.source.endpoint.problemId",
			"description": "In case of using SolverManager : the problem id",
			"defaultValue": "\"1L\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.solverId": {
			"name": "camel.source.endpoint.solverId",
			"description": "Specifies the solverId to user for the solver instance key",
			"defaultValue": "\"DEFAULT_SOLVER\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.useSolverManager": {
			"name": "camel.source.endpoint.useSolverManager",
			"description": "use SolverManager instead of XML file config. Use this mode on Quarkus app.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.optaplanner.bridgeErrorHandler": {
			"name": "camel.component.optaplanner.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.optaplanner.autowiredEnabled": {
			"name": "camel.component.optaplanner.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}