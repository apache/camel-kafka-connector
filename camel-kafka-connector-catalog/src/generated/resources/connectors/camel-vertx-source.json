{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.vertx.CamelVertxSourceConnector",
		"artifactId": "camel-vertx-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-vertx-source",
		"type": "source",
		"version": "0.7.0-SNAPSHOT",
		"description": "Send and receive messages to\/from Vert.x Event Bus."
	},
	"properties": {
		"camel.source.path.address": {
			"name": "camel.source.path.address",
			"description": "Sets the event bus address used to communicate",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.pubSub": {
			"name": "camel.source.endpoint.pubSub",
			"description": "Whether to use publish\/subscribe instead of point to point when sending to a vertx endpoint.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.basicPropertyBinding": {
			"name": "camel.source.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.synchronous": {
			"name": "camel.source.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.host": {
			"name": "camel.component.vertx.host",
			"description": "Hostname for creating an embedded clustered EventBus",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.port": {
			"name": "camel.component.vertx.port",
			"description": "Port for creating an embedded clustered EventBus",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.timeout": {
			"name": "camel.component.vertx.timeout",
			"description": "Timeout in seconds to wait for clustered Vertx EventBus to be ready. The default value is 60.",
			"defaultValue": "60",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.vertx": {
			"name": "camel.component.vertx.vertx",
			"description": "To use the given vertx EventBus instead of creating a new embedded EventBus",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.vertxOptions": {
			"name": "camel.component.vertx.vertxOptions",
			"description": "Options to use for creating vertx",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.bridgeErrorHandler": {
			"name": "camel.component.vertx.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx.basicPropertyBinding": {
			"name": "camel.component.vertx.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		},
		"camel.component.vertx.vertxFactory": {
			"name": "camel.component.vertx.vertxFactory",
			"description": "To use a custom VertxFactory implementation",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}