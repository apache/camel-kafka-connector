{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.undertow.CamelUndertowSourceConnector",
		"artifactId": "camel-undertow-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-undertow-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Expose HTTP and WebSocket endpoints and access external HTTP\/WebSocket servers."
	},
	"properties": {
		"camel.source.path.httpURI": {
			"name": "camel.source.path.httpURI",
			"description": "The url of the HTTP endpoint to use.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.useStreaming": {
			"name": "camel.source.endpoint.useStreaming",
			"description": "For HTTP endpoint: if true, text and binary messages will be wrapped as java.io.InputStream before they are passed to an Exchange; otherwise they will be passed as byte. For WebSocket endpoint: if true, text and binary messages will be wrapped as java.io.Reader and java.io.InputStream respectively before they are passed to an Exchange; otherwise they will be passed as String and byte respectively.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.accessLog": {
			"name": "camel.source.endpoint.accessLog",
			"description": "Whether or not the consumer should write access log",
			"defaultValue": "\"false\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.httpMethodRestrict": {
			"name": "camel.source.endpoint.httpMethodRestrict",
			"description": "Used to only allow consuming if the HttpMethod matches, such as GET\/POST\/PUT etc. Multiple methods can be specified separated by comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.matchOnUriPrefix": {
			"name": "camel.source.endpoint.matchOnUriPrefix",
			"description": "Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found.",
			"defaultValue": "\"false\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.muteException": {
			"name": "camel.source.endpoint.muteException",
			"description": "If enabled and an Exchange failed processing on the consumer side the response's body won't contain the exception's stack trace.",
			"defaultValue": "\"false\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.optionsEnabled": {
			"name": "camel.source.endpoint.optionsEnabled",
			"description": "Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.handlers": {
			"name": "camel.source.endpoint.handlers",
			"description": "Specifies a comma-delimited set of io.undertow.server.HttpHandler instances to lookup in your Registry. These handlers are added to the Undertow handler chain (for example, to add security). Important: You can not use different handlers with different Undertow endpoints using the same port number. The handlers is associated to the port number. If you need different handlers, then use different port numbers.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.accessLogReceiver": {
			"name": "camel.source.endpoint.accessLogReceiver",
			"description": "Which Undertow AccessLogReceiver should be used Will use JBossLoggingAccessLogReceiver if not specified",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.headerFilterStrategy": {
			"name": "camel.source.endpoint.headerFilterStrategy",
			"description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.undertowHttpBinding": {
			"name": "camel.source.endpoint.undertowHttpBinding",
			"description": "To use a custom UndertowHttpBinding to control the mapping between Camel message and undertow.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.allowedRoles": {
			"name": "camel.source.endpoint.allowedRoles",
			"description": "Configuration used by UndertowSecurityProvider. Comma separated list of allowed roles.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityConfiguration": {
			"name": "camel.source.endpoint.securityConfiguration",
			"description": "OConfiguration used by UndertowSecurityProvider. Security configuration object for use from UndertowSecurityProvider. Configuration is UndertowSecurityProvider specific. Each provider decides whether accepts configuration.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityProvider": {
			"name": "camel.source.endpoint.securityProvider",
			"description": "Security provider allows plug in the provider, which will be used to secure requests. SPI approach could be used too (endpoint then finds security provider using SPI).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslContextParameters": {
			"name": "camel.source.endpoint.sslContextParameters",
			"description": "To configure security using SSLContextParameters",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fireWebSocketChannelEvents": {
			"name": "camel.source.endpoint.fireWebSocketChannelEvents",
			"description": "if true, the consumer will post notifications to the route when a new WebSocket peer connects, disconnects, etc. See UndertowConstants.EVENT_TYPE and EventType.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.bridgeErrorHandler": {
			"name": "camel.component.undertow.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.muteException": {
			"name": "camel.component.undertow.muteException",
			"description": "If enabled and an Exchange failed processing on the consumer side the response's body won't contain the exception's stack trace.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.autowiredEnabled": {
			"name": "camel.component.undertow.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.hostOptions": {
			"name": "camel.component.undertow.hostOptions",
			"description": "To configure common options, such as thread pools",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.undertowHttpBinding": {
			"name": "camel.component.undertow.undertowHttpBinding",
			"description": "To use a custom HttpBinding to control the mapping between Camel message and HttpClient.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.allowedRoles": {
			"name": "camel.component.undertow.allowedRoles",
			"description": "Configuration used by UndertowSecurityProvider. Comma separated list of allowed roles.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.securityConfiguration": {
			"name": "camel.component.undertow.securityConfiguration",
			"description": "Configuration used by UndertowSecurityProvider. Security configuration object for use from UndertowSecurityProvider. Configuration is UndertowSecurityProvider specific. Each provider decides, whether it accepts configuration.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.securityProvider": {
			"name": "camel.component.undertow.securityProvider",
			"description": "Security provider allows plug in the provider, which will be used to secure requests. SPI approach could be used too (component then finds security provider using SPI).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.sslContextParameters": {
			"name": "camel.component.undertow.sslContextParameters",
			"description": "To configure security using SSLContextParameters",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.undertow.useGlobalSslContextParameters": {
			"name": "camel.component.undertow.useGlobalSslContextParameters",
			"description": "Enable usage of global SSL context parameters.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}