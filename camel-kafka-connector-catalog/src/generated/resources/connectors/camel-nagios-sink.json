{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.nagios.CamelNagiosSinkConnector",
		"artifactId": "camel-nagios-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-nagios-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Send passive checks to Nagios using JSendNSCA."
	},
	"properties": {
		"camel.sink.path.host": {
			"name": "camel.sink.path.host",
			"description": "This is the address of the Nagios host where checks should be send.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.port": {
			"name": "camel.sink.path.port",
			"description": "The port number of the host.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.connectionTimeout": {
			"name": "camel.sink.endpoint.connectionTimeout",
			"description": "Connection timeout in millis.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.sendSync": {
			"name": "camel.sink.endpoint.sendSync",
			"description": "Whether or not to use synchronous when sending a passive check. Setting it to false will allow Camel to continue routing the message and the passive check message will be send asynchronously.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.timeout": {
			"name": "camel.sink.endpoint.timeout",
			"description": "Sending timeout in millis.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.encryption": {
			"name": "camel.sink.endpoint.encryption",
			"description": "To specify an encryption method. One of: [NONE] [TRIPLE_DES] [XOR] [RIJNDAEL128] [RIJNDAEL192] [RIJNDAEL256] [BLOWFISH]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NONE",
				"TRIPLE_DES",
				"XOR",
				"RIJNDAEL128",
				"RIJNDAEL192",
				"RIJNDAEL256",
				"BLOWFISH"
			]
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "Password to be authenticated when sending checks to Nagios.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.connectionTimeout": {
			"name": "camel.component.nagios.connectionTimeout",
			"description": "Connection timeout in millis.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.lazyStartProducer": {
			"name": "camel.component.nagios.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.timeout": {
			"name": "camel.component.nagios.timeout",
			"description": "Sending timeout in millis.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.autowiredEnabled": {
			"name": "camel.component.nagios.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.configuration": {
			"name": "camel.component.nagios.configuration",
			"description": "To use a shared NagiosConfiguration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.nagios.encryption": {
			"name": "camel.component.nagios.encryption",
			"description": "To specify an encryption method. One of: [NONE] [TRIPLE_DES] [XOR] [RIJNDAEL128] [RIJNDAEL192] [RIJNDAEL256] [BLOWFISH]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NONE",
				"TRIPLE_DES",
				"XOR",
				"RIJNDAEL128",
				"RIJNDAEL192",
				"RIJNDAEL256",
				"BLOWFISH"
			]
		},
		"camel.component.nagios.password": {
			"name": "camel.component.nagios.password",
			"description": "Password to be authenticated when sending checks to Nagios.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}