{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.springws.CamelSpringwsSinkConnector",
		"artifactId": "camel-spring-ws-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-spring-ws-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Access external web services as a client or expose your own web services."
	},
	"properties": {
		"camel.sink.path.webServiceEndpointUri": {
			"name": "camel.sink.path.webServiceEndpointUri",
			"description": "The default Web Service endpoint uri to use for the producer.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.messageFilter": {
			"name": "camel.sink.endpoint.messageFilter",
			"description": "Option to provide a custom MessageFilter. For example when you want to process your headers or attachments by your own.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.messageIdStrategy": {
			"name": "camel.sink.endpoint.messageIdStrategy",
			"description": "Option to provide a custom MessageIdStrategy to control generation of WS-Addressing unique message ids.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.allowResponseAttachmentOverride": {
			"name": "camel.sink.endpoint.allowResponseAttachmentOverride",
			"description": "Option to override soap response attachments in in\/out exchange with attachments from the actual service layer. If the invoked service appends or rewrites the soap attachments this option when set to true, allows the modified soap attachments to be overwritten in in\/out message attachments",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.allowResponseHeaderOverride": {
			"name": "camel.sink.endpoint.allowResponseHeaderOverride",
			"description": "Option to override soap response header in in\/out exchange with header info from the actual service layer. If the invoked service appends or rewrites the soap header this option when set to true, allows the modified soap header to be overwritten in in\/out message headers",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.faultAction": {
			"name": "camel.sink.endpoint.faultAction",
			"description": "Signifies the value for the faultAction response WS-Addressing Fault Action header that is provided by the method. See org.springframework.ws.soap.addressing.server.annotation.Action annotation for more details.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.faultTo": {
			"name": "camel.sink.endpoint.faultTo",
			"description": "Signifies the value for the faultAction response WS-Addressing FaultTo header that is provided by the method. See org.springframework.ws.soap.addressing.server.annotation.Action annotation for more details.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.messageFactory": {
			"name": "camel.sink.endpoint.messageFactory",
			"description": "Option to provide a custom WebServiceMessageFactory. For example when you want Apache Axiom to handle web service messages instead of SAAJ.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.messageSender": {
			"name": "camel.sink.endpoint.messageSender",
			"description": "Option to provide a custom WebServiceMessageSender. For example to perform authentication or use alternative transports",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.outputAction": {
			"name": "camel.sink.endpoint.outputAction",
			"description": "Signifies the value for the response WS-Addressing Action header that is provided by the method. See org.springframework.ws.soap.addressing.server.annotation.Action annotation for more details.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.replyTo": {
			"name": "camel.sink.endpoint.replyTo",
			"description": "Signifies the value for the replyTo response WS-Addressing ReplyTo header that is provided by the method. See org.springframework.ws.soap.addressing.server.annotation.Action annotation for more details.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.soapAction": {
			"name": "camel.sink.endpoint.soapAction",
			"description": "SOAP action to include inside a SOAP request when accessing remote web services",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.timeout": {
			"name": "camel.sink.endpoint.timeout",
			"description": "Sets the socket read timeout (in milliseconds) while invoking a webservice using the producer, see URLConnection.setReadTimeout() and CommonsHttpMessageSender.setReadTimeout(). This option works when using the built-in message sender implementations: CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of these implementations will be used by default for HTTP based services unless you customize the Spring WS configuration options supplied to the component. If you are using a non-standard sender, it is assumed that you will handle your own timeout configuration. The built-in message sender HttpComponentsMessageSender is considered instead of CommonsHttpMessageSender which has been deprecated, see HttpComponentsMessageSender.setReadTimeout().",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.webServiceTemplate": {
			"name": "camel.sink.endpoint.webServiceTemplate",
			"description": "Option to provide a custom WebServiceTemplate. This allows for full control over client-side web services handling; like adding a custom interceptor or specifying a fault resolver, message sender or message factory.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.wsAddressingAction": {
			"name": "camel.sink.endpoint.wsAddressingAction",
			"description": "WS-Addressing 1.0 action header to include when accessing web services. The To header is set to the address of the web service as specified in the endpoint URI (default Spring-WS behavior).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.sslContextParameters": {
			"name": "camel.sink.endpoint.sslContextParameters",
			"description": "To configure security using SSLContextParameters",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.spring-ws.lazyStartProducer": {
			"name": "camel.component.spring-ws.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.spring-ws.autowiredEnabled": {
			"name": "camel.component.spring-ws.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.spring-ws.useGlobalSslContextParameters": {
			"name": "camel.component.spring-ws.useGlobalSslContextParameters",
			"description": "Enable usage of global SSL context parameters.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}