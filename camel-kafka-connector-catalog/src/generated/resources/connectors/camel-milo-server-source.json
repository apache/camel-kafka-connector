{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.miloserver.CamelMiloserverSourceConnector",
		"artifactId": "camel-milo-server-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-milo-server-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Make telemetry data available as an OPC UA server."
	},
	"properties": {
		"camel.source.path.itemId": {
			"name": "camel.source.path.itemId",
			"description": "ID of the item",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.milo-server.applicationName": {
			"name": "camel.component.milo-server.applicationName",
			"description": "The application name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.applicationUri": {
			"name": "camel.component.milo-server.applicationUri",
			"description": "The application URI",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.bindAddresses": {
			"name": "camel.component.milo-server.bindAddresses",
			"description": "Set the addresses of the local addresses the server should bind to",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.buildInfo": {
			"name": "camel.component.milo-server.buildInfo",
			"description": "Server build info",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.namespaceUri": {
			"name": "camel.component.milo-server.namespaceUri",
			"description": "The URI of the namespace, defaults to urn:org:apache:camel",
			"defaultValue": "\"urn:org:apache:camel\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.path": {
			"name": "camel.component.milo-server.path",
			"description": "The path to be appended to the end of the endpoint url. (doesn't need to start with '\/')",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.port": {
			"name": "camel.component.milo-server.port",
			"description": "The TCP port the server binds to",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.productUri": {
			"name": "camel.component.milo-server.productUri",
			"description": "The product URI",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.bridgeErrorHandler": {
			"name": "camel.component.milo-server.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.autowiredEnabled": {
			"name": "camel.component.milo-server.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.certificate": {
			"name": "camel.component.milo-server.certificate",
			"description": "Server certificate",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.certificateManager": {
			"name": "camel.component.milo-server.certificateManager",
			"description": "Server certificate manager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.certificateValidator": {
			"name": "camel.component.milo-server.certificateValidator",
			"description": "Validator for client certificates",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.defaultCertificateValidator": {
			"name": "camel.component.milo-server.defaultCertificateValidator",
			"description": "Validator for client certificates using default file based approach",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.enableAnonymousAuthentication": {
			"name": "camel.component.milo-server.enableAnonymousAuthentication",
			"description": "Enable anonymous authentication, disabled by default",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.securityPolicies": {
			"name": "camel.component.milo-server.securityPolicies",
			"description": "Security policies",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.securityPoliciesById": {
			"name": "camel.component.milo-server.securityPoliciesById",
			"description": "Security policies by URI or name. Multiple policies can be separated by comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.userAuthenticationCredentials": {
			"name": "camel.component.milo-server.userAuthenticationCredentials",
			"description": "Set user password combinations in the form of user1:pwd1,user2:pwd2 Usernames and passwords will be URL decoded",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.milo-server.usernameSecurityPolicyUri": {
			"name": "camel.component.milo-server.usernameSecurityPolicyUri",
			"description": "Set the UserTokenPolicy used when One of: [None] [Basic128Rsa15] [Basic256] [Basic256Sha256] [Aes128_Sha256_RsaOaep] [Aes256_Sha256_RsaPss]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"None",
				"Basic128Rsa15",
				"Basic256",
				"Basic256Sha256",
				"Aes128_Sha256_RsaOaep",
				"Aes256_Sha256_RsaPss"
			]
		}
	}
}