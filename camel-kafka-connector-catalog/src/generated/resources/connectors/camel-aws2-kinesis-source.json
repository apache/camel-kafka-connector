{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.aws2kinesis.CamelAws2kinesisSourceConnector",
		"artifactId": "camel-aws2-kinesis-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-aws2-kinesis-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Consume and produce records from and to AWS Kinesis Streams using AWS SDK version 2.x."
	},
	"properties": {
		"camel.source.path.streamName": {
			"name": "camel.source.path.streamName",
			"description": "Name of the stream",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.amazonKinesisClient": {
			"name": "camel.source.endpoint.amazonKinesisClient",
			"description": "Amazon Kinesis client to use for all requests for this endpoint",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cborEnabled": {
			"name": "camel.source.endpoint.cborEnabled",
			"description": "This option will set the CBOR_ENABLED property during the execution",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.overrideEndpoint": {
			"name": "camel.source.endpoint.overrideEndpoint",
			"description": "Set the need for overidding the endpoint. This option needs to be used in combination with uriEndpointOverride option",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.proxyHost": {
			"name": "camel.source.endpoint.proxyHost",
			"description": "To define a proxy host when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.proxyPort": {
			"name": "camel.source.endpoint.proxyPort",
			"description": "To define a proxy port when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.proxyProtocol": {
			"name": "camel.source.endpoint.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the Kinesis client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.source.endpoint.region": {
			"name": "camel.source.endpoint.region",
			"description": "The region in which Kinesis Firehose client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.trustAllCertificates": {
			"name": "camel.source.endpoint.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.uriEndpointOverride": {
			"name": "camel.source.endpoint.uriEndpointOverride",
			"description": "Set the overriding uri endpoint. This option needs to be used in combination with overrideEndpoint option",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.useDefaultCredentialsProvider": {
			"name": "camel.source.endpoint.useDefaultCredentialsProvider",
			"description": "Set whether the Kinesis client should expect to load credentials through a default credentials provider or to expect static credentials to be passed in.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.iteratorType": {
			"name": "camel.source.endpoint.iteratorType",
			"description": "Defines where in the Kinesis stream to start getting records One of: [AT_SEQUENCE_NUMBER] [AFTER_SEQUENCE_NUMBER] [TRIM_HORIZON] [LATEST] [AT_TIMESTAMP] [null]",
			"defaultValue": "\"TRIM_HORIZON\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"AT_SEQUENCE_NUMBER",
				"AFTER_SEQUENCE_NUMBER",
				"TRIM_HORIZON",
				"LATEST",
				"AT_TIMESTAMP",
				"null"
			]
		},
		"camel.source.endpoint.maxResultsPerRequest": {
			"name": "camel.source.endpoint.maxResultsPerRequest",
			"description": "Maximum number of records that will be fetched in each poll",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendEmptyMessageWhenIdle": {
			"name": "camel.source.endpoint.sendEmptyMessageWhenIdle",
			"description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sequenceNumber": {
			"name": "camel.source.endpoint.sequenceNumber",
			"description": "The sequence number to start polling from. Required if iteratorType is set to AFTER_SEQUENCE_NUMBER or AT_SEQUENCE_NUMBER",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.shardClosed": {
			"name": "camel.source.endpoint.shardClosed",
			"description": "Define what will be the behavior in case of shard closed. Possible value are ignore, silent and fail. In case of ignore a message will be logged and the consumer will restart from the beginning,in case of silent there will be no logging and the consumer will start from the beginning,in case of fail a ReachedClosedStateException will be raised One of: [ignore] [fail] [silent]",
			"defaultValue": "\"ignore\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"ignore",
				"fail",
				"silent"
			]
		},
		"camel.source.endpoint.shardId": {
			"name": "camel.source.endpoint.shardId",
			"description": "Defines which shardId in the Kinesis stream to get records from",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.pollStrategy": {
			"name": "camel.source.endpoint.pollStrategy",
			"description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffErrorThreshold": {
			"name": "camel.source.endpoint.backoffErrorThreshold",
			"description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffIdleThreshold": {
			"name": "camel.source.endpoint.backoffIdleThreshold",
			"description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffMultiplier": {
			"name": "camel.source.endpoint.backoffMultiplier",
			"description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Milliseconds before the next poll.",
			"defaultValue": "500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.greedy": {
			"name": "camel.source.endpoint.greedy",
			"description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.initialDelay": {
			"name": "camel.source.endpoint.initialDelay",
			"description": "Milliseconds before the first poll starts.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repeatCount": {
			"name": "camel.source.endpoint.repeatCount",
			"description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.runLoggingLevel": {
			"name": "camel.source.endpoint.runLoggingLevel",
			"description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]",
			"defaultValue": "\"TRACE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"TRACE",
				"DEBUG",
				"INFO",
				"WARN",
				"ERROR",
				"OFF"
			]
		},
		"camel.source.endpoint.scheduledExecutorService": {
			"name": "camel.source.endpoint.scheduledExecutorService",
			"description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.scheduler": {
			"name": "camel.source.endpoint.scheduler",
			"description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler",
			"defaultValue": "\"none\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.schedulerProperties": {
			"name": "camel.source.endpoint.schedulerProperties",
			"description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.startScheduler": {
			"name": "camel.source.endpoint.startScheduler",
			"description": "Whether the scheduler should be auto started.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeUnit": {
			"name": "camel.source.endpoint.timeUnit",
			"description": "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]",
			"defaultValue": "\"MILLISECONDS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NANOSECONDS",
				"MICROSECONDS",
				"MILLISECONDS",
				"SECONDS",
				"MINUTES",
				"HOURS",
				"DAYS"
			]
		},
		"camel.source.endpoint.useFixedDelay": {
			"name": "camel.source.endpoint.useFixedDelay",
			"description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.accessKey": {
			"name": "camel.source.endpoint.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.secretKey": {
			"name": "camel.source.endpoint.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.amazonKinesisClient": {
			"name": "camel.component.aws2-kinesis.amazonKinesisClient",
			"description": "Amazon Kinesis client to use for all requests for this endpoint",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.cborEnabled": {
			"name": "camel.component.aws2-kinesis.cborEnabled",
			"description": "This option will set the CBOR_ENABLED property during the execution",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.configuration": {
			"name": "camel.component.aws2-kinesis.configuration",
			"description": "Component configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.overrideEndpoint": {
			"name": "camel.component.aws2-kinesis.overrideEndpoint",
			"description": "Set the need for overidding the endpoint. This option needs to be used in combination with uriEndpointOverride option",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyHost": {
			"name": "camel.component.aws2-kinesis.proxyHost",
			"description": "To define a proxy host when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyPort": {
			"name": "camel.component.aws2-kinesis.proxyPort",
			"description": "To define a proxy port when instantiating the Kinesis client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.proxyProtocol": {
			"name": "camel.component.aws2-kinesis.proxyProtocol",
			"description": "To define a proxy protocol when instantiating the Kinesis client One of: [HTTP] [HTTPS]",
			"defaultValue": "\"HTTPS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"HTTP",
				"HTTPS"
			]
		},
		"camel.component.aws2-kinesis.region": {
			"name": "camel.component.aws2-kinesis.region",
			"description": "The region in which Kinesis Firehose client needs to work. When using this parameter, the configuration will expect the lowercase name of the region (for example ap-east-1) You'll need to use the name Region.EU_WEST_1.id()",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.trustAllCertificates": {
			"name": "camel.component.aws2-kinesis.trustAllCertificates",
			"description": "If we want to trust all certificates in case of overriding the endpoint",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.uriEndpointOverride": {
			"name": "camel.component.aws2-kinesis.uriEndpointOverride",
			"description": "Set the overriding uri endpoint. This option needs to be used in combination with overrideEndpoint option",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.useDefaultCredentialsProvider": {
			"name": "camel.component.aws2-kinesis.useDefaultCredentialsProvider",
			"description": "Set whether the Kinesis client should expect to load credentials through a default credentials provider or to expect static credentials to be passed in.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.bridgeErrorHandler": {
			"name": "camel.component.aws2-kinesis.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.iteratorType": {
			"name": "camel.component.aws2-kinesis.iteratorType",
			"description": "Defines where in the Kinesis stream to start getting records One of: [AT_SEQUENCE_NUMBER] [AFTER_SEQUENCE_NUMBER] [TRIM_HORIZON] [LATEST] [AT_TIMESTAMP] [null]",
			"defaultValue": "\"TRIM_HORIZON\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"AT_SEQUENCE_NUMBER",
				"AFTER_SEQUENCE_NUMBER",
				"TRIM_HORIZON",
				"LATEST",
				"AT_TIMESTAMP",
				"null"
			]
		},
		"camel.component.aws2-kinesis.maxResultsPerRequest": {
			"name": "camel.component.aws2-kinesis.maxResultsPerRequest",
			"description": "Maximum number of records that will be fetched in each poll",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.sequenceNumber": {
			"name": "camel.component.aws2-kinesis.sequenceNumber",
			"description": "The sequence number to start polling from. Required if iteratorType is set to AFTER_SEQUENCE_NUMBER or AT_SEQUENCE_NUMBER",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.shardClosed": {
			"name": "camel.component.aws2-kinesis.shardClosed",
			"description": "Define what will be the behavior in case of shard closed. Possible value are ignore, silent and fail. In case of ignore a message will be logged and the consumer will restart from the beginning,in case of silent there will be no logging and the consumer will start from the beginning,in case of fail a ReachedClosedStateException will be raised One of: [ignore] [fail] [silent]",
			"defaultValue": "\"ignore\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"ignore",
				"fail",
				"silent"
			]
		},
		"camel.component.aws2-kinesis.shardId": {
			"name": "camel.component.aws2-kinesis.shardId",
			"description": "Defines which shardId in the Kinesis stream to get records from",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.autowiredEnabled": {
			"name": "camel.component.aws2-kinesis.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.accessKey": {
			"name": "camel.component.aws2-kinesis.accessKey",
			"description": "Amazon AWS Access Key",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.aws2-kinesis.secretKey": {
			"name": "camel.component.aws2-kinesis.secretKey",
			"description": "Amazon AWS Secret Key",
			"priority": "MEDIUM",
			"required": "false"
		}
	},
	"transforms": [
		"org.apache.camel.kafkaconnector.aws2kinesis.transformers.KinesisRecordDataTransforms"
	]
}