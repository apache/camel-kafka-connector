{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.hdfs.CamelHdfsSourceConnector",
		"artifactId": "camel-hdfs-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-hdfs-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Read and write from\/to an HDFS filesystem using Hadoop 2.x."
	},
	"properties": {
		"camel.source.path.hostName": {
			"name": "camel.source.path.hostName",
			"description": "HDFS host to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.path.port": {
			"name": "camel.source.path.port",
			"description": "HDFS port to use",
			"defaultValue": "8020",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.path.path": {
			"name": "camel.source.path.path",
			"description": "The directory path to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.connectOnStartup": {
			"name": "camel.source.endpoint.connectOnStartup",
			"description": "Whether to connect to the HDFS file system on starting the producer\/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection, as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup, and not block for up till 15 minutes.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fileSystemType": {
			"name": "camel.source.endpoint.fileSystemType",
			"description": "Set to LOCAL to not use HDFS but local java.io.File instead. One of: [LOCAL] [HDFS]",
			"defaultValue": "\"HDFS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"LOCAL",
				"HDFS"
			]
		},
		"camel.source.endpoint.fileType": {
			"name": "camel.source.endpoint.fileType",
			"description": "The file type to use. For more details see Hadoop HDFS documentation about the various files types. One of: [NORMAL_FILE] [SEQUENCE_FILE] [MAP_FILE] [BLOOMMAP_FILE] [ARRAY_FILE]",
			"defaultValue": "\"NORMAL_FILE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NORMAL_FILE",
				"SEQUENCE_FILE",
				"MAP_FILE",
				"BLOOMMAP_FILE",
				"ARRAY_FILE"
			]
		},
		"camel.source.endpoint.keyType": {
			"name": "camel.source.endpoint.keyType",
			"description": "The type for the key in case of sequence or map files. One of: [NULL] [BOOLEAN] [BYTE] [INT] [FLOAT] [LONG] [DOUBLE] [TEXT] [BYTES]",
			"defaultValue": "\"NULL\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NULL",
				"BOOLEAN",
				"BYTE",
				"INT",
				"FLOAT",
				"LONG",
				"DOUBLE",
				"TEXT",
				"BYTES"
			]
		},
		"camel.source.endpoint.namedNodes": {
			"name": "camel.source.endpoint.namedNodes",
			"description": "A comma separated list of named nodes (e.g. srv11.example.com:8020,srv12.example.com:8020)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.owner": {
			"name": "camel.source.endpoint.owner",
			"description": "The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.valueType": {
			"name": "camel.source.endpoint.valueType",
			"description": "The type for the key in case of sequence or map files One of: [NULL] [BOOLEAN] [BYTE] [INT] [FLOAT] [LONG] [DOUBLE] [TEXT] [BYTES]",
			"defaultValue": "\"BYTES\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NULL",
				"BOOLEAN",
				"BYTE",
				"INT",
				"FLOAT",
				"LONG",
				"DOUBLE",
				"TEXT",
				"BYTES"
			]
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.pattern": {
			"name": "camel.source.endpoint.pattern",
			"description": "The pattern used for scanning the directory",
			"defaultValue": "\"*\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendEmptyMessageWhenIdle": {
			"name": "camel.source.endpoint.sendEmptyMessageWhenIdle",
			"description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.streamDownload": {
			"name": "camel.source.endpoint.streamDownload",
			"description": "Sets the download method to use when not using a local working directory. If set to true, the remote files are streamed to the route as they are read. When set to false, the remote files are loaded into memory before being sent into the route.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.pollStrategy": {
			"name": "camel.source.endpoint.pollStrategy",
			"description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.blockSize": {
			"name": "camel.source.endpoint.blockSize",
			"description": "The size of the HDFS blocks",
			"defaultValue": "67108864L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bufferSize": {
			"name": "camel.source.endpoint.bufferSize",
			"description": "The buffer size used by HDFS",
			"defaultValue": "4096",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.checkIdleInterval": {
			"name": "camel.source.endpoint.checkIdleInterval",
			"description": "How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is IDLE.",
			"defaultValue": "500",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.chunkSize": {
			"name": "camel.source.endpoint.chunkSize",
			"description": "When reading a normal file, this is split into chunks producing a message per chunk.",
			"defaultValue": "4096",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.compressionCodec": {
			"name": "camel.source.endpoint.compressionCodec",
			"description": "The compression codec to use One of: [DEFAULT] [GZIP] [BZIP2]",
			"defaultValue": "\"DEFAULT\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"DEFAULT",
				"GZIP",
				"BZIP2"
			]
		},
		"camel.source.endpoint.compressionType": {
			"name": "camel.source.endpoint.compressionType",
			"description": "The compression type to use (is default not in use) One of: [NONE] [RECORD] [BLOCK]",
			"defaultValue": "\"NONE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NONE",
				"RECORD",
				"BLOCK"
			]
		},
		"camel.source.endpoint.openedSuffix": {
			"name": "camel.source.endpoint.openedSuffix",
			"description": "When a file is opened for reading\/writing the file is renamed with this suffix to avoid to read it during the writing phase.",
			"defaultValue": "\"opened\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.readSuffix": {
			"name": "camel.source.endpoint.readSuffix",
			"description": "Once the file has been read is renamed with this suffix to avoid to read it again.",
			"defaultValue": "\"read\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.replication": {
			"name": "camel.source.endpoint.replication",
			"description": "The HDFS replication factor",
			"defaultValue": "3",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.splitStrategy": {
			"name": "camel.source.endpoint.splitStrategy",
			"description": "In the current version of Hadoop opening a file in append mode is disabled since it's not very reliable. So, for the moment, it's only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined, the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met, a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:value,ST:value,... where ST can be: BYTES a new file is created, and the old is closed when the number of written bytes is more than value MESSAGES a new file is created, and the old is closed when the number of written messages is more than value IDLE a new file is created, and the old is closed when no writing happened in the last value milliseconds",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxMessagesPerPoll": {
			"name": "camel.source.endpoint.maxMessagesPerPoll",
			"description": "To define a maximum messages to gather per poll. By default a limit of 100 is set. Can be used to set a limit of e.g. 1000 to avoid when starting up the server that there are thousands of files. Values can only be greater than 0. Notice: If this option is in use then the limit will be applied on the valid files. For example if you have 100000 files and use maxMessagesPerPoll=500, then only the first 500 files will be picked up.",
			"defaultValue": "100",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffErrorThreshold": {
			"name": "camel.source.endpoint.backoffErrorThreshold",
			"description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffIdleThreshold": {
			"name": "camel.source.endpoint.backoffIdleThreshold",
			"description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffMultiplier": {
			"name": "camel.source.endpoint.backoffMultiplier",
			"description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Milliseconds before the next poll.",
			"defaultValue": "500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.greedy": {
			"name": "camel.source.endpoint.greedy",
			"description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.initialDelay": {
			"name": "camel.source.endpoint.initialDelay",
			"description": "Milliseconds before the first poll starts.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repeatCount": {
			"name": "camel.source.endpoint.repeatCount",
			"description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.runLoggingLevel": {
			"name": "camel.source.endpoint.runLoggingLevel",
			"description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]",
			"defaultValue": "\"TRACE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"TRACE",
				"DEBUG",
				"INFO",
				"WARN",
				"ERROR",
				"OFF"
			]
		},
		"camel.source.endpoint.scheduledExecutorService": {
			"name": "camel.source.endpoint.scheduledExecutorService",
			"description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.scheduler": {
			"name": "camel.source.endpoint.scheduler",
			"description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler",
			"defaultValue": "\"none\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.schedulerProperties": {
			"name": "camel.source.endpoint.schedulerProperties",
			"description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.startScheduler": {
			"name": "camel.source.endpoint.startScheduler",
			"description": "Whether the scheduler should be auto started.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeUnit": {
			"name": "camel.source.endpoint.timeUnit",
			"description": "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]",
			"defaultValue": "\"MILLISECONDS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NANOSECONDS",
				"MICROSECONDS",
				"MILLISECONDS",
				"SECONDS",
				"MINUTES",
				"HOURS",
				"DAYS"
			]
		},
		"camel.source.endpoint.useFixedDelay": {
			"name": "camel.source.endpoint.useFixedDelay",
			"description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.kerberosConfigFileLocation": {
			"name": "camel.source.endpoint.kerberosConfigFileLocation",
			"description": "The location of the kerb5.conf file (https:\/\/web.mit.edu\/kerberos\/krb5-1.12\/doc\/admin\/conf_files\/krb5_conf.html)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.kerberosKeytabLocation": {
			"name": "camel.source.endpoint.kerberosKeytabLocation",
			"description": "The location of the keytab file used to authenticate with the kerberos nodes (contains pairs of kerberos principals and encrypted keys (which are derived from the Kerberos password))",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.kerberosUsername": {
			"name": "camel.source.endpoint.kerberosUsername",
			"description": "The username used to authenticate with the kerberos nodes",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.hdfs.bridgeErrorHandler": {
			"name": "camel.component.hdfs.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.hdfs.autowiredEnabled": {
			"name": "camel.component.hdfs.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.hdfs.jAASConfiguration": {
			"name": "camel.component.hdfs.jAASConfiguration",
			"description": "To use the given configuration for security with JAAS.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.hdfs.kerberosConfigFile": {
			"name": "camel.component.hdfs.kerberosConfigFile",
			"description": "To use kerberos authentication, set the value of the 'java.security.krb5.conf' environment variable to an existing file. If the environment variable is already set, warn if different than the specified parameter",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}