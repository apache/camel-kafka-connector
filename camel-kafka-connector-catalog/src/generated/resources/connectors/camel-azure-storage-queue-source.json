{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.azurestoragequeue.CamelAzurestoragequeueSourceConnector",
		"artifactId": "camel-azure-storage-queue-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-azure-storage-queue-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "The azure-storage-queue component is used for storing and retrieving the messages to\/from Azure Storage Queue using Azure SDK v12."
	},
	"properties": {
		"camel.source.path.accountName": {
			"name": "camel.source.path.accountName",
			"description": "Azure account name to be used for authentication with azure queue services",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.path.queueName": {
			"name": "camel.source.path.queueName",
			"description": "The queue resource name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.serviceClient": {
			"name": "camel.source.endpoint.serviceClient",
			"description": "Service client to a storage account to interact with the queue service. This client does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. This client contains all the operations for interacting with a queue account in Azure Storage. Operations allowed by the client are creating, listing, and deleting queues, retrieving and updating properties of the account, and retrieving statistics of the account.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendEmptyMessageWhenIdle": {
			"name": "camel.source.endpoint.sendEmptyMessageWhenIdle",
			"description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.pollStrategy": {
			"name": "camel.source.endpoint.pollStrategy",
			"description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxMessages": {
			"name": "camel.source.endpoint.maxMessages",
			"description": "Maximum number of messages to get, if there are less messages exist in the queue than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed range is 1 to 32 messages.",
			"defaultValue": "\"1\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.messageId": {
			"name": "camel.source.endpoint.messageId",
			"description": "The ID of the message to be deleted or updated.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.popReceipt": {
			"name": "camel.source.endpoint.popReceipt",
			"description": "Unique identifier that must match for the message to be deleted or updated.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeout": {
			"name": "camel.source.endpoint.timeout",
			"description": "An optional timeout applied to the operation. If a response is not returned before the timeout concludes a RuntimeException will be thrown.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeToLive": {
			"name": "camel.source.endpoint.timeToLive",
			"description": "How long the message will stay alive in the queue. If unset the value will default to 7 days, if -1 is passed the message will not expire. The time to live must be -1 or any positive number. The format should be in this form: PnDTnHnMn.nS., e.g: PT20.345S -- parses as 20.345 seconds, P2D -- parses as 2 days However, in case you are using EndpointDsl\/ComponentDsl, you can do something like Duration.ofSeconds() since these Java APIs are typesafe.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.visibilityTimeout": {
			"name": "camel.source.endpoint.visibilityTimeout",
			"description": "The timeout period for how long the message is invisible in the queue. The timeout must be between 1 seconds and 7 days. The format should be in this form: PnDTnHnMn.nS., e.g: PT20.345S -- parses as 20.345 seconds, P2D -- parses as 2 days However, in case you are using EndpointDsl\/ComponentDsl, you can do something like Duration.ofSeconds() since these Java APIs are typesafe.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffErrorThreshold": {
			"name": "camel.source.endpoint.backoffErrorThreshold",
			"description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffIdleThreshold": {
			"name": "camel.source.endpoint.backoffIdleThreshold",
			"description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.backoffMultiplier": {
			"name": "camel.source.endpoint.backoffMultiplier",
			"description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles\/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and\/or backoffErrorThreshold must also be configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.delay": {
			"name": "camel.source.endpoint.delay",
			"description": "Milliseconds before the next poll.",
			"defaultValue": "500L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.greedy": {
			"name": "camel.source.endpoint.greedy",
			"description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.initialDelay": {
			"name": "camel.source.endpoint.initialDelay",
			"description": "Milliseconds before the first poll starts.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.repeatCount": {
			"name": "camel.source.endpoint.repeatCount",
			"description": "Specifies a maximum limit of number of fires. So if you set it to 1, the scheduler will only fire once. If you set it to 5, it will only fire five times. A value of zero or negative means fire forever.",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.runLoggingLevel": {
			"name": "camel.source.endpoint.runLoggingLevel",
			"description": "The consumer logs a start\/complete log line when it polls. This option allows you to configure the logging level for that. One of: [TRACE] [DEBUG] [INFO] [WARN] [ERROR] [OFF]",
			"defaultValue": "\"TRACE\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"TRACE",
				"DEBUG",
				"INFO",
				"WARN",
				"ERROR",
				"OFF"
			]
		},
		"camel.source.endpoint.scheduledExecutorService": {
			"name": "camel.source.endpoint.scheduledExecutorService",
			"description": "Allows for configuring a custom\/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.scheduler": {
			"name": "camel.source.endpoint.scheduler",
			"description": "To use a cron scheduler from either camel-spring or camel-quartz component. Use value spring or quartz for built in scheduler",
			"defaultValue": "\"none\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.schedulerProperties": {
			"name": "camel.source.endpoint.schedulerProperties",
			"description": "To configure additional properties when using a custom scheduler or any of the Quartz, Spring based scheduler.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.startScheduler": {
			"name": "camel.source.endpoint.startScheduler",
			"description": "Whether the scheduler should be auto started.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeUnit": {
			"name": "camel.source.endpoint.timeUnit",
			"description": "Time unit for initialDelay and delay options. One of: [NANOSECONDS] [MICROSECONDS] [MILLISECONDS] [SECONDS] [MINUTES] [HOURS] [DAYS]",
			"defaultValue": "\"MILLISECONDS\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"NANOSECONDS",
				"MICROSECONDS",
				"MILLISECONDS",
				"SECONDS",
				"MINUTES",
				"HOURS",
				"DAYS"
			]
		},
		"camel.source.endpoint.useFixedDelay": {
			"name": "camel.source.endpoint.useFixedDelay",
			"description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.accessKey": {
			"name": "camel.source.endpoint.accessKey",
			"description": "Access key for the associated azure account name to be used for authentication with azure queue services",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.credentials": {
			"name": "camel.source.endpoint.credentials",
			"description": "StorageSharedKeyCredential can be injected to create the azure client, this holds the important authentication information",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.configuration": {
			"name": "camel.component.azure-storage-queue.configuration",
			"description": "The component configurations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.serviceClient": {
			"name": "camel.component.azure-storage-queue.serviceClient",
			"description": "Service client to a storage account to interact with the queue service. This client does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. This client contains all the operations for interacting with a queue account in Azure Storage. Operations allowed by the client are creating, listing, and deleting queues, retrieving and updating properties of the account, and retrieving statistics of the account.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.bridgeErrorHandler": {
			"name": "camel.component.azure-storage-queue.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.autowiredEnabled": {
			"name": "camel.component.azure-storage-queue.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.maxMessages": {
			"name": "camel.component.azure-storage-queue.maxMessages",
			"description": "Maximum number of messages to get, if there are less messages exist in the queue than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed range is 1 to 32 messages.",
			"defaultValue": "\"1\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.messageId": {
			"name": "camel.component.azure-storage-queue.messageId",
			"description": "The ID of the message to be deleted or updated.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.popReceipt": {
			"name": "camel.component.azure-storage-queue.popReceipt",
			"description": "Unique identifier that must match for the message to be deleted or updated.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.timeout": {
			"name": "camel.component.azure-storage-queue.timeout",
			"description": "An optional timeout applied to the operation. If a response is not returned before the timeout concludes a RuntimeException will be thrown.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.timeToLive": {
			"name": "camel.component.azure-storage-queue.timeToLive",
			"description": "How long the message will stay alive in the queue. If unset the value will default to 7 days, if -1 is passed the message will not expire. The time to live must be -1 or any positive number. The format should be in this form: PnDTnHnMn.nS., e.g: PT20.345S -- parses as 20.345 seconds, P2D -- parses as 2 days However, in case you are using EndpointDsl\/ComponentDsl, you can do something like Duration.ofSeconds() since these Java APIs are typesafe.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.visibilityTimeout": {
			"name": "camel.component.azure-storage-queue.visibilityTimeout",
			"description": "The timeout period for how long the message is invisible in the queue. The timeout must be between 1 seconds and 7 days. The format should be in this form: PnDTnHnMn.nS., e.g: PT20.345S -- parses as 20.345 seconds, P2D -- parses as 2 days However, in case you are using EndpointDsl\/ComponentDsl, you can do something like Duration.ofSeconds() since these Java APIs are typesafe.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.accessKey": {
			"name": "camel.component.azure-storage-queue.accessKey",
			"description": "Access key for the associated azure account name to be used for authentication with azure queue services",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.azure-storage-queue.credentials": {
			"name": "camel.component.azure-storage-queue.credentials",
			"description": "StorageSharedKeyCredential can be injected to create the azure client, this holds the important authentication information",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}