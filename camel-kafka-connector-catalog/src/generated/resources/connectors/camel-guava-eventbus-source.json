{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.guavaeventbus.CamelGuavaeventbusSourceConnector",
		"artifactId": "camel-guava-eventbus-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-guava-eventbus-source",
		"type": "source",
		"version": "0.7.0-SNAPSHOT",
		"description": "Send and receive messages to\/from Guava EventBus."
	},
	"properties": {
		"camel.source.path.eventBusRef": {
			"name": "camel.source.path.eventBusRef",
			"description": "To lookup the Guava EventBus from the registry with the given name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.eventClass": {
			"name": "camel.source.endpoint.eventClass",
			"description": "If used on the consumer side of the route, will filter events received from the EventBus to the instances of the class and superclasses of eventClass. Null value of this option is equal to setting it to the java.lang.Object i.e. the consumer will capture all messages incoming to the event bus. This option cannot be used together with listenerInterface option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.listenerInterface": {
			"name": "camel.source.endpoint.listenerInterface",
			"description": "The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.basicPropertyBinding": {
			"name": "camel.source.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.synchronous": {
			"name": "camel.source.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.guava-eventbus.eventBus": {
			"name": "camel.component.guava-eventbus.eventBus",
			"description": "To use the given Guava EventBus instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.guava-eventbus.bridgeErrorHandler": {
			"name": "camel.component.guava-eventbus.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.guava-eventbus.listenerInterface": {
			"name": "camel.component.guava-eventbus.listenerInterface",
			"description": "The interface with method(s) marked with the Subscribe annotation. Dynamic proxy will be created over the interface so it could be registered as the EventBus listener. Particularly useful when creating multi-event listeners and for handling DeadEvent properly. This option cannot be used together with eventClass option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.guava-eventbus.basicPropertyBinding": {
			"name": "camel.component.guava-eventbus.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		}
	}
}