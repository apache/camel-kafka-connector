{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.vertxwebsocket.CamelVertxwebsocketSinkConnector",
		"artifactId": "camel-vertx-websocket-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-vertx-websocket-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Expose WebSocket endpoints and connect to remote WebSocket servers using Vert.x"
	},
	"properties": {
		"camel.sink.path.host": {
			"name": "camel.sink.path.host",
			"description": "The host that the consumer should bind to or the host of the remote websocket destination that the producer should connect to",
			"defaultValue": "\"0.0.0.0\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.path.port": {
			"name": "camel.sink.path.port",
			"description": "The port that the consumer should bind to or port of the remote websocket destination that the producer should connect to",
			"defaultValue": "0",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.path.path": {
			"name": "camel.sink.path.path",
			"description": "The path that the consumer should bind to or path of the remote websocket destination that the producer should connect to",
			"defaultValue": "\"\/\"",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.clientOptions": {
			"name": "camel.sink.endpoint.clientOptions",
			"description": "Sets customized options for configuring the WebSocket client used in the producer",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.clientSubProtocols": {
			"name": "camel.sink.endpoint.clientSubProtocols",
			"description": "Comma separated list of WebSocket subprotocols that the client should use for the Sec-WebSocket-Protocol header",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.sendToAll": {
			"name": "camel.sink.endpoint.sendToAll",
			"description": "To send to all websocket subscribers. Can be used to configure on endpoint level, instead of having to use the VertxWebsocketConstants.SEND_TO_ALL header on the message.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.sslContextParameters": {
			"name": "camel.sink.endpoint.sslContextParameters",
			"description": "To configure security using SSLContextParameters",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.lazyStartProducer": {
			"name": "camel.component.vertx-websocket.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.autowiredEnabled": {
			"name": "camel.component.vertx-websocket.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.router": {
			"name": "camel.component.vertx-websocket.router",
			"description": "To provide a custom vertx router to use on the WebSocket server",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.vertx": {
			"name": "camel.component.vertx-websocket.vertx",
			"description": "To use an existing vertx instead of creating a new instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.vertxOptions": {
			"name": "camel.component.vertx-websocket.vertxOptions",
			"description": "To provide a custom set of vertx options for configuring vertx",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-websocket.useGlobalSslContextParameters": {
			"name": "camel.component.vertx-websocket.useGlobalSslContextParameters",
			"description": "Enable usage of global SSL context parameters.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}