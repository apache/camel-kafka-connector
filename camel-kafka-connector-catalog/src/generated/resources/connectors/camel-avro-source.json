{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.avro.CamelAvroSourceConnector",
		"artifactId": "camel-avro-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-avro-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Produce or consume Apache Avro RPC services."
	},
	"properties": {
		"camel.source.path.transport": {
			"name": "camel.source.path.transport",
			"description": "Transport to use, can be either http or netty One of: [http] [netty]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"http",
				"netty"
			]
		},
		"camel.source.path.port": {
			"name": "camel.source.path.port",
			"description": "Port number to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.path.host": {
			"name": "camel.source.path.host",
			"description": "Hostname to use",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.path.messageName": {
			"name": "camel.source.path.messageName",
			"description": "The name of the message to send.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.protocol": {
			"name": "camel.source.endpoint.protocol",
			"description": "Avro protocol to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.protocolClassName": {
			"name": "camel.source.endpoint.protocolClassName",
			"description": "Avro protocol to use defined by the FQN class name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.protocolLocation": {
			"name": "camel.source.endpoint.protocolLocation",
			"description": "Avro protocol location",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.reflectionProtocol": {
			"name": "camel.source.endpoint.reflectionProtocol",
			"description": "If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.singleParameter": {
			"name": "camel.source.endpoint.singleParameter",
			"description": "If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.uriAuthority": {
			"name": "camel.source.endpoint.uriAuthority",
			"description": "Authority to use (username and password)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.avro.protocol": {
			"name": "camel.component.avro.protocol",
			"description": "Avro protocol to use",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.protocolClassName": {
			"name": "camel.component.avro.protocolClassName",
			"description": "Avro protocol to use defined by the FQN class name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.protocolLocation": {
			"name": "camel.component.avro.protocolLocation",
			"description": "Avro protocol location",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.reflectionProtocol": {
			"name": "camel.component.avro.reflectionProtocol",
			"description": "If protocol object provided is reflection protocol. Should be used only with protocol parameter because for protocolClassName protocol type will be auto detected",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.singleParameter": {
			"name": "camel.component.avro.singleParameter",
			"description": "If true, consumer parameter won't be wrapped into array. Will fail if protocol specifies more then 1 parameter for the message",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.uriAuthority": {
			"name": "camel.component.avro.uriAuthority",
			"description": "Authority to use (username and password)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.bridgeErrorHandler": {
			"name": "camel.component.avro.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.autowiredEnabled": {
			"name": "camel.component.avro.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.avro.configuration": {
			"name": "camel.component.avro.configuration",
			"description": "To use a shared AvroConfiguration to configure options once",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}