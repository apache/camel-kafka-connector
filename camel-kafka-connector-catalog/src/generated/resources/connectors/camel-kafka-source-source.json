{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.kafkasource.CamelKafkasourceSourceConnector",
		"artifactId": "camel-kafka-source-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-kafka-source-source",
		"type": "source",
		"version": "4.8.0-SNAPSHOT",
		"description": "Receive data from Kafka topics through Plain Login Module."
	},
	"properties": {
		"camel.kamelet.kafka-source.topic": {
			"name": "camel.kamelet.kafka-source.topic",
			"description": "Comma separated list of Kafka topic names",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.kafka-source.bootstrapServers": {
			"name": "camel.kamelet.kafka-source.bootstrapServers",
			"description": "Comma separated list of Kafka Broker URLs",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.kafka-source.securityProtocol": {
			"name": "camel.kamelet.kafka-source.securityProtocol",
			"description": "Protocol used to communicate with brokers. SASL_PLAINTEXT, PLAINTEXT, SASL_SSL and SSL are supported",
			"defaultValue": "\"SASL_SSL\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.saslMechanism": {
			"name": "camel.kamelet.kafka-source.saslMechanism",
			"description": "The Simple Authentication and Security Layer (SASL) Mechanism used.",
			"defaultValue": "\"PLAIN\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.user": {
			"name": "camel.kamelet.kafka-source.user",
			"description": "Username to authenticate to Kafka",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.kafka-source.password": {
			"name": "camel.kamelet.kafka-source.password",
			"description": "Password to authenticate to kafka",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.kamelet.kafka-source.autoCommitEnable": {
			"name": "camel.kamelet.kafka-source.autoCommitEnable",
			"description": "If true, periodically commit to ZooKeeper the offset of messages already fetched by the consumer",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.allowManualCommit": {
			"name": "camel.kamelet.kafka-source.allowManualCommit",
			"description": "Whether to allow doing manual commits",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.pollOnError": {
			"name": "camel.kamelet.kafka-source.pollOnError",
			"description": "What to do if kafka threw an exception while polling for new messages. There are 5 enums and the value can be one of DISCARD, ERROR_HANDLER, RECONNECT, RETRY, STOP",
			"defaultValue": "\"ERROR_HANDLER\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.autoOffsetReset": {
			"name": "camel.kamelet.kafka-source.autoOffsetReset",
			"description": "What to do when there is no initial offset. There are 3 enums and the value can be one of latest, earliest, none",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.consumerGroup": {
			"name": "camel.kamelet.kafka-source.consumerGroup",
			"description": "A string that uniquely identifies the group of consumers to which this source belongs Example: my-group-id",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.deserializeHeaders": {
			"name": "camel.kamelet.kafka-source.deserializeHeaders",
			"description": "When enabled the Kamelet source will deserialize all message headers to String representation.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.kamelet.kafka-source.topicIsPattern": {
			"name": "camel.kamelet.kafka-source.topicIsPattern",
			"description": "Whether the topic is a pattern (regular expression). This can be used to subscribe to dynamic number of topics matching the pattern.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}