{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.atmos.CamelAtmosSourceConnector",
		"artifactId": "camel-atmos-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-atmos-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Integrate with EMC's ViPR object data services using the Atmos Client."
	},
	"properties": {
		"camel.source.path.name": {
			"name": "camel.source.path.name",
			"description": "Atmos name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.path.operation": {
			"name": "camel.source.path.operation",
			"description": "Operation to perform One of: [put] [del] [search] [get] [move]",
			"priority": "HIGH",
			"required": "true",
			"enum": [
				"put",
				"del",
				"search",
				"get",
				"move"
			]
		},
		"camel.source.endpoint.localPath": {
			"name": "camel.source.endpoint.localPath",
			"description": "Local path to put files",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.newRemotePath": {
			"name": "camel.source.endpoint.newRemotePath",
			"description": "New path on Atmos when moving files",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.query": {
			"name": "camel.source.endpoint.query",
			"description": "Search query on Atmos",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.remotePath": {
			"name": "camel.source.endpoint.remotePath",
			"description": "Where to put files on Atmos",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.uri": {
			"name": "camel.source.endpoint.uri",
			"description": "Atomos server uri",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fullTokenId": {
			"name": "camel.source.endpoint.fullTokenId",
			"description": "Atmos client fullTokenId",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.secretKey": {
			"name": "camel.source.endpoint.secretKey",
			"description": "The secret key to pass to the Atmos client (should be base64 encoded)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslValidation": {
			"name": "camel.source.endpoint.sslValidation",
			"description": "Atmos SSL validation",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.bridgeErrorHandler": {
			"name": "camel.component.atmos.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.autowiredEnabled": {
			"name": "camel.component.atmos.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.uri": {
			"name": "camel.component.atmos.uri",
			"description": "The URI of the server for the Atmos client to connect to",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.fullTokenId": {
			"name": "camel.component.atmos.fullTokenId",
			"description": "The token id to pass to the Atmos client",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.secretKey": {
			"name": "camel.component.atmos.secretKey",
			"description": "The secret key to pass to the Atmos client (should be base64 encoded)",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.atmos.sslValidation": {
			"name": "camel.component.atmos.sslValidation",
			"description": "Whether the Atmos client should perform SSL validation",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}