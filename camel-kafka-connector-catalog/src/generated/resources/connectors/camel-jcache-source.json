{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.jcache.CamelJcacheSourceConnector",
		"artifactId": "camel-jcache-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-jcache-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Perform caching operations against JSR107\/JCache."
	},
	"properties": {
		"camel.source.path.cacheName": {
			"name": "camel.source.path.cacheName",
			"description": "The name of the cache",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.cacheConfiguration": {
			"name": "camel.source.endpoint.cacheConfiguration",
			"description": "A Configuration for the Cache",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cacheConfigurationProperties": {
			"name": "camel.source.endpoint.cacheConfigurationProperties",
			"description": "The Properties for the javax.cache.spi.CachingProvider to create the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cachingProvider": {
			"name": "camel.source.endpoint.cachingProvider",
			"description": "The fully qualified class name of the javax.cache.spi.CachingProvider",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.configurationUri": {
			"name": "camel.source.endpoint.configurationUri",
			"description": "An implementation specific URI for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.managementEnabled": {
			"name": "camel.source.endpoint.managementEnabled",
			"description": "Whether management gathering is enabled",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.readThrough": {
			"name": "camel.source.endpoint.readThrough",
			"description": "If read-through caching should be used",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.statisticsEnabled": {
			"name": "camel.source.endpoint.statisticsEnabled",
			"description": "Whether statistics gathering is enabled",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.storeByValue": {
			"name": "camel.source.endpoint.storeByValue",
			"description": "If cache should use store-by-value or store-by-reference semantics",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.writeThrough": {
			"name": "camel.source.endpoint.writeThrough",
			"description": "If write-through caching should be used",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.filteredEvents": {
			"name": "camel.source.endpoint.filteredEvents",
			"description": "Events a consumer should filter (multiple events can be separated by comma). If using filteredEvents option, then eventFilters one will be ignored One of: [CREATED] [UPDATED] [REMOVED] [EXPIRED]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"CREATED",
				"UPDATED",
				"REMOVED",
				"EXPIRED"
			]
		},
		"camel.source.endpoint.oldValueRequired": {
			"name": "camel.source.endpoint.oldValueRequired",
			"description": "if the old value is required for events",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.synchronous": {
			"name": "camel.source.endpoint.synchronous",
			"description": "if the event listener should block the thread causing the event",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.eventFilters": {
			"name": "camel.source.endpoint.eventFilters",
			"description": "The CacheEntryEventFilter. If using eventFilters option, then filteredEvents one will be ignored",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.cacheLoaderFactory": {
			"name": "camel.source.endpoint.cacheLoaderFactory",
			"description": "The CacheLoader factory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.cacheWriterFactory": {
			"name": "camel.source.endpoint.cacheWriterFactory",
			"description": "The CacheWriter factory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.createCacheIfNotExists": {
			"name": "camel.source.endpoint.createCacheIfNotExists",
			"description": "Configure if a cache need to be created if it does exist or can't be pre-configured.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.expiryPolicyFactory": {
			"name": "camel.source.endpoint.expiryPolicyFactory",
			"description": "The ExpiryPolicy factory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.lookupProviders": {
			"name": "camel.source.endpoint.lookupProviders",
			"description": "Configure if a camel-cache should try to find implementations of jcache api in runtimes like OSGi.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.cacheConfiguration": {
			"name": "camel.component.jcache.cacheConfiguration",
			"description": "A Configuration for the Cache",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.cacheConfigurationProperties": {
			"name": "camel.component.jcache.cacheConfigurationProperties",
			"description": "Properties to configure jcache",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.cacheConfigurationPropertiesRef": {
			"name": "camel.component.jcache.cacheConfigurationPropertiesRef",
			"description": "References to an existing Properties or Map to lookup in the registry to use for configuring jcache.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.cachingProvider": {
			"name": "camel.component.jcache.cachingProvider",
			"description": "The fully qualified class name of the javax.cache.spi.CachingProvider",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.configurationUri": {
			"name": "camel.component.jcache.configurationUri",
			"description": "An implementation specific URI for the CacheManager",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.bridgeErrorHandler": {
			"name": "camel.component.jcache.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.jcache.autowiredEnabled": {
			"name": "camel.component.jcache.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}