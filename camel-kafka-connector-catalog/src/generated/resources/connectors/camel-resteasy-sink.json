{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.resteasy.CamelResteasySinkConnector",
		"artifactId": "camel-resteasy-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-resteasy-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Expose REST endpoints and access external REST servers."
	},
	"properties": {
		"camel.sink.path.httpUri": {
			"name": "camel.sink.path.httpUri",
			"description": "The url of the HTTP endpoint to call.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.chunked": {
			"name": "camel.sink.endpoint.chunked",
			"description": "If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.disableStreamCache": {
			"name": "camel.sink.endpoint.disableStreamCache",
			"description": "Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory\/overflow to file, Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream, such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge\/proxy an endpoint then consider enabling this option to improve performance, in case you do not need to read the message payload multiple times. The http producer will by default cache the response body stream. If setting this option to true, then the producers will not cache the response body stream but use the response stream as-is as the message body.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.resteasyMethod": {
			"name": "camel.sink.endpoint.resteasyMethod",
			"description": "Sets the resteasy method to process the request",
			"defaultValue": "\"GET\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.servletName": {
			"name": "camel.sink.endpoint.servletName",
			"description": "Sets the servlet name",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.transferException": {
			"name": "camel.sink.endpoint.transferException",
			"description": "If enabled and an Exchange failed processing on the consumer side, and if the caused Exception was send back serialized in the response as a application\/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is, instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.bridgeEndpoint": {
			"name": "camel.sink.endpoint.bridgeEndpoint",
			"description": "If the option is true, HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.clearExpiredCookies": {
			"name": "camel.sink.endpoint.clearExpiredCookies",
			"description": "Whether to clear expired cookies before sending the HTTP request. This ensures the cookies store does not keep growing by adding new cookies which is newer removed when they are expired. If the component has disabled cookie management then this option is disabled too.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.connectionClose": {
			"name": "camel.sink.endpoint.connectionClose",
			"description": "Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.copyHeaders": {
			"name": "camel.sink.endpoint.copyHeaders",
			"description": "If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false, allows to only include the headers from the HTTP response (not propagating IN headers).",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.customHostHeader": {
			"name": "camel.sink.endpoint.customHostHeader",
			"description": "To use custom host header for producer. When not set in query will be ignored. When set will override host header derived from url.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.httpMethod": {
			"name": "camel.sink.endpoint.httpMethod",
			"description": "Configure the HTTP method to use. The HttpMethod header cannot override this option if set. One of: [GET] [POST] [PUT] [DELETE] [HEAD] [OPTIONS] [TRACE] [PATCH]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"GET",
				"POST",
				"PUT",
				"DELETE",
				"HEAD",
				"OPTIONS",
				"TRACE",
				"PATCH"
			]
		},
		"camel.sink.endpoint.ignoreResponseBody": {
			"name": "camel.sink.endpoint.ignoreResponseBody",
			"description": "If this option is true, The http producer won't read response body and cache the input stream",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.preserveHostHeader": {
			"name": "camel.sink.endpoint.preserveHostHeader",
			"description": "If the option is true, HttpProducer will set the Host header to the value contained in the current exchange Host header, useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client, this allows applications which use the Host header to generate accurate URL's for a proxied service",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.throwExceptionOnFailure": {
			"name": "camel.sink.endpoint.throwExceptionOnFailure",
			"description": "Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.cookieHandler": {
			"name": "camel.sink.endpoint.cookieHandler",
			"description": "Configure a cookie handler to maintain a HTTP session",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.deleteWithBody": {
			"name": "camel.sink.endpoint.deleteWithBody",
			"description": "Whether the HTTP DELETE should include the message body or not. By default HTTP DELETE do not include any HTTP body. However in some rare cases users may need to be able to include the message body.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.getWithBody": {
			"name": "camel.sink.endpoint.getWithBody",
			"description": "Whether the HTTP GET should include the message body or not. By default HTTP GET do not include any HTTP body. However in some rare cases users may need to be able to include the message body.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.okStatusCodeRange": {
			"name": "camel.sink.endpoint.okStatusCodeRange",
			"description": "The status codes which are considered a success response. The values are inclusive. Multiple ranges can be defined, separated by comma, e.g. 200-204,209,301-304. Each range must be a single number or from-to with the dash included.",
			"defaultValue": "\"200-299\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.skipRequestHeaders": {
			"name": "camel.sink.endpoint.skipRequestHeaders",
			"description": "Whether to skip mapping all the Camel headers as HTTP request headers. If there are no data from Camel headers needed to be included in the HTTP request then this can avoid parsing overhead with many object allocations for the JVM garbage collector.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.skipResponseHeaders": {
			"name": "camel.sink.endpoint.skipResponseHeaders",
			"description": "Whether to skip mapping all the HTTP response headers to Camel headers. If there are no data needed from HTTP headers then this can avoid parsing overhead with many object allocations for the JVM garbage collector.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.headerFilterStrategy": {
			"name": "camel.sink.endpoint.headerFilterStrategy",
			"description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.setHttpResponseDuringProcessing": {
			"name": "camel.sink.endpoint.setHttpResponseDuringProcessing",
			"description": "Sets the flag to use the endpoint where you can either populate camel exchange from servlet response or use request itself which may be thought as if it is a proxy.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.skipServletProcessing": {
			"name": "camel.sink.endpoint.skipServletProcessing",
			"description": "Sets the flag to use skip servlet processing and let camel take over processing",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.useSystemProperties": {
			"name": "camel.sink.endpoint.useSystemProperties",
			"description": "To use System Properties as fallback for configuration",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.proxyClientClass": {
			"name": "camel.sink.endpoint.proxyClientClass",
			"description": "Sets the resteasy proxyClientClass",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "Sets the password",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.username": {
			"name": "camel.sink.endpoint.username",
			"description": "Sets the username",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.copyHeaders": {
			"name": "camel.component.resteasy.copyHeaders",
			"description": "If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false, allows to only include the headers from the HTTP response (not propagating IN headers).",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.lazyStartProducer": {
			"name": "camel.component.resteasy.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.responsePayloadStreamingThreshold": {
			"name": "camel.component.resteasy.responsePayloadStreamingThreshold",
			"description": "This threshold in bytes controls whether the response payload should be stored in memory as a byte array or be streaming based. Set this to -1 to always use streaming mode.",
			"defaultValue": "8192",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.skipRequestHeaders": {
			"name": "camel.component.resteasy.skipRequestHeaders",
			"description": "Whether to skip mapping all the Camel headers as HTTP request headers. If there are no data from Camel headers needed to be included in the HTTP request then this can avoid parsing overhead with many object allocations for the JVM garbage collector.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.skipResponseHeaders": {
			"name": "camel.component.resteasy.skipResponseHeaders",
			"description": "Whether to skip mapping all the HTTP response headers to Camel headers. If there are no data needed from HTTP headers then this can avoid parsing overhead with many object allocations for the JVM garbage collector.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.allowJavaSerializedObject": {
			"name": "camel.component.resteasy.allowJavaSerializedObject",
			"description": "Whether to allow java serialization when a request uses context-type=application\/x-java-serialized-object. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.authCachingDisabled": {
			"name": "camel.component.resteasy.authCachingDisabled",
			"description": "Disables authentication scheme caching",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.automaticRetriesDisabled": {
			"name": "camel.component.resteasy.automaticRetriesDisabled",
			"description": "Disables automatic request recovery and re-execution",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.autowiredEnabled": {
			"name": "camel.component.resteasy.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.connectionStateDisabled": {
			"name": "camel.component.resteasy.connectionStateDisabled",
			"description": "Disables connection state tracking",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.contentCompressionDisabled": {
			"name": "camel.component.resteasy.contentCompressionDisabled",
			"description": "Disables automatic content decompression",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.cookieManagementDisabled": {
			"name": "camel.component.resteasy.cookieManagementDisabled",
			"description": "Disables state (cookie) management",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.defaultUserAgentDisabled": {
			"name": "camel.component.resteasy.defaultUserAgentDisabled",
			"description": "Disables the default user agent set by this builder if none has been provided by the user",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.redirectHandlingDisabled": {
			"name": "camel.component.resteasy.redirectHandlingDisabled",
			"description": "Disables automatic redirect handling",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.resteasy.headerFilterStrategy": {
			"name": "camel.component.resteasy.headerFilterStrategy",
			"description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}