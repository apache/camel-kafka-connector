{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.disruptorvm.CamelDisruptorvmSinkConnector",
		"artifactId": "camel-disruptor-vm-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-disruptor-vm-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Provides asynchronous SEDA behavior using LMAX Disruptor."
	},
	"properties": {
		"camel.sink.path.name": {
			"name": "camel.sink.path.name",
			"description": "Name of queue",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.size": {
			"name": "camel.sink.endpoint.size",
			"description": "The maximum capacity of the Disruptors ringbuffer Will be effectively increased to the nearest power of two. Notice: Mind if you use this option, then its the first endpoint being created with the queue name, that determines the size. To make sure all endpoints use same size, then configure the size option on all of them, or the first endpoint being created.",
			"defaultValue": "1024",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.blockWhenFull": {
			"name": "camel.sink.endpoint.blockWhenFull",
			"description": "Whether a thread that sends messages to a full Disruptor will block until the ringbuffer's capacity is no longer exhausted. By default, the calling thread will block and wait until the message can be accepted. By disabling this option, an exception will be thrown stating that the queue is full.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.producerType": {
			"name": "camel.sink.endpoint.producerType",
			"description": "Defines the producers allowed on the Disruptor. The options allowed are: Multi to allow multiple producers and Single to enable certain optimizations only allowed when one concurrent producer (on one thread or otherwise synchronized) is active. One of: [Single] [Multi]",
			"defaultValue": "\"Multi\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"Single",
				"Multi"
			]
		},
		"camel.sink.endpoint.timeout": {
			"name": "camel.sink.endpoint.timeout",
			"description": "Timeout (in milliseconds) before a producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.",
			"defaultValue": "30000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.waitForTaskToComplete": {
			"name": "camel.sink.endpoint.waitForTaskToComplete",
			"description": "Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always, Never or IfReplyExpected. The first two values are self-explanatory. The last value, IfReplyExpected, will only wait if the message is Request Reply based. One of: [Never] [IfReplyExpected] [Always]",
			"defaultValue": "\"IfReplyExpected\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"Never",
				"IfReplyExpected",
				"Always"
			]
		},
		"camel.component.disruptor-vm.bufferSize": {
			"name": "camel.component.disruptor-vm.bufferSize",
			"description": "To configure the ring buffer size",
			"defaultValue": "1024",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.disruptor-vm.defaultBlockWhenFull": {
			"name": "camel.component.disruptor-vm.defaultBlockWhenFull",
			"description": "To configure the default value for block when full The default value is true.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.disruptor-vm.defaultProducerType": {
			"name": "camel.component.disruptor-vm.defaultProducerType",
			"description": "To configure the default value for DisruptorProducerType The default value is Multi. One of: [Single] [Multi]",
			"defaultValue": "\"Multi\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"Single",
				"Multi"
			]
		},
		"camel.component.disruptor-vm.lazyStartProducer": {
			"name": "camel.component.disruptor-vm.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.disruptor-vm.autowiredEnabled": {
			"name": "camel.component.disruptor-vm.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}