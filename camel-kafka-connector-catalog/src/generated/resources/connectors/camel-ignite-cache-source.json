{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.ignitecache.CamelIgnitecacheSourceConnector",
		"artifactId": "camel-ignite-cache-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-ignite-cache-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Perform cache operations on an Ignite cache or consume changes from a continuous query."
	},
	"properties": {
		"camel.source.path.cacheName": {
			"name": "camel.source.path.cacheName",
			"description": "The cache name.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.propagateIncomingBodyIfNoReturnValue": {
			"name": "camel.source.endpoint.propagateIncomingBodyIfNoReturnValue",
			"description": "Sets whether to propagate the incoming body if the return type of the underlying Ignite operation is void.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.treatCollectionsAsCacheObjects": {
			"name": "camel.source.endpoint.treatCollectionsAsCacheObjects",
			"description": "Sets whether to treat Collections as cache objects or as Collections of items to insert\/update\/compute, etc.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.autoUnsubscribe": {
			"name": "camel.source.endpoint.autoUnsubscribe",
			"description": "Whether auto unsubscribe is enabled in the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_AUTO_UNSUBSCRIBE",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fireExistingQueryResults": {
			"name": "camel.source.endpoint.fireExistingQueryResults",
			"description": "Whether to process existing results that match the query. Used on initialization of the Continuous Query Consumer.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.oneExchangePerUpdate": {
			"name": "camel.source.endpoint.oneExchangePerUpdate",
			"description": "Whether to pack each update in an individual Exchange, even if multiple updates are received in one batch. Only used by the Continuous Query Consumer.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.pageSize": {
			"name": "camel.source.endpoint.pageSize",
			"description": "The page size. Only used by the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_PAGE_SIZE",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.query": {
			"name": "camel.source.endpoint.query",
			"description": "The Query to execute, only needed for operations that require it, and for the Continuous Query Consumer.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.remoteFilter": {
			"name": "camel.source.endpoint.remoteFilter",
			"description": "The remote filter, only used by the Continuous Query Consumer.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.timeInterval": {
			"name": "camel.source.endpoint.timeInterval",
			"description": "The time interval for the Continuous Query Consumer. Default value notice: ContinuousQuery.DFLT_TIME_INTERVAL",
			"defaultValue": "0L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.component.ignite-cache.configurationResource": {
			"name": "camel.component.ignite-cache.configurationResource",
			"description": "The resource from where to load the configuration. It can be a: URL, String or InputStream type.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.ignite-cache.ignite": {
			"name": "camel.component.ignite-cache.ignite",
			"description": "To use an existing Ignite instance.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.ignite-cache.igniteConfiguration": {
			"name": "camel.component.ignite-cache.igniteConfiguration",
			"description": "Allows the user to set a programmatic ignite configuration.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.ignite-cache.bridgeErrorHandler": {
			"name": "camel.component.ignite-cache.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.ignite-cache.autowiredEnabled": {
			"name": "camel.component.ignite-cache.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}