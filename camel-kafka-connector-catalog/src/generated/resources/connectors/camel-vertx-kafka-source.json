{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.vertxkafka.CamelVertxkafkaSourceConnector",
		"artifactId": "camel-vertx-kafka-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-vertx-kafka-source",
		"type": "source",
		"version": "0.10.0-SNAPSHOT",
		"description": "Sent and receive messages to\/from an Apache Kafka broker using vert.x Kafka client"
	},
	"properties": {
		"camel.source.path.topic": {
			"name": "camel.source.path.topic",
			"description": "Name of the topic to use. On the consumer you can use comma to separate multiple topics. A producer can only send a message to a single topic.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.source.endpoint.additionalProperties": {
			"name": "camel.source.endpoint.additionalProperties",
			"description": "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http:\/\/localhost:8811\/avro",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.bootstrapServers": {
			"name": "camel.source.endpoint.bootstrapServers",
			"description": "A list of host\/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientDnsLookup": {
			"name": "camel.source.endpoint.clientDnsLookup",
			"description": "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]",
			"defaultValue": "\"use_all_dns_ips\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"default",
				"use_all_dns_ips",
				"resolve_canonical_bootstrap_servers_only"
			]
		},
		"camel.source.endpoint.clientId": {
			"name": "camel.source.endpoint.clientId",
			"description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip\/port by allowing a logical application name to be included in server-side request logging.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.connectionsMaxIdleMs": {
			"name": "camel.source.endpoint.connectionsMaxIdleMs",
			"description": "Close idle connections after the number of milliseconds specified by this config.",
			"defaultValue": "540000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.headerFilterStrategy": {
			"name": "camel.source.endpoint.headerFilterStrategy",
			"description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.interceptorClasses": {
			"name": "camel.source.endpoint.interceptorClasses",
			"description": "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.metadataMaxAgeMs": {
			"name": "camel.source.endpoint.metadataMaxAgeMs",
			"description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
			"defaultValue": "300000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.metricReporters": {
			"name": "camel.source.endpoint.metricReporters",
			"description": "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.metricsNumSamples": {
			"name": "camel.source.endpoint.metricsNumSamples",
			"description": "The number of samples maintained to compute metrics.",
			"defaultValue": "2",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.metricsRecordingLevel": {
			"name": "camel.source.endpoint.metricsRecordingLevel",
			"description": "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]",
			"defaultValue": "\"INFO\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"INFO",
				"DEBUG",
				"TRACE"
			]
		},
		"camel.source.endpoint.metricsSampleWindowMs": {
			"name": "camel.source.endpoint.metricsSampleWindowMs",
			"description": "The window of time a metrics sample is computed over.",
			"defaultValue": "30000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.partitionId": {
			"name": "camel.source.endpoint.partitionId",
			"description": "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.receiveBufferBytes": {
			"name": "camel.source.endpoint.receiveBufferBytes",
			"description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.",
			"defaultValue": "32768",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.reconnectBackoffMaxMs": {
			"name": "camel.source.endpoint.reconnectBackoffMaxMs",
			"description": "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.reconnectBackoffMs": {
			"name": "camel.source.endpoint.reconnectBackoffMs",
			"description": "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.",
			"defaultValue": "50L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.requestTimeoutMs": {
			"name": "camel.source.endpoint.requestTimeoutMs",
			"description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.",
			"defaultValue": "30000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.retryBackoffMs": {
			"name": "camel.source.endpoint.retryBackoffMs",
			"description": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
			"defaultValue": "100L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sendBufferBytes": {
			"name": "camel.source.endpoint.sendBufferBytes",
			"description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.",
			"defaultValue": "131072",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.socketConnectionSetupTimeoutMaxMs": {
			"name": "camel.source.endpoint.socketConnectionSetupTimeoutMaxMs",
			"description": "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.",
			"defaultValue": "30000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.socketConnectionSetupTimeoutMs": {
			"name": "camel.source.endpoint.socketConnectionSetupTimeoutMs",
			"description": "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.",
			"defaultValue": "10000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.allowAutoCreateTopics": {
			"name": "camel.source.endpoint.allowAutoCreateTopics",
			"description": "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using auto.create.topics.enable broker configuration. This configuration must be set to false when using brokers older than 0.11.0",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.allowManualCommit": {
			"name": "camel.source.endpoint.allowManualCommit",
			"description": "Whether to allow doing manual commits via org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit. If this option is enabled then an instance of org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit is stored on the Exchange message header, which allows end users to access this API and perform manual offset commits via the Kafka consumer. Note: To take full control of the offset committing, you may need to disable the Kafka Consumer default auto commit behavior by setting 'enableAutoCommit' to 'false'.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.autoCommitIntervalMs": {
			"name": "camel.source.endpoint.autoCommitIntervalMs",
			"description": "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.autoOffsetReset": {
			"name": "camel.source.endpoint.autoOffsetReset",
			"description": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): earliest: automatically reset the offset to the earliest offsetlatest: automatically reset the offset to the latest offsetnone: throw exception to the consumer if no previous offset is found for the consumer's groupanything else: throw exception to the consumer. One of: [latest] [earliest] [none]",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"latest",
				"earliest",
				"none"
			]
		},
		"camel.source.endpoint.bridgeErrorHandler": {
			"name": "camel.source.endpoint.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.checkCrcs": {
			"name": "camel.source.endpoint.checkCrcs",
			"description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.clientRack": {
			"name": "camel.source.endpoint.clientRack",
			"description": "A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.defaultApiTimeoutMs": {
			"name": "camel.source.endpoint.defaultApiTimeoutMs",
			"description": "Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a timeout parameter.",
			"defaultValue": "60000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.enableAutoCommit": {
			"name": "camel.source.endpoint.enableAutoCommit",
			"description": "If true the consumer's offset will be periodically committed in the background.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.excludeInternalTopics": {
			"name": "camel.source.endpoint.excludeInternalTopics",
			"description": "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fetchMaxBytes": {
			"name": "camel.source.endpoint.fetchMaxBytes",
			"description": "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.",
			"defaultValue": "52428800",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fetchMaxWaitMs": {
			"name": "camel.source.endpoint.fetchMaxWaitMs",
			"description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.",
			"defaultValue": "500",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.fetchMinBytes": {
			"name": "camel.source.endpoint.fetchMinBytes",
			"description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.groupId": {
			"name": "camel.source.endpoint.groupId",
			"description": "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.groupInstanceId": {
			"name": "camel.source.endpoint.groupInstanceId",
			"description": "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.heartbeatIntervalMs": {
			"name": "camel.source.endpoint.heartbeatIntervalMs",
			"description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1\/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
			"defaultValue": "3000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.isolationLevel": {
			"name": "camel.source.endpoint.isolationLevel",
			"description": "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO One of: [read_committed] [read_uncommitted]",
			"defaultValue": "\"read_uncommitted\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"read_committed",
				"read_uncommitted"
			]
		},
		"camel.source.endpoint.keyDeserializer": {
			"name": "camel.source.endpoint.keyDeserializer",
			"description": "Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.",
			"defaultValue": "\"org.apache.kafka.common.serialization.StringDeserializer\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxPartitionFetchBytes": {
			"name": "camel.source.endpoint.maxPartitionFetchBytes",
			"description": "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.",
			"defaultValue": "1048576",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxPollIntervalMs": {
			"name": "camel.source.endpoint.maxPollIntervalMs",
			"description": "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null group.instance.id which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.",
			"defaultValue": "300000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.maxPollRecords": {
			"name": "camel.source.endpoint.maxPollRecords",
			"description": "The maximum number of records returned in a single call to poll(). Note, that max.poll.records does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.",
			"defaultValue": "500",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.partitionAssignmentStrategy": {
			"name": "camel.source.endpoint.partitionAssignmentStrategy",
			"description": "A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used. Available options are:org.apache.kafka.clients.consumer.RangeAssignor: The default assignor, which works on a per-topic basis.org.apache.kafka.clients.consumer.RoundRobinAssignor: Assigns partitions to consumers in a round-robin fashion.org.apache.kafka.clients.consumer.StickyAssignor: Guarantees an assignment that is maximally balanced while preserving as many existing partition assignments as possible.org.apache.kafka.clients.consumer.CooperativeStickyAssignor: Follows the same StickyAssignor logic, but allows for cooperative rebalancing.Implementing the org.apache.kafka.clients.consumer.ConsumerPartitionAssignor interface allows you to plug in a custom assignment strategy.",
			"defaultValue": "\"org.apache.kafka.clients.consumer.RangeAssignor\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.seekToOffset": {
			"name": "camel.source.endpoint.seekToOffset",
			"description": "Set if KafkaConsumer will read from a particular offset on startup. This config will take precedence over seekTo config",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.seekToPosition": {
			"name": "camel.source.endpoint.seekToPosition",
			"description": "Set if KafkaConsumer will read from beginning or end on startup: beginning : read from beginning end : read from end. One of: [beginning] [end]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"beginning",
				"end"
			]
		},
		"camel.source.endpoint.sessionTimeoutMs": {
			"name": "camel.source.endpoint.sessionTimeoutMs",
			"description": "The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.valueDeserializer": {
			"name": "camel.source.endpoint.valueDeserializer",
			"description": "Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.",
			"defaultValue": "\"org.apache.kafka.common.serialization.StringDeserializer\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exceptionHandler": {
			"name": "camel.source.endpoint.exceptionHandler",
			"description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.exchangePattern": {
			"name": "camel.source.endpoint.exchangePattern",
			"description": "Sets the exchange pattern when the consumer creates an exchange. One of: [InOnly] [InOut] [InOptionalOut]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"InOnly",
				"InOut",
				"InOptionalOut"
			]
		},
		"camel.source.endpoint.saslClientCallbackHandlerClass": {
			"name": "camel.source.endpoint.saslClientCallbackHandlerClass",
			"description": "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslJaasConfig": {
			"name": "camel.source.endpoint.saslJaasConfig",
			"description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: loginModuleClass controlFlag (optionName=optionValue);. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslKerberosKinitCmd": {
			"name": "camel.source.endpoint.saslKerberosKinitCmd",
			"description": "Kerberos kinit command path.",
			"defaultValue": "\"\/usr\/bin\/kinit\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslKerberosMinTimeBeforeRelogin": {
			"name": "camel.source.endpoint.saslKerberosMinTimeBeforeRelogin",
			"description": "Login thread sleep time between refresh attempts.",
			"defaultValue": "60000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslKerberosServiceName": {
			"name": "camel.source.endpoint.saslKerberosServiceName",
			"description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslKerberosTicketRenewJitter": {
			"name": "camel.source.endpoint.saslKerberosTicketRenewJitter",
			"description": "Percentage of random jitter added to the renewal time.",
			"defaultValue": "0.05D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslKerberosTicketRenewWindowFactor": {
			"name": "camel.source.endpoint.saslKerberosTicketRenewWindowFactor",
			"description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.",
			"defaultValue": "0.8D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginCallbackHandlerClass": {
			"name": "camel.source.endpoint.saslLoginCallbackHandlerClass",
			"description": "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginClass": {
			"name": "camel.source.endpoint.saslLoginClass",
			"description": "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginRefreshBufferSeconds": {
			"name": "camel.source.endpoint.saslLoginRefreshBufferSeconds",
			"description": "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginRefreshMinPeriodSeconds": {
			"name": "camel.source.endpoint.saslLoginRefreshMinPeriodSeconds",
			"description": "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
			"defaultValue": "60",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginRefreshWindowFactor": {
			"name": "camel.source.endpoint.saslLoginRefreshWindowFactor",
			"description": "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
			"defaultValue": "0.8D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslLoginRefreshWindowJitter": {
			"name": "camel.source.endpoint.saslLoginRefreshWindowJitter",
			"description": "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
			"defaultValue": "0.05D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.saslMechanism": {
			"name": "camel.source.endpoint.saslMechanism",
			"description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
			"defaultValue": "\"GSSAPI\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityProtocol": {
			"name": "camel.source.endpoint.securityProtocol",
			"description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.",
			"defaultValue": "\"PLAINTEXT\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.securityProviders": {
			"name": "camel.source.endpoint.securityProviders",
			"description": "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslCipherSuites": {
			"name": "camel.source.endpoint.sslCipherSuites",
			"description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslEnabledProtocols": {
			"name": "camel.source.endpoint.sslEnabledProtocols",
			"description": "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.",
			"defaultValue": "\"TLSv1.2,TLSv1.3\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslEndpointIdentificationAlgorithm": {
			"name": "camel.source.endpoint.sslEndpointIdentificationAlgorithm",
			"description": "The endpoint identification algorithm to validate server hostname using server certificate.",
			"defaultValue": "\"https\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslEngineFactoryClass": {
			"name": "camel.source.endpoint.sslEngineFactoryClass",
			"description": "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeymanagerAlgorithm": {
			"name": "camel.source.endpoint.sslKeymanagerAlgorithm",
			"description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
			"defaultValue": "\"SunX509\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeyPassword": {
			"name": "camel.source.endpoint.sslKeyPassword",
			"description": "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeystoreCertificateChain": {
			"name": "camel.source.endpoint.sslKeystoreCertificateChain",
			"description": "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeystoreKey": {
			"name": "camel.source.endpoint.sslKeystoreKey",
			"description": "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeystoreLocation": {
			"name": "camel.source.endpoint.sslKeystoreLocation",
			"description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeystorePassword": {
			"name": "camel.source.endpoint.sslKeystorePassword",
			"description": "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslKeystoreType": {
			"name": "camel.source.endpoint.sslKeystoreType",
			"description": "The file format of the key store file. This is optional for client.",
			"defaultValue": "\"JKS\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslProtocol": {
			"name": "camel.source.endpoint.sslProtocol",
			"description": "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.",
			"defaultValue": "\"TLSv1.2\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslProvider": {
			"name": "camel.source.endpoint.sslProvider",
			"description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslSecureRandomImplementation": {
			"name": "camel.source.endpoint.sslSecureRandomImplementation",
			"description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslTrustmanagerAlgorithm": {
			"name": "camel.source.endpoint.sslTrustmanagerAlgorithm",
			"description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
			"defaultValue": "\"PKIX\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslTruststoreCertificates": {
			"name": "camel.source.endpoint.sslTruststoreCertificates",
			"description": "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslTruststoreLocation": {
			"name": "camel.source.endpoint.sslTruststoreLocation",
			"description": "The location of the trust store file.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslTruststorePassword": {
			"name": "camel.source.endpoint.sslTruststorePassword",
			"description": "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.source.endpoint.sslTruststoreType": {
			"name": "camel.source.endpoint.sslTruststoreType",
			"description": "The file format of the trust store file.",
			"defaultValue": "\"JKS\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.additionalProperties": {
			"name": "camel.component.vertx-kafka.additionalProperties",
			"description": "Sets additional properties for either kafka consumer or kafka producer in case they can't be set directly on the camel configurations (e.g: new Kafka properties that are not reflected yet in Camel configurations), the properties have to be prefixed with additionalProperties.. E.g: additionalProperties.transactional.id=12345&additionalProperties.schema.registry.url=http:\/\/localhost:8811\/avro",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.bootstrapServers": {
			"name": "camel.component.vertx-kafka.bootstrapServers",
			"description": "A list of host\/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping&mdash;this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.clientDnsLookup": {
			"name": "camel.component.vertx-kafka.clientDnsLookup",
			"description": "Controls how the client uses DNS lookups. If set to use_all_dns_ips, connect to each returned IP address in sequence until a successful connection is established. After a disconnection, the next IP is used. Once all IPs have been used once, the client resolves the IP(s) from the hostname again (both the JVM and the OS cache DNS name lookups, however). If set to resolve_canonical_bootstrap_servers_only, resolve each bootstrap address into a list of canonical names. After the bootstrap phase, this behaves the same as use_all_dns_ips. If set to default (deprecated), attempt to connect to the first IP address returned by the lookup, even if the lookup returns multiple IP addresses. One of: [default] [use_all_dns_ips] [resolve_canonical_bootstrap_servers_only]",
			"defaultValue": "\"use_all_dns_ips\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"default",
				"use_all_dns_ips",
				"resolve_canonical_bootstrap_servers_only"
			]
		},
		"camel.component.vertx-kafka.clientId": {
			"name": "camel.component.vertx-kafka.clientId",
			"description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip\/port by allowing a logical application name to be included in server-side request logging.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.configuration": {
			"name": "camel.component.vertx-kafka.configuration",
			"description": "The component configurations",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.connectionsMaxIdleMs": {
			"name": "camel.component.vertx-kafka.connectionsMaxIdleMs",
			"description": "Close idle connections after the number of milliseconds specified by this config.",
			"defaultValue": "540000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.headerFilterStrategy": {
			"name": "camel.component.vertx-kafka.headerFilterStrategy",
			"description": "To use a custom HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.interceptorClasses": {
			"name": "camel.component.vertx-kafka.interceptorClasses",
			"description": "A list of classes to use as interceptors. Implementing the org.apache.kafka.clients.producer.ProducerInterceptor interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.metadataMaxAgeMs": {
			"name": "camel.component.vertx-kafka.metadataMaxAgeMs",
			"description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.",
			"defaultValue": "300000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.metricReporters": {
			"name": "camel.component.vertx-kafka.metricReporters",
			"description": "A list of classes to use as metrics reporters. Implementing the org.apache.kafka.common.metrics.MetricsReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.metricsNumSamples": {
			"name": "camel.component.vertx-kafka.metricsNumSamples",
			"description": "The number of samples maintained to compute metrics.",
			"defaultValue": "2",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.metricsRecordingLevel": {
			"name": "camel.component.vertx-kafka.metricsRecordingLevel",
			"description": "The highest recording level for metrics. One of: [INFO] [DEBUG] [TRACE]",
			"defaultValue": "\"INFO\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"INFO",
				"DEBUG",
				"TRACE"
			]
		},
		"camel.component.vertx-kafka.metricsSampleWindowMs": {
			"name": "camel.component.vertx-kafka.metricsSampleWindowMs",
			"description": "The window of time a metrics sample is computed over.",
			"defaultValue": "30000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.partitionId": {
			"name": "camel.component.vertx-kafka.partitionId",
			"description": "The partition to which the record will be sent (or null if no partition was specified) or read from a particular partition if set. Header VertxKafkaConstants#PARTITION_ID If configured, it will take precedence over this config",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.receiveBufferBytes": {
			"name": "camel.component.vertx-kafka.receiveBufferBytes",
			"description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data. If the value is -1, the OS default will be used.",
			"defaultValue": "32768",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.reconnectBackoffMaxMs": {
			"name": "camel.component.vertx-kafka.reconnectBackoffMaxMs",
			"description": "The maximum amount of time in milliseconds to wait when reconnecting to a broker that has repeatedly failed to connect. If provided, the backoff per host will increase exponentially for each consecutive connection failure, up to this maximum. After calculating the backoff increase, 20% random jitter is added to avoid connection storms.",
			"defaultValue": "1000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.reconnectBackoffMs": {
			"name": "camel.component.vertx-kafka.reconnectBackoffMs",
			"description": "The base amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all connection attempts by the client to a broker.",
			"defaultValue": "50L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.requestTimeoutMs": {
			"name": "camel.component.vertx-kafka.requestTimeoutMs",
			"description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted. This should be larger than replica.lag.time.max.ms (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.",
			"defaultValue": "30000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.retryBackoffMs": {
			"name": "camel.component.vertx-kafka.retryBackoffMs",
			"description": "The amount of time to wait before attempting to retry a failed request to a given topic partition. This avoids repeatedly sending requests in a tight loop under some failure scenarios.",
			"defaultValue": "100L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sendBufferBytes": {
			"name": "camel.component.vertx-kafka.sendBufferBytes",
			"description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data. If the value is -1, the OS default will be used.",
			"defaultValue": "131072",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.socketConnectionSetupTimeoutMaxMs": {
			"name": "camel.component.vertx-kafka.socketConnectionSetupTimeoutMaxMs",
			"description": "The maximum amount of time the client will wait for the socket connection to be established. The connection setup timeout will increase exponentially for each consecutive connection failure up to this maximum. To avoid connection storms, a randomization factor of 0.2 will be applied to the timeout resulting in a random range between 20% below and 20% above the computed value.",
			"defaultValue": "30000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.socketConnectionSetupTimeoutMs": {
			"name": "camel.component.vertx-kafka.socketConnectionSetupTimeoutMs",
			"description": "The amount of time the client will wait for the socket connection to be established. If the connection is not built before the timeout elapses, clients will close the socket channel.",
			"defaultValue": "10000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.allowAutoCreateTopics": {
			"name": "camel.component.vertx-kafka.allowAutoCreateTopics",
			"description": "Allow automatic topic creation on the broker when subscribing to or assigning a topic. A topic being subscribed to will be automatically created only if the broker allows for it using auto.create.topics.enable broker configuration. This configuration must be set to false when using brokers older than 0.11.0",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.allowManualCommit": {
			"name": "camel.component.vertx-kafka.allowManualCommit",
			"description": "Whether to allow doing manual commits via org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit. If this option is enabled then an instance of org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit is stored on the Exchange message header, which allows end users to access this API and perform manual offset commits via the Kafka consumer. Note: To take full control of the offset committing, you may need to disable the Kafka Consumer default auto commit behavior by setting 'enableAutoCommit' to 'false'.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.autoCommitIntervalMs": {
			"name": "camel.component.vertx-kafka.autoCommitIntervalMs",
			"description": "The frequency in milliseconds that the consumer offsets are auto-committed to Kafka if enable.auto.commit is set to true.",
			"defaultValue": "5000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.autoOffsetReset": {
			"name": "camel.component.vertx-kafka.autoOffsetReset",
			"description": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): earliest: automatically reset the offset to the earliest offsetlatest: automatically reset the offset to the latest offsetnone: throw exception to the consumer if no previous offset is found for the consumer's groupanything else: throw exception to the consumer. One of: [latest] [earliest] [none]",
			"defaultValue": "\"latest\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"latest",
				"earliest",
				"none"
			]
		},
		"camel.component.vertx-kafka.bridgeErrorHandler": {
			"name": "camel.component.vertx-kafka.bridgeErrorHandler",
			"description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.checkCrcs": {
			"name": "camel.component.vertx-kafka.checkCrcs",
			"description": "Automatically check the CRC32 of the records consumed. This ensures no on-the-wire or on-disk corruption to the messages occurred. This check adds some overhead, so it may be disabled in cases seeking extreme performance.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.clientRack": {
			"name": "camel.component.vertx-kafka.clientRack",
			"description": "A rack identifier for this client. This can be any string value which indicates where this client is physically located. It corresponds with the broker config 'broker.rack'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.defaultApiTimeoutMs": {
			"name": "camel.component.vertx-kafka.defaultApiTimeoutMs",
			"description": "Specifies the timeout (in milliseconds) for client APIs. This configuration is used as the default timeout for all client operations that do not specify a timeout parameter.",
			"defaultValue": "60000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.enableAutoCommit": {
			"name": "camel.component.vertx-kafka.enableAutoCommit",
			"description": "If true the consumer's offset will be periodically committed in the background.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.excludeInternalTopics": {
			"name": "camel.component.vertx-kafka.excludeInternalTopics",
			"description": "Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.fetchMaxBytes": {
			"name": "camel.component.vertx-kafka.fetchMaxBytes",
			"description": "The maximum amount of data the server should return for a fetch request. Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.",
			"defaultValue": "52428800",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.fetchMaxWaitMs": {
			"name": "camel.component.vertx-kafka.fetchMaxWaitMs",
			"description": "The maximum amount of time the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by fetch.min.bytes.",
			"defaultValue": "500",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.fetchMinBytes": {
			"name": "camel.component.vertx-kafka.fetchMinBytes",
			"description": "The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request. The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive. Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.",
			"defaultValue": "1",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.groupId": {
			"name": "camel.component.vertx-kafka.groupId",
			"description": "A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.groupInstanceId": {
			"name": "camel.component.vertx-kafka.groupInstanceId",
			"description": "A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted. If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time. This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.heartbeatIntervalMs": {
			"name": "camel.component.vertx-kafka.heartbeatIntervalMs",
			"description": "The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities. Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1\/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
			"defaultValue": "3000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.isolationLevel": {
			"name": "camel.component.vertx-kafka.isolationLevel",
			"description": "Controls how to read messages written transactionally. If set to read_committed, consumer.poll() will only return transactional messages which have been committed. If set to read_uncommitted (the default), consumer.poll() will return all messages, even transactional messages which have been aborted. Non-transactional messages will be returned unconditionally in either mode. Messages will always be returned in offset order. Hence, in read_committed mode, consumer.poll() will only return messages up to the last stable offset (LSO), which is the one less than the offset of the first open transaction. In particular any messages appearing after messages belonging to ongoing transactions will be withheld until the relevant transaction has been completed. As a result, read_committed consumers will not be able to read up to the high watermark when there are in flight transactions. Further, when in read_committed the seekToEnd method will return the LSO One of: [read_committed] [read_uncommitted]",
			"defaultValue": "\"read_uncommitted\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"read_committed",
				"read_uncommitted"
			]
		},
		"camel.component.vertx-kafka.keyDeserializer": {
			"name": "camel.component.vertx-kafka.keyDeserializer",
			"description": "Deserializer class for key that implements the org.apache.kafka.common.serialization.Deserializer interface.",
			"defaultValue": "\"org.apache.kafka.common.serialization.StringDeserializer\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.maxPartitionFetchBytes": {
			"name": "camel.component.vertx-kafka.maxPartitionFetchBytes",
			"description": "The maximum amount of data per-partition the server will return. Records are fetched in batches by the consumer. If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). See fetch.max.bytes for limiting the consumer request size.",
			"defaultValue": "1048576",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.maxPollIntervalMs": {
			"name": "camel.component.vertx-kafka.maxPollIntervalMs",
			"description": "The maximum delay between invocations of poll() when using consumer group management. This places an upper bound on the amount of time that the consumer can be idle before fetching more records. If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member. For consumers using a non-null group.instance.id which reach this timeout, partitions will not be immediately reassigned. Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.",
			"defaultValue": "300000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.maxPollRecords": {
			"name": "camel.component.vertx-kafka.maxPollRecords",
			"description": "The maximum number of records returned in a single call to poll(). Note, that max.poll.records does not impact the underlying fetching behavior. The consumer will cache the records from each fetch request and returns them incrementally from each poll.",
			"defaultValue": "500",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.partitionAssignmentStrategy": {
			"name": "camel.component.vertx-kafka.partitionAssignmentStrategy",
			"description": "A list of class names or class types, ordered by preference, of supported partition assignment strategies that the client will use to distribute partition ownership amongst consumer instances when group management is used. Available options are:org.apache.kafka.clients.consumer.RangeAssignor: The default assignor, which works on a per-topic basis.org.apache.kafka.clients.consumer.RoundRobinAssignor: Assigns partitions to consumers in a round-robin fashion.org.apache.kafka.clients.consumer.StickyAssignor: Guarantees an assignment that is maximally balanced while preserving as many existing partition assignments as possible.org.apache.kafka.clients.consumer.CooperativeStickyAssignor: Follows the same StickyAssignor logic, but allows for cooperative rebalancing.Implementing the org.apache.kafka.clients.consumer.ConsumerPartitionAssignor interface allows you to plug in a custom assignment strategy.",
			"defaultValue": "\"org.apache.kafka.clients.consumer.RangeAssignor\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.seekToOffset": {
			"name": "camel.component.vertx-kafka.seekToOffset",
			"description": "Set if KafkaConsumer will read from a particular offset on startup. This config will take precedence over seekTo config",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.seekToPosition": {
			"name": "camel.component.vertx-kafka.seekToPosition",
			"description": "Set if KafkaConsumer will read from beginning or end on startup: beginning : read from beginning end : read from end. One of: [beginning] [end]",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"beginning",
				"end"
			]
		},
		"camel.component.vertx-kafka.sessionTimeoutMs": {
			"name": "camel.component.vertx-kafka.sessionTimeoutMs",
			"description": "The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.",
			"defaultValue": "10000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.valueDeserializer": {
			"name": "camel.component.vertx-kafka.valueDeserializer",
			"description": "Deserializer class for value that implements the org.apache.kafka.common.serialization.Deserializer interface.",
			"defaultValue": "\"org.apache.kafka.common.serialization.StringDeserializer\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.kafkaManualCommitFactory": {
			"name": "camel.component.vertx-kafka.kafkaManualCommitFactory",
			"description": "Factory to use for creating org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit instances. This allows to plugin a custom factory to create custom org.apache.camel.component.vertx.kafka.offset.VertxKafkaManualCommit instances in case special logic is needed when doing manual commits that deviates from the default implementation that comes out of the box.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.autowiredEnabled": {
			"name": "camel.component.vertx-kafka.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.vertx": {
			"name": "camel.component.vertx-kafka.vertx",
			"description": "To use an existing vertx instead of creating a new instance",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.vertxKafkaClientFactory": {
			"name": "camel.component.vertx-kafka.vertxKafkaClientFactory",
			"description": "Factory to use for creating io.vertx.kafka.client.consumer.KafkaConsumer and io.vertx.kafka.client.consumer.KafkaProducer instances. This allows to configure a custom factory to create custom KafkaConsumer and KafkaProducer instances with logic that extends the vanilla VertX Kafka clients.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.vertxOptions": {
			"name": "camel.component.vertx-kafka.vertxOptions",
			"description": "To provide a custom set of vertx options for configuring vertx",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslClientCallbackHandlerClass": {
			"name": "camel.component.vertx-kafka.saslClientCallbackHandlerClass",
			"description": "The fully qualified name of a SASL client callback handler class that implements the AuthenticateCallbackHandler interface.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslJaasConfig": {
			"name": "camel.component.vertx-kafka.saslJaasConfig",
			"description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described here. The format for the value is: loginModuleClass controlFlag (optionName=optionValue);. For brokers, the config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.jaas.config=com.example.ScramLoginModule required;",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslKerberosKinitCmd": {
			"name": "camel.component.vertx-kafka.saslKerberosKinitCmd",
			"description": "Kerberos kinit command path.",
			"defaultValue": "\"\/usr\/bin\/kinit\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslKerberosMinTimeBeforeRelogin": {
			"name": "camel.component.vertx-kafka.saslKerberosMinTimeBeforeRelogin",
			"description": "Login thread sleep time between refresh attempts.",
			"defaultValue": "60000L",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslKerberosServiceName": {
			"name": "camel.component.vertx-kafka.saslKerberosServiceName",
			"description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka's JAAS config or in Kafka's config.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslKerberosTicketRenewJitter": {
			"name": "camel.component.vertx-kafka.saslKerberosTicketRenewJitter",
			"description": "Percentage of random jitter added to the renewal time.",
			"defaultValue": "0.05D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslKerberosTicketRenewWindowFactor": {
			"name": "camel.component.vertx-kafka.saslKerberosTicketRenewWindowFactor",
			"description": "Login thread will sleep until the specified window factor of time from last refresh to ticket's expiry has been reached, at which time it will try to renew the ticket.",
			"defaultValue": "0.8D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginCallbackHandlerClass": {
			"name": "camel.component.vertx-kafka.saslLoginCallbackHandlerClass",
			"description": "The fully qualified name of a SASL login callback handler class that implements the AuthenticateCallbackHandler interface. For brokers, login callback handler config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.callback.handler.class=com.example.CustomScramLoginCallbackHandler",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginClass": {
			"name": "camel.component.vertx-kafka.saslLoginClass",
			"description": "The fully qualified name of a class that implements the Login interface. For brokers, login config must be prefixed with listener prefix and SASL mechanism name in lower-case. For example, listener.name.sasl_ssl.scram-sha-256.sasl.login.class=com.example.CustomScramLogin",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginRefreshBufferSeconds": {
			"name": "camel.component.vertx-kafka.saslLoginRefreshBufferSeconds",
			"description": "The amount of buffer time before credential expiration to maintain when refreshing a credential, in seconds. If a refresh would otherwise occur closer to expiration than the number of buffer seconds then the refresh will be moved up to maintain as much of the buffer time as possible. Legal values are between 0 and 3600 (1 hour); a default value of 300 (5 minutes) is used if no value is specified. This value and sasl.login.refresh.min.period.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
			"defaultValue": "300",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginRefreshMinPeriodSeconds": {
			"name": "camel.component.vertx-kafka.saslLoginRefreshMinPeriodSeconds",
			"description": "The desired minimum time for the login refresh thread to wait before refreshing a credential, in seconds. Legal values are between 0 and 900 (15 minutes); a default value of 60 (1 minute) is used if no value is specified. This value and sasl.login.refresh.buffer.seconds are both ignored if their sum exceeds the remaining lifetime of a credential. Currently applies only to OAUTHBEARER.",
			"defaultValue": "60",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginRefreshWindowFactor": {
			"name": "camel.component.vertx-kafka.saslLoginRefreshWindowFactor",
			"description": "Login refresh thread will sleep until the specified window factor relative to the credential's lifetime has been reached, at which time it will try to refresh the credential. Legal values are between 0.5 (50%) and 1.0 (100%) inclusive; a default value of 0.8 (80%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
			"defaultValue": "0.8D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslLoginRefreshWindowJitter": {
			"name": "camel.component.vertx-kafka.saslLoginRefreshWindowJitter",
			"description": "The maximum amount of random jitter relative to the credential's lifetime that is added to the login refresh thread's sleep time. Legal values are between 0 and 0.25 (25%) inclusive; a default value of 0.05 (5%) is used if no value is specified. Currently applies only to OAUTHBEARER.",
			"defaultValue": "0.05D",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.saslMechanism": {
			"name": "camel.component.vertx-kafka.saslMechanism",
			"description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
			"defaultValue": "\"GSSAPI\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.securityProtocol": {
			"name": "camel.component.vertx-kafka.securityProtocol",
			"description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.",
			"defaultValue": "\"PLAINTEXT\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.securityProviders": {
			"name": "camel.component.vertx-kafka.securityProviders",
			"description": "A list of configurable creator classes each returning a provider implementing security algorithms. These classes should implement the org.apache.kafka.common.security.auth.SecurityProviderCreator interface.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslCipherSuites": {
			"name": "camel.component.vertx-kafka.sslCipherSuites",
			"description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslEnabledProtocols": {
			"name": "camel.component.vertx-kafka.sslEnabledProtocols",
			"description": "The list of protocols enabled for SSL connections. The default is 'TLSv1.2,TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. With the default value for Java 11, clients and servers will prefer TLSv1.3 if both support it and fallback to TLSv1.2 otherwise (assuming both support at least TLSv1.2). This default should be fine for most cases. Also see the config documentation for ssl.protocol.",
			"defaultValue": "\"TLSv1.2,TLSv1.3\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslEndpointIdentificationAlgorithm": {
			"name": "camel.component.vertx-kafka.sslEndpointIdentificationAlgorithm",
			"description": "The endpoint identification algorithm to validate server hostname using server certificate.",
			"defaultValue": "\"https\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslEngineFactoryClass": {
			"name": "camel.component.vertx-kafka.sslEngineFactoryClass",
			"description": "The class of type org.apache.kafka.common.security.auth.SslEngineFactory to provide SSLEngine objects. Default value is org.apache.kafka.common.security.ssl.DefaultSslEngineFactory",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeymanagerAlgorithm": {
			"name": "camel.component.vertx-kafka.sslKeymanagerAlgorithm",
			"description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
			"defaultValue": "\"SunX509\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeyPassword": {
			"name": "camel.component.vertx-kafka.sslKeyPassword",
			"description": "The password of the private key in the key store file orthe PEM key specified in ssl.keystore.key'. This is required for clients only if two-way authentication is configured.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeystoreCertificateChain": {
			"name": "camel.component.vertx-kafka.sslKeystoreCertificateChain",
			"description": "Certificate chain in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with a list of X.509 certificates",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeystoreKey": {
			"name": "camel.component.vertx-kafka.sslKeystoreKey",
			"description": "Private key in the format specified by 'ssl.keystore.type'. Default SSL engine factory supports only PEM format with PKCS#8 keys. If the key is encrypted, key password must be specified using 'ssl.key.password'",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeystoreLocation": {
			"name": "camel.component.vertx-kafka.sslKeystoreLocation",
			"description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeystorePassword": {
			"name": "camel.component.vertx-kafka.sslKeystorePassword",
			"description": "The store password for the key store file. This is optional for client and only needed if 'ssl.keystore.location' is configured. Key store password is not supported for PEM format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslKeystoreType": {
			"name": "camel.component.vertx-kafka.sslKeystoreType",
			"description": "The file format of the key store file. This is optional for client.",
			"defaultValue": "\"JKS\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslProtocol": {
			"name": "camel.component.vertx-kafka.sslProtocol",
			"description": "The SSL protocol used to generate the SSLContext. The default is 'TLSv1.3' when running with Java 11 or newer, 'TLSv1.2' otherwise. This value should be fine for most use cases. Allowed values in recent JVMs are 'TLSv1.2' and 'TLSv1.3'. 'TLS', 'TLSv1.1', 'SSL', 'SSLv2' and 'SSLv3' may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities. With the default value for this config and 'ssl.enabled.protocols', clients will downgrade to 'TLSv1.2' if the server does not support 'TLSv1.3'. If this config is set to 'TLSv1.2', clients will not use 'TLSv1.3' even if it is one of the values in ssl.enabled.protocols and the server only supports 'TLSv1.3'.",
			"defaultValue": "\"TLSv1.2\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslProvider": {
			"name": "camel.component.vertx-kafka.sslProvider",
			"description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslSecureRandomImplementation": {
			"name": "camel.component.vertx-kafka.sslSecureRandomImplementation",
			"description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslTrustmanagerAlgorithm": {
			"name": "camel.component.vertx-kafka.sslTrustmanagerAlgorithm",
			"description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
			"defaultValue": "\"PKIX\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslTruststoreCertificates": {
			"name": "camel.component.vertx-kafka.sslTruststoreCertificates",
			"description": "Trusted certificates in the format specified by 'ssl.truststore.type'. Default SSL engine factory supports only PEM format with X.509 certificates.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslTruststoreLocation": {
			"name": "camel.component.vertx-kafka.sslTruststoreLocation",
			"description": "The location of the trust store file.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslTruststorePassword": {
			"name": "camel.component.vertx-kafka.sslTruststorePassword",
			"description": "The password for the trust store file. If a password is not set, trust store file configured will still be used, but integrity checking is disabled. Trust store password is not supported for PEM format.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.vertx-kafka.sslTruststoreType": {
			"name": "camel.component.vertx-kafka.sslTruststoreType",
			"description": "The file format of the trust store file.",
			"defaultValue": "\"JKS\"",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}