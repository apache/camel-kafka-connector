{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.googlepubsub.CamelGooglepubsubSinkConnector",
		"artifactId": "camel-google-pubsub-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-google-pubsub-sink",
		"type": "sink",
		"version": "0.7.0-SNAPSHOT",
		"description": "Send and receive messages to\/from Google Cloud Platform PubSub Service."
	},
	"properties": {
		"camel.sink.path.projectId": {
			"name": "camel.sink.path.projectId",
			"description": "Project Id",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.destinationName": {
			"name": "camel.sink.path.destinationName",
			"description": "Destination Name",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.ackMode": {
			"name": "camel.sink.endpoint.ackMode",
			"description": "AUTO = exchange gets ack'ed\/nack'ed on completion. NONE = downstream process has to ack\/nack explicitly One of: [AUTO] [NONE]",
			"defaultValue": "\"AUTO\"",
			"priority": "MEDIUM",
			"required": "false",
			"enum": [
				"AUTO",
				"NONE"
			]
		},
		"camel.sink.endpoint.concurrentConsumers": {
			"name": "camel.sink.endpoint.concurrentConsumers",
			"description": "The number of parallel streams consuming from the subscription",
			"defaultValue": "\"1\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.loggerId": {
			"name": "camel.sink.endpoint.loggerId",
			"description": "Logger ID to use when a match to the parent route required",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.maxMessagesPerPoll": {
			"name": "camel.sink.endpoint.maxMessagesPerPoll",
			"description": "The max number of messages to receive from the server in a single API call",
			"defaultValue": "\"1\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.synchronousPull": {
			"name": "camel.sink.endpoint.synchronousPull",
			"description": "Synchronously pull batches of messages",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.basicPropertyBinding": {
			"name": "camel.sink.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.synchronous": {
			"name": "camel.sink.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.google-pubsub.endpoint": {
			"name": "camel.component.google-pubsub.endpoint",
			"description": "Endpoint to use with local Pub\/Sub emulator.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.google-pubsub.lazyStartProducer": {
			"name": "camel.component.google-pubsub.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.google-pubsub.publisherCacheSize": {
			"name": "camel.component.google-pubsub.publisherCacheSize",
			"description": "Maximum number of producers to cache. This could be increased if you have producers for lots of different topics.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.google-pubsub.publisherCacheTimeout": {
			"name": "camel.component.google-pubsub.publisherCacheTimeout",
			"description": "How many milliseconds should each producer stay alive in the cache.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.google-pubsub.basicPropertyBinding": {
			"name": "camel.component.google-pubsub.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		},
		"camel.component.google-pubsub.publisherTerminationTimeout": {
			"name": "camel.component.google-pubsub.publisherTerminationTimeout",
			"description": "How many milliseconds should a producer be allowed to terminate.",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}