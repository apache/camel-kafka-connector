{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.smtps.CamelSmtpsSinkConnector",
		"artifactId": "camel-smtps-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-smtps-sink",
		"type": "sink",
		"version": "0.10.0-SNAPSHOT",
		"description": "Send and receive emails using imap, pop3 and smtp protocols."
	},
	"properties": {
		"camel.sink.path.host": {
			"name": "camel.sink.path.host",
			"description": "The mail server host name",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.path.port": {
			"name": "camel.sink.path.port",
			"description": "The port number of the mail server",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.bcc": {
			"name": "camel.sink.endpoint.bcc",
			"description": "Sets the BCC email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.cc": {
			"name": "camel.sink.endpoint.cc",
			"description": "Sets the CC email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.from": {
			"name": "camel.sink.endpoint.from",
			"description": "The from email address",
			"defaultValue": "\"camel@localhost\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.replyTo": {
			"name": "camel.sink.endpoint.replyTo",
			"description": "The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.subject": {
			"name": "camel.sink.endpoint.subject",
			"description": "The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.to": {
			"name": "camel.sink.endpoint.to",
			"description": "Sets the To email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.javaMailSender": {
			"name": "camel.sink.endpoint.javaMailSender",
			"description": "To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.additionalJavaMailProperties": {
			"name": "camel.sink.endpoint.additionalJavaMailProperties",
			"description": "Sets additional java mail properties, that will append\/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.alternativeBodyHeader": {
			"name": "camel.sink.endpoint.alternativeBodyHeader",
			"description": "Specifies the key to an IN message header that contains an alternative email body. For example, if you send emails in text\/html format and want to provide an alternative mail body for non-HTML email clients, set the alternative mail body with this key as a header.",
			"defaultValue": "\"CamelMailAlternativeBody\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.attachmentsContentTransferEncodingResolver": {
			"name": "camel.sink.endpoint.attachmentsContentTransferEncodingResolver",
			"description": "To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.authenticator": {
			"name": "camel.sink.endpoint.authenticator",
			"description": "The authenticator for login. If set then the password and username are ignored. Can be used for tokens which can expire and therefore must be read dynamically.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.binding": {
			"name": "camel.sink.endpoint.binding",
			"description": "Sets the binding used to convert from a Camel message to and from a Mail message",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.connectionTimeout": {
			"name": "camel.sink.endpoint.connectionTimeout",
			"description": "The connection timeout in milliseconds.",
			"defaultValue": "30000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.contentType": {
			"name": "camel.sink.endpoint.contentType",
			"description": "The mail message content type. Use text\/html for HTML mails.",
			"defaultValue": "\"text\/plain\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.contentTypeResolver": {
			"name": "camel.sink.endpoint.contentTypeResolver",
			"description": "Resolver to determine Content-Type for file attachments.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.debugMode": {
			"name": "camel.sink.endpoint.debugMode",
			"description": "Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.headerFilterStrategy": {
			"name": "camel.sink.endpoint.headerFilterStrategy",
			"description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.ignoreUnsupportedCharset": {
			"name": "camel.sink.endpoint.ignoreUnsupportedCharset",
			"description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.ignoreUriScheme": {
			"name": "camel.sink.endpoint.ignoreUriScheme",
			"description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.javaMailProperties": {
			"name": "camel.sink.endpoint.javaMailProperties",
			"description": "Sets the java mail options. Will clear any default properties and only use the properties provided for this method.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.session": {
			"name": "camel.sink.endpoint.session",
			"description": "Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource, such as a JavaEE container. When using a custom mail session, then the hostname and port from the mail session will be used (if configured on the session).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.useInlineAttachments": {
			"name": "camel.sink.endpoint.useInlineAttachments",
			"description": "Whether to use disposition inline or attachment.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.password": {
			"name": "camel.sink.endpoint.password",
			"description": "The password for login. See also setAuthenticator(MailAuthenticator).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.sslContextParameters": {
			"name": "camel.sink.endpoint.sslContextParameters",
			"description": "To configure security using SSLContextParameters.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.username": {
			"name": "camel.sink.endpoint.username",
			"description": "The username for login. See also setAuthenticator(MailAuthenticator).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.bcc": {
			"name": "camel.component.smtps.bcc",
			"description": "Sets the BCC email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.cc": {
			"name": "camel.component.smtps.cc",
			"description": "Sets the CC email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.from": {
			"name": "camel.component.smtps.from",
			"description": "The from email address",
			"defaultValue": "\"camel@localhost\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.lazyStartProducer": {
			"name": "camel.component.smtps.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.replyTo": {
			"name": "camel.component.smtps.replyTo",
			"description": "The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.subject": {
			"name": "camel.component.smtps.subject",
			"description": "The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.to": {
			"name": "camel.component.smtps.to",
			"description": "Sets the To email address. Separate multiple email addresses with comma.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.javaMailSender": {
			"name": "camel.component.smtps.javaMailSender",
			"description": "To use a custom org.apache.camel.component.mail.JavaMailSender for sending emails.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.additionalJavaMailProperties": {
			"name": "camel.component.smtps.additionalJavaMailProperties",
			"description": "Sets additional java mail properties, that will append\/override any default properties that is set based on all the other options. This is useful if you need to add some special options but want to keep the others as is.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.alternativeBodyHeader": {
			"name": "camel.component.smtps.alternativeBodyHeader",
			"description": "Specifies the key to an IN message header that contains an alternative email body. For example, if you send emails in text\/html format and want to provide an alternative mail body for non-HTML email clients, set the alternative mail body with this key as a header.",
			"defaultValue": "\"CamelMailAlternativeBody\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.attachmentsContentTransferEncodingResolver": {
			"name": "camel.component.smtps.attachmentsContentTransferEncodingResolver",
			"description": "To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.authenticator": {
			"name": "camel.component.smtps.authenticator",
			"description": "The authenticator for login. If set then the password and username are ignored. Can be used for tokens which can expire and therefore must be read dynamically.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.autowiredEnabled": {
			"name": "camel.component.smtps.autowiredEnabled",
			"description": "Whether autowiring is enabled. This is used for automatic autowiring options (the option must be marked as autowired) by looking up in the registry to find if there is a single instance of matching type, which then gets configured on the component. This can be used for automatic configuring JDBC data sources, JMS connection factories, AWS Clients, etc.",
			"defaultValue": "true",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.configuration": {
			"name": "camel.component.smtps.configuration",
			"description": "Sets the Mail configuration",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.connectionTimeout": {
			"name": "camel.component.smtps.connectionTimeout",
			"description": "The connection timeout in milliseconds.",
			"defaultValue": "30000",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.contentType": {
			"name": "camel.component.smtps.contentType",
			"description": "The mail message content type. Use text\/html for HTML mails.",
			"defaultValue": "\"text\/plain\"",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.contentTypeResolver": {
			"name": "camel.component.smtps.contentTypeResolver",
			"description": "Resolver to determine Content-Type for file attachments.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.debugMode": {
			"name": "camel.component.smtps.debugMode",
			"description": "Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.ignoreUnsupportedCharset": {
			"name": "camel.component.smtps.ignoreUnsupportedCharset",
			"description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.ignoreUriScheme": {
			"name": "camel.component.smtps.ignoreUriScheme",
			"description": "Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.javaMailProperties": {
			"name": "camel.component.smtps.javaMailProperties",
			"description": "Sets the java mail options. Will clear any default properties and only use the properties provided for this method.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.session": {
			"name": "camel.component.smtps.session",
			"description": "Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where mail sessions are created and managed by some other resource, such as a JavaEE container. When using a custom mail session, then the hostname and port from the mail session will be used (if configured on the session).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.useInlineAttachments": {
			"name": "camel.component.smtps.useInlineAttachments",
			"description": "Whether to use disposition inline or attachment.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.headerFilterStrategy": {
			"name": "camel.component.smtps.headerFilterStrategy",
			"description": "To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.password": {
			"name": "camel.component.smtps.password",
			"description": "The password for login. See also setAuthenticator(MailAuthenticator).",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.sslContextParameters": {
			"name": "camel.component.smtps.sslContextParameters",
			"description": "To configure security using SSLContextParameters.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.useGlobalSslContextParameters": {
			"name": "camel.component.smtps.useGlobalSslContextParameters",
			"description": "Enable usage of global SSL context parameters.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.smtps.username": {
			"name": "camel.component.smtps.username",
			"description": "The username for login. See also setAuthenticator(MailAuthenticator).",
			"priority": "MEDIUM",
			"required": "false"
		}
	}
}