{
	"connector": {
		"class": "org.apache.camel.kafkaconnector.springintegration.CamelSpringintegrationSinkConnector",
		"artifactId": "camel-spring-integration-kafka-connector",
		"groupId": "org.apache.camel.kafkaconnector",
		"id": "camel-spring-integration-sink",
		"type": "sink",
		"version": "0.6.0-SNAPSHOT"
	},
	"properties": {
		"camel.sink.path.defaultChannel": {
			"name": "camel.sink.path.defaultChannel",
			"description": "The default channel name which is used by the Spring Integration Spring context. It will equal to the inputChannel name for the Spring Integration consumer and the outputChannel name for the Spring Integration provider.",
			"priority": "HIGH",
			"required": "true"
		},
		"camel.sink.endpoint.inOut": {
			"name": "camel.sink.endpoint.inOut",
			"description": "The exchange pattern that the Spring integration endpoint should use. If inOut=true then a reply channel is expected, either from the Spring Integration Message header or configured on the endpoint.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.lazyStartProducer": {
			"name": "camel.sink.endpoint.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.outputChannel": {
			"name": "camel.sink.endpoint.outputChannel",
			"description": "The Spring integration output channel name that is used to send messages to Spring integration.",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.basicPropertyBinding": {
			"name": "camel.sink.endpoint.basicPropertyBinding",
			"description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.sink.endpoint.synchronous": {
			"name": "camel.sink.endpoint.synchronous",
			"description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported).",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.spring-integration.lazyStartProducer": {
			"name": "camel.component.spring-integration.lazyStartProducer",
			"description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing.",
			"defaultValue": "false",
			"priority": "MEDIUM",
			"required": "false"
		},
		"camel.component.spring-integration.basicPropertyBinding": {
			"name": "camel.component.spring-integration.basicPropertyBinding",
			"description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities",
			"defaultValue": "false",
			"priority": "LOW",
			"required": "false"
		}
	}
}